{
  "active": false,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Fetch support_requests",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch cities",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch MSRs with zipcode, city and state",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetches lat long",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetches volunteers with lat long",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch cities": {
      "main": [
        [
          {
            "node": "MSRs with valid city",
            "type": "main",
            "index": 1
          },
          {
            "node": "MSRs with invalid city",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Normalize city and zipcode": {
      "main": [
        [
          {
            "node": "Volunteers with international city + volunteers with valid city",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "MSRs with valid city": {
      "main": [
        [
          {
            "node": "Normalize city and zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSRs with invalid city": {
      "main": [
        [
          {
            "node": "MSRs with invalid zipcode",
            "type": "main",
            "index": 0
          },
          {
            "node": "MSRs with valid zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSRs with invalid zipcode": {
      "main": [
        [
          {
            "node": "MSRs with correct city + MSRs with invalid zipcode",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Standardize found cities": {
      "main": [
        [
          {
            "node": "Handle corner cases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle corner cases": {
      "main": [
        [
          {
            "node": "MSRs with new cities",
            "type": "main",
            "index": 1
          },
          {
            "node": "MSRs with not found cities",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Select distinct zipcodes": {
      "main": [
        [
          {
            "node": "Fetch city from zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch city from zipcode": {
      "main": [
        [
          {
            "node": "Standardize found cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add NOT_FOUND city and state": {
      "main": [
        [
          {
            "node": "MSRs after Brasil API",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "MSRs with valid zipcode": {
      "main": [
        [
          {
            "node": "Select distinct zipcodes",
            "type": "main",
            "index": 0
          },
          {
            "node": "MSRs with new cities",
            "type": "main",
            "index": 0
          },
          {
            "node": "MSRs with not found cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSRs with new cities": {
      "main": [
        [
          {
            "node": "MSRs after Brasil API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSRs with not found cities": {
      "main": [
        [
          {
            "node": "Add NOT_FOUND city and state",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSRs with correct city + MSRs with invalid zipcode": {
      "main": [
        [
          {
            "node": "All MSRs with correct cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSRs after Brasil API": {
      "main": [
        [
          {
            "node": "All MSRs with correct cities",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetches lat long": {
      "main": [
        [
          {
            "node": "Handle invalid lat long",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All MSRs with correct cities": {
      "main": [
        [
          {
            "node": "MSRs with lat long",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle invalid lat long": {
      "main": [
        [
          {
            "node": "MSRs with lat long",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "MSRs with lat long": {
      "main": [
        [
          {
            "node": "Support_request with MSR info",
            "type": "main",
            "index": 1
          },
          {
            "node": "Support_request with no MSR info",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch MSRs with zipcode, city and state": {
      "main": [
        [
          {
            "node": "Is international?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch support_requests": {
      "main": [
        [
          {
            "node": "Support_request with MSR info",
            "type": "main",
            "index": 0
          },
          {
            "node": "Support_request with no MSR info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is international?": {
      "main": [
        [
          {
            "node": "Adds zipcode not_found",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MSRs with valid city",
            "type": "main",
            "index": 0
          },
          {
            "node": "MSRs with invalid city",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adds zipcode not_found": {
      "main": [
        [
          {
            "node": "Volunteers with international city + volunteers with valid city",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with international city + volunteers with valid city": {
      "main": [
        [
          {
            "node": "MSRs with correct city + MSRs with invalid zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Support_request with no MSR info": {
      "main": [
        [
          {
            "node": "Support_requests from volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetches volunteers with lat long": {
      "main": [
        [
          {
            "node": "Support_requests from volunteers",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Support_request with MSR info": {
      "main": [
        [
          {
            "node": "All support_requests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Support_requests from volunteers": {
      "main": [
        [
          {
            "node": "All support_requests",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "All support_requests": {
      "main": [
        [
          {
            "node": "Insert into support_requests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-16T21:26:50.318Z",
  "id": "BZDbnG6BWaw8pZ2y",
  "isArchived": false,
  "meta": null,
  "name": "[Database Pipeline] - support_requests PROD",
  "nodes": [
    {
      "parameters": {},
      "id": "a107581e-6958-4d37-8616-0e66d143997b",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1020,
        1480
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT city_value, state\nFROM public.cities",
        "additionalFields": {}
      },
      "id": "21c5d097-011d-44b9-864a-68cd25c9d60b",
      "name": "Fetch cities",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -300,
        1160
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "city",
              "field2": "city_value"
            },
            {
              "field1": "state",
              "field2": "state"
            }
          ]
        },
        "options": {}
      },
      "id": "99ecab45-58b2-4656-bd47-2b06ec48eb9d",
      "name": "MSRs with valid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        460,
        780
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "city",
              "field2": "city_value"
            },
            {
              "field1": "state",
              "field2": "state"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "id": "18787188-b054-4a93-aa97-5578aa76a9d3",
      "name": "MSRs with invalid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        460,
        1120
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    item.json.zipcode = \"not_found\";\n  }\n  \n}\n\nreturn $input.all();"
      },
      "id": "f9b98b30-07b7-49df-a1dd-d23d1a84d073",
      "name": "Normalize city and zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        840,
        780
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    output.push(\n      {\n        msr_id: item.json.msr_id,\n        zipcode: \"not_found\",\n        city: \"not_found\",\n        state: \"not_found\"\n      }\n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "171e9dd5-ea9d-43b1-b9fb-9c3cbd023cfd",
      "name": "MSRs with invalid zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        860,
        1120
      ]
    },
    {
      "parameters": {},
      "id": "19783308-dc25-49af-9511-cfa40d715db6",
      "name": "MSRs with correct city + MSRs with invalid zipcode",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1600,
        760
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNotNull = item.json.zipcode;\n  const zipcodeHasCorrectLength = item.json.zipcode ? item.json.zipcode.length === 8 : false;\n  const zipcodeIsANumber = !isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNotNull && zipcodeHasCorrectLength && zipcodeIsANumber){\n    output.push(\n      {\n        msr_id: item.json.msr_id,\n        zipcode: item.json.zipcode\n      }\n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "143d5673-9e9c-445a-ba75-22d382078ca4",
      "name": "MSRs with valid zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        860,
        1400
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = [];\n\nfor (const item of $input.all()) {\n\n  if(item.json.city){\n    \n    const normalizedName = item.json.city\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \") \n    .replace(/ *\\([^)]*\\) */g, \"\")\n    .toUpperCase();\n  \n    output.push(\n      {\n        zipcode: item.json.cep,\n        city: normalizedName,\n        state: item.json.state\n      } \n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "213a9d94-9cc2-44ca-a2ef-769b8f8a40ae",
      "name": "Standardize found cities",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1540,
        1700
      ]
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  if(item.json.city === \"IPIABAS\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"SAO JOSE DO TURVO\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"CAETE-ACU\" && item.json.state === \"BA\"){\n    item.json.city = \"PALMEIRAS\";\n  }\n  if(item.json.city === \"MORAES ALMEIDA\" && item.json.state === \"PA\"){\n    item.json.city = \"ITAITUBA\";\n  }\n  \n}\n\n\nreturn $input.all();"
      },
      "id": "8d00b05d-73a4-41ce-bfbd-2202b0f4cdf7",
      "name": "Handle corner cases",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1740,
        1700
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const newItem = {\n    zipcode: item.json.zipcode\n  }\n  \n  if(!output.includes(newItem)){\n    output.push(newItem)   \n  }\n}\n\nreturn output;"
      },
      "id": "ad6932d5-0035-4fe2-a3e2-dd279629af0d",
      "name": "Select distinct zipcodes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1120,
        1700
      ]
    },
    {
      "parameters": {
        "url": "=https://brasilapi.com.br/api/cep/v1/{{$json[\"zipcode\"]}}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 20
            }
          },
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "2cc083df-8b45-4ddc-b36a-be9791f4c385",
      "name": "Fetch city from zipcode",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1340,
        1700
      ],
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  item.json.city = \"not_found\";\n  item.json.state = \"not_found\";\n}\n\nreturn $input.all();"
      },
      "id": "ae99e598-3ca7-454f-87d3-623b2f10d434",
      "name": "Add NOT_FOUND city and state",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2380,
        1680
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zipcode",
              "field2": "zipcode"
            }
          ]
        },
        "options": {
          "multipleMatches": "first"
        }
      },
      "id": "bdac61c9-03f7-4ae7-99e6-c9d8878f2cf8",
      "name": "MSRs with new cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        2160,
        1420
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zipcode",
              "field2": "zipcode"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "id": "26a7355c-babf-4660-ba5d-0629ba79e400",
      "name": "MSRs with not found cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        2140,
        1680
      ]
    },
    {
      "parameters": {},
      "id": "376f8e7f-8c11-43e2-ae2e-8a09301446c9",
      "name": "MSRs after Brasil API",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        2640,
        1440
      ]
    },
    {
      "parameters": {},
      "id": "aa0ff184-4274-433e-91c8-a4d61157cb64",
      "name": "All MSRs with correct cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3200,
        1040
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    user_id AS msr_id,\n    latitude AS lat,\n    longitude AS lng \nFROM public.solidarity_users \nWHERE \n    organization_id = 360273031591\n",
        "additionalFields": {}
      },
      "id": "639f653d-e399-4c7b-b000-f8ad184fe922",
      "name": "Fetches lat long",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -280,
        2500
      ],
      "credentials": {
        "postgres": {
          "id": "GPnWI2OL5IjBv3zm",
          "name": "[PROD] Bonde postgres"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  \n  if(!item.json.lat || !item.json.lng)\n  {\n    item.json.lat = null;\n    item.json.lng = null;\n  }\n  else {\n    \n    const isLatitudeNotANumber = isNaN(item.json.lat);\n    const isLongitudeNotANumber = isNaN(item.json.lng);\n\n    if(isLatitudeNotANumber || isLongitudeNotANumber)\n    {\n      item.json.lat = null;\n      item.json.lng = null;\n    }\n    else {\n      \n      const isLatitudeNotInRange = item.json.lat < -90 \n      || item.json.lat > 90;\n    const isLongitudeNotInRange = item.json.lng < -180 \n      || item.json.lng > 180;\n\n      if(isLatitudeNotInRange || isLongitudeNotInRange)\n      {\n        item.json.lat = null;\n        item.json.lng = null;\n      }\n      else {\n        \n        item.json.lat = parseFloat(item.json.lat);\n        item.json.lng = parseFloat(item.json.lng);\n      }\n      \n    }\n  }\n}\n\nreturn $input.all();"
      },
      "id": "ad7878d7-319e-419d-b798-6c9f893a1282",
      "name": "Handle invalid lat long",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -40,
        2500
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "msr_id",
              "field2": "msr_id"
            }
          ]
        },
        "options": {
          "multipleMatches": "first"
        }
      },
      "id": "4765626d-83e9-4ff5-86a9-63257ddcccb4",
      "name": "MSRs with lat long",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3680,
        2480
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n   user_id AS msr_id,\n   REGEXP_REPLACE(cep, '-', '', 'g') AS zipcode,\n   BTRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(city), 'À|Á|Â|Ã|Ä|Å', 'A', 'g'), 'È|É|Ê|Ë', 'E', 'g'), 'Í|Ì|Î|Ĩ|Ï ', 'I', 'g'), 'Ò|Ó|Ô|Õ|Ö', 'O', 'g'),'Ù|Ú|Û|Ü', 'U', 'g'), 'Ç', 'C', 'g')) AS city,\n   BTRIM(UPPER(state)) AS state\nFROM public.solidarity_users\nWHERE organization_id = 360273031591\n\n\n",
        "additionalFields": {}
      },
      "id": "31f0fcb7-7017-4357-bbb4-13dbf0e86c9e",
      "name": "Fetch MSRs with zipcode, city and state",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -300,
        740
      ],
      "credentials": {
        "postgres": {
          "id": "GPnWI2OL5IjBv3zm",
          "name": "[PROD] Bonde postgres"
        }
      }
    },
    {
      "parameters": {
        "schema": "match",
        "table": "support_requests",
        "columns": "msr_id, zendesk_ticket_id, support_type, support_expertise, priority, has_disability, requires_libras, accepts_online_support, status, city, state, lat, lng, created_at, updated_at",
        "additionalFields": {}
      },
      "id": "204ed732-3700-40ae-88d0-0f8bc034d16b",
      "name": "Insert into support_requests",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        4740,
        3080
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH msr_tickets AS (\n    SELECT \n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        requester_id AS msr_id,\n        CASE \n            WHEN SUBSTRING(raw_subject, '\\[(.+)\\]') = 'Psicológico' THEN 'psychological'\n            ELSE 'legal'\n        END AS support_type,\n        'not_found' AS support_expertise,\n        null AS priority,\n        null AS has_disability,\n        null AS requires_libras,\n        TRUE AS accepts_online_support,\n        COALESCE(updated_at, NOW()) AS updated_at,\n        COALESCE(created_at, NOW()) AS created_at\n    FROM public.solidarity_tickets\n    WHERE \n        organization_id = 360273031591 \n        AND SUBSTRING(raw_subject, '\\[(.+)\\]') IN ('Psicológico', 'Jurídico') \n        AND raw_subject NOT LIKE '%Re:%'\n        AND tags::text NOT LIKE '%msr-fora-do-perfil%'\n),\nvolunteer_tickets AS (\n    SELECT \n        requester_id AS volunteer_zendesk_user_id,\n        ticket_id::TEXT AS volunteer_zendesk_ticket_id,\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS msr_zendesk_ticket_id\n    FROM public.solidarity_tickets\n    WHERE organization_id IN (360269610652, 360282119532)\n),\ntickets_solicitacao_repetida AS (\n    SELECT \n        'duplicated' AS status_support_request,\n        *\n    FROM msr_tickets\n    WHERE \n        status_acolhimento = 'solicitação_repetida'\n        OR tags::text LIKE '%closed_by_merge%'\n),\nrn_duplicated_tickets AS (\n    SELECT\n        a.*,\n        ROW_NUMBER() OVER(PARTITION BY a.requester_id, SUBSTRING(a.raw_subject, '\\[(.+)\\]') ORDER BY a.updated_at DESC) AS rn\n    FROM msr_tickets a\n    LEFT JOIN tickets_solicitacao_repetida USING (id) \n    WHERE status_support_request IS NULL\n),\nduplicated_tickets AS (\n    SELECT\n        'duplicated' AS status_support_request,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM rn_duplicated_tickets\n    WHERE \n        rn > 1\n),\nall_duplicated_tickets AS (\n    SELECT * FROM tickets_solicitacao_repetida\n    UNION\n    SELECT * FROM duplicated_tickets\n),\nnon_duplicated_tickets AS (\n    SELECT a.* \n    FROM msr_tickets a\n    LEFT JOIN all_duplicated_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\npublic_service_tickets AS (\n    SELECT \n        'public_service' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'encaminhamento__realizado_para_serviço_público'\n),\nsolicitacao_recebida_tickets AS (\n    SELECT \n        CASE \n            WHEN status = 'closed' THEN 'closed'\n            WHEN status != 'closed' AND tags::TEXT LIKE '%nova-voluntaria-com-prioridade%' THEN 'special_case'\n            ELSE 'open'\n        END AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'solicitação_recebida'\n),\ninvalid_status_tickets AS (\n    SELECT \n        'closed' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento IS NULL OR status_acolhimento IN ('', 'encaminhamento__antigo', 'encaminhamento__confirmou_disponibilidade', 'encaminhamento__negado')\n),\nnon_match_tickets AS (\n    SELECT * FROM all_duplicated_tickets\n    UNION\n    SELECT * FROM public_service_tickets\n    UNION \n    SELECT * FROM solicitacao_recebida_tickets\n    UNION \n    SELECT * FROM invalid_status_tickets\n),\nshould_have_match_tickets AS (\n    SELECT a.*\n    FROM non_duplicated_tickets a\n    LEFT JOIN non_match_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\nshould_have_match_with_id_from_link_match AS (\n    SELECT\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS volunteer_zendesk_ticket_id,\n        *\n    FROM should_have_match_tickets\n),\nmatched_through_msr_link_match AS (\n    SELECT \n        a.volunteer_zendesk_ticket_id::bigint AS volunteer_zendesk_ticket_id,\n        b.volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM should_have_match_with_id_from_link_match a\n    INNER JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n),\ndidnt_match_through_msr_link_match AS (\n    SELECT \n        a.*,\n        b.volunteer_zendesk_user_id\n    FROM should_have_match_with_id_from_link_match a\n    LEFT JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n    WHERE b.volunteer_zendesk_user_id IS NULL\n),\nrn_solidarity_matches AS (\n    SELECT \n        ROW_NUMBER() OVER (PARTITION BY individuals_ticket_id ORDER BY created_at DESC) AS rn,\n        individuals_ticket_id,\n        volunteers_user_id,\n        volunteers_ticket_id\n    FROM public.solidarity_matches\n),\ndedup_solidarity_matches AS (\n    SELECT *\n    FROM rn_solidarity_matches \n    WHERE rn = 1\n),\nmatched_through_solidarity_matches AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    INNER JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n),\nall_matched AS (\n    SELECT * FROM matched_through_msr_link_match\n    UNION\n    SELECT * FROM matched_through_solidarity_matches\n),\nall_not_matched AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    LEFT JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n    WHERE b.individuals_ticket_id IS NULL\n),\nall_should_have_been_matched AS (\n    SELECT * FROM all_matched\n    UNION\n    SELECT * FROM all_not_matched\n),\nall_matched_with_real_status_acolhimento AS (\n    SELECT \n        a.*,\n        CASE\n            WHEN \n                a.status_acolhimento = 'encaminhamento__realizado' \n                AND a.status_acolhimento != b.status_acolhimento \n                AND b.status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento_interrompido')\n            THEN b.status_acolhimento\n            ELSE a.status_acolhimento\n       END AS real_status_acolhimento\n    FROM all_should_have_been_matched a\n    INNER JOIN public.solidarity_tickets b ON a.volunteer_zendesk_ticket_id::bigint = b.ticket_id\n),\nall_matched_with_status AS (\n    SELECT \n        CASE \n            WHEN real_status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento__aguardando_confirmação', 'encaminhamento__realizado', 'encaminhamento_interrompido') THEN 'matched'\n            ELSE null\n        END AS status_support_request,\n        CASE \n            WHEN real_status_acolhimento = 'atendimento__concluído' THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status = 'closed' THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status IN ('open', 'pending') THEN 'in_contact'\n            WHEN real_status_acolhimento = 'atendimento__interrompido' THEN 'interrupted_after_support'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status = 'closed' THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status != 'closed' THEN 'waiting_contact'\n            WHEN real_status_acolhimento = 'encaminhamento_interrompido' THEN 'interrupted_before_support'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status = 'closed' THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) < (CURRENT_DATE - 30)  THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) >= (CURRENT_DATE - 30) THEN 'waiting_contact'\n            ELSE null\n        END AS status_match,\n        *\n    FROM all_matched_with_real_status_acolhimento\n),\nall_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM all_matched_with_status\n),\nall_non_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM non_match_tickets\n),\nsupport_requests AS (\n    SELECT * FROM all_matched_support_request\n    UNION\n    SELECT * FROM all_non_matched_support_request\n),\nmatches AS (\n    SELECT \n    msr_id,\n    ticket_id AS msr_zendesk_ticket_id,\n    volunteer_zendesk_user_id,\n    volunteer_zendesk_ticket_id,\n    support_type,\n    'old' AS match_type,\n    'old' AS match_stage,\n    status_match AS status,\n    updated_at,\n    COALESCE(TO_TIMESTAMP(data_encaminhamento, 'YYYY-MM-DD'), created_at) AS created_at\n    FROM all_matched_with_status\n\n),\nvolunteer_match_tickets AS (\n    SELECT \n        volunteer_zendesk_ticket_id, \n        msr_zendesk_ticket_id\n    FROM matches\n    WHERE volunteer_zendesk_ticket_id IS NOT NULL\n),\nvolunteer_match_tickets_with_status AS (\n    SELECT \n        msr_zendesk_ticket_id,\n        SPLIT_PART(status_acolhimento, 'atendimento_', 2) AS survey_type,\n        updated_at,\n        updated_at AS created_at\n    FROM volunteer_match_tickets\n    INNER JOIN public.solidarity_tickets ON volunteer_zendesk_ticket_id::bigint = ticket_id\n    WHERE \n        organization_id IN (360269610652, 360282119532)\n        AND status_acolhimento IN ('atendimento_triagem_1', 'atendimento_triagem_2', 'atendimento_acompanhamento_1', 'atendimento_acompanhamento_2')\n\n)\nSELECT *\nFROM support_requests",
        "additionalFields": {}
      },
      "id": "811c6890-d203-46d7-bcbe-6ce009b79501",
      "name": "Fetch support_requests",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -300,
        3020
      ],
      "credentials": {
        "postgres": {
          "id": "GPnWI2OL5IjBv3zm",
          "name": "[PROD] Bonde postgres"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "msr_id",
              "field2": "msr_id"
            }
          ]
        },
        "options": {}
      },
      "id": "fdb78141-7414-4a63-9c7c-7565988bfc29",
      "name": "Support_request with MSR info",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        4020,
        3060
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"state\"]}}",
              "value2": "INT"
            },
            {
              "value1": "={{$json[\"city\"]}}",
              "value2": "INTERNACIONAL"
            }
          ]
        }
      },
      "id": "e985e93d-fe92-430b-9545-70ab7d1cdad7",
      "name": "Is international?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        20,
        740
      ]
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  item.json.zipcode = \"not_found\";\n  \n}\n\nreturn $input.all();"
      },
      "id": "d5a4aa27-46ae-426b-88de-e53cb2063aba",
      "name": "Adds zipcode not_found",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {},
      "id": "24693d9b-397a-45bc-ae47-2999f8a84d6f",
      "name": "Volunteers with international city + volunteers with valid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1240,
        500
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    zendesk_user_id AS msr_id,\n    latitude AS lat,\n    longitude AS lng,\n    city,\n    state\nFROM public.volunteers\n",
        "additionalFields": {}
      },
      "id": "5743c9da-354f-4ce9-b161-caa15b86e2d7",
      "name": "Fetches volunteers with lat long",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -300,
        3320
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "msr_id",
              "field2": "msr_id"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "id": "74d28fe6-329f-4576-b31e-1431abb96cf8",
      "name": "Support_request with no MSR info",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        4020,
        3300
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "msr_id",
              "field2": "msr_id"
            }
          ]
        },
        "options": {
          "multipleMatches": "first"
        }
      },
      "id": "f9661d2c-8507-4054-9faf-02214061fdef",
      "name": "Support_requests from volunteers",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        4240,
        3500
      ]
    },
    {
      "parameters": {},
      "id": "95403155-eee5-410a-9ffb-662f65f7aaad",
      "name": "All support_requests",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        4480,
        3080
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2024-01-16T21:26:50.321Z",
      "updatedAt": "2024-01-16T21:26:50.321Z",
      "role": "workflow:owner",
      "workflowId": "BZDbnG6BWaw8pZ2y",
      "projectId": "rfgBK87HsySgxYKT",
      "project": {
        "createdAt": "2024-11-15T08:07:36.637Z",
        "updatedAt": "2024-11-15T08:07:36.637Z",
        "id": "rfgBK87HsySgxYKT",
        "name": "Desenvolvimento Mapa <dev@mapa.org.br>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2024-11-15T08:07:36.637Z",
            "updatedAt": "2024-11-15T08:07:36.637Z",
            "userId": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
            "projectId": "rfgBK87HsySgxYKT",
            "user": {
              "createdAt": "2024-01-09T22:21:28.810Z",
              "updatedAt": "2025-10-07T13:04:29.000Z",
              "id": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
              "email": "dev@mapa.org.br",
              "firstName": "Desenvolvimento",
              "lastName": "Mapa",
              "personalizationAnswers": null,
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "sMoToF9HauyKvsFJ",
                "isOnboarded": true,
                "userActivatedAt": 1731658062996,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1749493410027
                },
                "easyAIWorkflowOnboarded": true
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-07",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-16T21:22:09.302Z",
      "updatedAt": "2024-01-16T21:22:09.302Z",
      "id": "8M37j63g33Qdgeyh",
      "name": "database pipeline"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-16T21:44:26.000Z",
  "versionId": "bb7908fc-7c27-4c54-8cc3-7e7f8ccdbec1"
}