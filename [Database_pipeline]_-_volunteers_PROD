{
  "active": false,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Fetch volunteers with zipcode, city and state",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch cities",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch volunteers",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetches lat long",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch cities": {
      "main": [
        [
          {
            "node": "Volunteers with valid city",
            "type": "main",
            "index": 1
          },
          {
            "node": "Volunteers with invalid city",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch volunteers with zipcode, city and state": {
      "main": [
        [
          {
            "node": "Is international?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle invalid lat long1": {
      "main": [
        [
          {
            "node": "Volunteers with lat long",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Volunteers with valid city": {
      "main": [
        [
          {
            "node": "Normalize city and zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with invalid city": {
      "main": [
        [
          {
            "node": "Volunteers with invalid zipcode",
            "type": "main",
            "index": 0
          },
          {
            "node": "Volunteers with valid zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with invalid zipcode": {
      "main": [
        [
          {
            "node": "Volunteer with correct city + volunteers with invalid zipcode",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Volunteers with valid zipcode": {
      "main": [
        [
          {
            "node": "Select distinct zipcodes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Volunteers with new cities",
            "type": "main",
            "index": 0
          },
          {
            "node": "Volunteers with not found cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize city and zipcode": {
      "main": [
        [
          {
            "node": "Volunteers with international city + valid city",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Standardize found cities": {
      "main": [
        [
          {
            "node": "Handle corner cases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle corner cases": {
      "main": [
        [
          {
            "node": "Volunteers with new cities",
            "type": "main",
            "index": 1
          },
          {
            "node": "Volunteers with not found cities",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Select distinct zipcodes": {
      "main": [
        [
          {
            "node": "Fetch city from zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch city from zipcode": {
      "main": [
        [
          {
            "node": "Standardize found cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteer with correct city + volunteers with invalid zipcode": {
      "main": [
        [
          {
            "node": "All volunteers with correct cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with new cities": {
      "main": [
        [
          {
            "node": "Volunteers after Brasil API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with not found cities": {
      "main": [
        [
          {
            "node": "Add NOT_FOUND city and state",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add NOT_FOUND city and state": {
      "main": [
        [
          {
            "node": "Volunteers after Brasil API",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Volunteers after Brasil API": {
      "main": [
        [
          {
            "node": "All volunteers with correct cities",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Volunteers with lat long": {
      "main": [
        [
          {
            "node": "All volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All volunteers with correct cities": {
      "main": [
        [
          {
            "node": "All volunteers",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch volunteers": {
      "main": [
        [
          {
            "node": "Volunteers with lat long",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetches lat long": {
      "main": [
        [
          {
            "node": "Handle invalid lat long1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is international?": {
      "main": [
        [
          {
            "node": "Adds not_found zipcode",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Volunteers with valid city",
            "type": "main",
            "index": 0
          },
          {
            "node": "Volunteers with invalid city",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adds not_found zipcode": {
      "main": [
        [
          {
            "node": "Volunteers with international city + valid city",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with international city + valid city": {
      "main": [
        [
          {
            "node": "Volunteer with correct city + volunteers with invalid zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All volunteers": {
      "main": [
        [
          {
            "node": "Insert into volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-16T21:42:40.357Z",
  "id": "kvEwsmFv1pZniwXY",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[Database pipeline] - volunteers PROD",
  "nodes": [
    {
      "parameters": {},
      "id": "b6e4ff2c-1c07-48ec-b68b-9128248a8eb3",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        900,
        2400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT city_value, state\nFROM public.cities",
        "additionalFields": {}
      },
      "id": "cbed09d1-f9d0-4398-a3be-ade16bce1a0d",
      "name": "Fetch cities",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        2220,
        1280
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n   user_id AS zendesk_user_id,\n   REGEXP_REPLACE(cep, '-', '', 'g') AS zipcode,\n   BTRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(city), 'À|Á|Â|Ã|Ä|Å', 'A', 'g'), 'È|É|Ê|Ë', 'E', 'g'), 'Í|Ì|Î|Ĩ|Ï ', 'I', 'g'), 'Ò|Ó|Ô|Õ|Ö', 'O', 'g'),'Ù|Ú|Û|Ü', 'U', 'g'), 'Ç', 'C', 'g')) AS city,\n   BTRIM(UPPER(state)) AS state\nFROM public.solidarity_users\nWHERE organization_id IN (360269610652, 360282119532)\n\n\n\n",
        "additionalFields": {}
      },
      "id": "79f93253-29b3-48af-81c5-4c4e18c51df9",
      "name": "Fetch volunteers with zipcode, city and state",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        2220,
        860
      ],
      "credentials": {
        "postgres": {
          "id": "GPnWI2OL5IjBv3zm",
          "name": "[PROD] Bonde"
        }
      }
    },
    {
      "parameters": {
        "content": "## O que esse workflow faz\n\n### 1. Padroniza o município das voluntárias:\n- Busca todas as voluntárias na tabela `solidarity_users` do Bonde;\n- Busca todos os municípios padronizados na tabela `cities` do Mapa do Acolhimento;\n- Executa um join entre essas duas tabelas;\n- Se encontrar correspondência, show, o município da voluntária está correto.\n- Se não encontrar correspondência, verifica se o CEP da voluntária é válido (não está vazio, possui 8 caracteres e apenas números);\n- Se o CEP for inválido, adiciona `NOT_FOUND` nos campos `zipcode`, `city` e `state`;\n- Se o CEP for válido, busca na Brasil API o município correspondente a esse CEP;\n- Se encontrar na Brasil API, show, adiciona esse município para a voluntária;\n- Se não encontrar, adiciona `NOT_FOUND` nos campos `zipcode`, `city` e `state`.\n\n### 2. Padroniza latitude e longitude das voluntárias:\n- Se a latitude ou longitude for inválida (nula, não numérica ou estiver fora do range necessário), substiui por `null`.\n- Se não, mantém como está.\n\n### 3. Padroniza os status antigos com os novos status:\n- Seguindo a [documentação](https://miro.com/app/board/uXjVMzPi3ZA=/?moveToWidget=3458764570428954733&cot=14).\n\n\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 502.6746367999999,
        "width": 946.9145087999996
      },
      "id": "12d0d11a-e4f0-4f22-bad0-5643d3e12e99",
      "name": "Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  \n  if(!item.json.latitude || !item.json.longitude)\n  {\n    item.json.latitude = null;\n    item.json.longitude = null;\n  }\n  else {\n    \n    const isLatitudeNotANumber = isNaN(item.json.latitude);\n    const isLongitudeNotANumber = isNaN(item.json.longitude);\n\n    if(isLatitudeNotANumber || isLongitudeNotANumber)\n    {\n      item.json.latitude = null;\n      item.json.longitude = null;\n    }\n    else {\n      \n      const isLatitudeNotInRange = item.json.latitude < -90 \n      || item.json.latitude > 90;\n    const isLongitudeNotInRange = item.json.longitude < -180 \n      || item.json.longitude > 180;\n\n      if(isLatitudeNotInRange || isLongitudeNotInRange)\n      {\n        item.json.latitude = null;\n        item.json.longitude = null;\n      }\n      else {\n        \n        item.json.latitude = parseFloat(item.json.latitude);\n        item.json.longitude = parseFloat(item.json.longitude);\n      }\n      \n    }\n  }\n}\n\nreturn $input.all();"
      },
      "id": "39bbe913-09a8-41d9-8ca1-762e399ddfc7",
      "name": "Handle invalid lat long1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2500,
        2780
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "city",
              "field2": "city_value"
            },
            {
              "field1": "state",
              "field2": "state"
            }
          ]
        },
        "options": {}
      },
      "id": "3a82158b-b316-4f3a-a5b5-e8b9087ec8ae",
      "name": "Volunteers with valid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3060,
        900
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "city",
              "field2": "city_value"
            },
            {
              "field1": "state",
              "field2": "state"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "id": "a1fb601f-296f-466f-aa4b-671f3e7d06b9",
      "name": "Volunteers with invalid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3060,
        1260
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    output.push(\n      {\n        zendesk_user_id: item.json.zendesk_user_id,\n        zipcode: \"not_found\",\n        city: \"not_found\",\n        state: \"not_found\"\n      }\n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "a59952c6-3745-4533-bb30-5956bd0dee16",
      "name": "Volunteers with invalid zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3360,
        1260
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNotNull = item.json.zipcode;\n  const zipcodeHasCorrectLength = item.json.zipcode ? item.json.zipcode.length === 8 : false;\n  const zipcodeIsANumber = !isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNotNull && zipcodeHasCorrectLength && zipcodeIsANumber){\n    output.push(\n      {\n        zendesk_user_id: item.json.zendesk_user_id,\n        zipcode: item.json.zipcode\n      }\n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "5fb1f540-b8bf-43c7-b0d3-6e7e69f8dfb3",
      "name": "Volunteers with valid zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3360,
        1480
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    item.json.zipcode = \"not_found\";\n  }\n  \n}\n\nreturn $input.all();"
      },
      "id": "5120a6cc-a07f-489e-a748-17f22d8b6dbe",
      "name": "Normalize city and zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3360,
        900
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = [];\n\nfor (const item of $input.all()) {\n\n  if(item.json.city){\n    \n    const normalizedName = item.json.city\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \") \n    .replace(/ *\\([^)]*\\) */g, \"\")\n    .toUpperCase();\n  \n    output.push(\n      {\n        zipcode: item.json.cep,\n        city: normalizedName,\n        state: item.json.state\n      } \n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "cf076c94-3a8e-4de6-b4c6-8cdd4fba831d",
      "name": "Standardize found cities",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        4180,
        1780
      ]
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  if(item.json.city === \"IPIABAS\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"SAO JOSE DO TURVO\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"CAETE-ACU\" && item.json.state === \"BA\"){\n    item.json.city = \"PALMEIRAS\";\n  }\n  if(item.json.city === \"MORAES ALMEIDA\" && item.json.state === \"PA\"){\n    item.json.city = \"ITAITUBA\";\n  }\n  \n}\n\n\nreturn $input.all();"
      },
      "id": "8e752a47-9ec8-40a2-8147-104b270ce982",
      "name": "Handle corner cases",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        4380,
        1780
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const newItem = {\n    zipcode: item.json.zipcode\n  }\n  \n  if(!output.includes(newItem)){\n    output.push(newItem)   \n  }\n}\n\nreturn output;"
      },
      "id": "a9cba2e1-e7d9-4ea8-bca9-6eca15c5070b",
      "name": "Select distinct zipcodes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3760,
        1780
      ]
    },
    {
      "parameters": {
        "url": "=https://brasilapi.com.br/api/cep/v1/{{$json[\"zipcode\"]}}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 20
            }
          },
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "ab50c211-e012-4490-bb59-c9806e25328d",
      "name": "Fetch city from zipcode",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        3980,
        1780
      ],
      "executeOnce": false
    },
    {
      "parameters": {},
      "id": "c8199ff9-6015-442c-9308-170ccc83799a",
      "name": "Volunteer with correct city + volunteers with invalid zipcode",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3960,
        900
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zipcode",
              "field2": "zipcode"
            }
          ]
        },
        "options": {
          "multipleMatches": "first"
        }
      },
      "id": "97d8fdfc-3160-4741-a048-093ebe38e46c",
      "name": "Volunteers with new cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        4800,
        1500
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zipcode",
              "field2": "zipcode"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "id": "da6417f8-3b15-4304-a911-97b1a202f9f0",
      "name": "Volunteers with not found cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        4780,
        1760
      ]
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  item.json.city = \"not_found\";\n  item.json.state = \"not_found\";\n}\n\nreturn $input.all();"
      },
      "id": "c3c4000d-70a7-49e5-abe2-c01c95cf246f",
      "name": "Add NOT_FOUND city and state",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        5020,
        1760
      ]
    },
    {
      "parameters": {},
      "id": "adb248aa-67b1-4610-83e6-1e84c7850177",
      "name": "Volunteers after Brasil API",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        5280,
        1520
      ]
    },
    {
      "parameters": {},
      "id": "3ca0d7ce-4790-4026-88e8-2598aea8276a",
      "name": "All volunteers with correct cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        5640,
        920
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zendesk_user_id",
              "field2": "zendesk_user_id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "id": "36a9be08-0a73-40b8-8d53-a2cd16924bea",
      "name": "Volunteers with lat long",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        2980,
        2480
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zendesk_user_id",
              "field2": "zendesk_user_id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "id": "e980e52f-6bbb-45ef-bf7a-ce35339ddc8c",
      "name": "All volunteers",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        6780,
        1980
      ]
    },
    {
      "parameters": {
        "table": "volunteers",
        "columns": "zendesk_user_id, form_entries_id, created_at, updated_at, first_name, last_name, email, phone, neighborhood, birth_date, register_number, color, gender, modality, fields_of_work, years_of_experience, availability, approach, form_data_id, occupation, moodle_id, latitude, longitude, zipcode, city, state, condition, offers_libras_support",
        "additionalFields": {}
      },
      "id": "89028c78-4be9-4778-ace4-8a243de0bdc0",
      "name": "Insert into volunteers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        7080,
        1980
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    user_id AS zendesk_user_id,\n    external_id AS form_entries_id,\n    COALESCE(created_at, NOW()) AS created_at,\n    COALESCE(updated_at, NOW()) AS updated_at,\n    condition AS old_condition,\n    CASE \n      WHEN name = 'sem nome'  THEN 'not_found'\n      WHEN name = 'X'  THEN 'not_found'\n      WHEN name IS NULL  THEN 'not_found'\n      ELSE INITCAP(SUBSTR(BTRIM(name), 1, STRPOS(BTRIM(name), ' ')))\n    END AS first_name,\n    CASE \n      WHEN name = 'sem nome'  THEN 'not_found'\n      WHEN name = 'X'  THEN 'not_found'\n      WHEN name IS NULL  THEN 'not_found'\n      ELSE INITCAP(SUBSTR(BTRIM(name), (STRPOS(BTRIM(name), ' ') + 1)))\n    END AS last_name,\n    COALESCE(email, 'not_found') AS email,\n    COALESCE(BTRIM(phone), BTRIM(whatsapp), 'not_found') AS phone,\n    'not_found' AS neighborhood,\n    TO_TIMESTAMP(0)::DATE AS birth_date,\n    COALESCE(registration_number, 'not_found') AS register_number,\n    CASE \n      WHEN cor = 'amarela'  THEN 'yellow'\n      WHEN cor = 'branca'  THEN 'white'\n      WHEN cor = 'indigena'  THEN 'indigenous'\n      WHEN cor = 'parda'  THEN 'brown'\n      WHEN cor = 'preta'  THEN 'black'\n      ELSE 'not_found'\n    END AS color,\n    'not_found' AS gender, \n    CASE \n      WHEN email = 'magacrema@hotmail.com'  THEN 'on_site'\n      ELSE 'both'\n    END AS modality,\n    'not_found' AS fields_of_work,\n    'not_found' AS years_of_experience,\n    CASE \n      WHEN BTRIM(disponibilidade_de_atendimentos) = '1' THEN 1\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '2' THEN 2\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '3' THEN 3\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '4' THEN 3\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '5' OR BTRIM(disponibilidade_de_atendimentos) = '5_ou_mais' THEN 3\n      ELSE 1\n    END AS availability,\n    'not_found' AS approach,\n    NULL AS form_data_id,\n    CASE \n      WHEN organization_id = 360269610652 THEN 'lawyer'\n      ELSE 'psychologist'\n    END AS occupation,\n    NULL AS moodle_id,\n    FALSE AS offers_libras_support,\n    COALESCE(condition, 'not_found') AS condition\nFROM public.solidarity_users \nWHERE \n    organization_id IN (360269610652, 360282119532)\n",
        "additionalFields": {}
      },
      "id": "39341153-7003-4971-a5c9-3311c1a3032a",
      "name": "Fetch volunteers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        2260,
        2460
      ],
      "credentials": {
        "postgres": {
          "id": "GPnWI2OL5IjBv3zm",
          "name": "[PROD] Bonde"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    user_id AS zendesk_user_id,\n    latitude,\n    longitude  \nFROM public.solidarity_users \nWHERE \n    organization_id IN (360269610652, 360282119532)\n",
        "additionalFields": {}
      },
      "id": "45f28a94-2f50-47b7-8742-3a1793cfcefd",
      "name": "Fetches lat long",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        2260,
        2780
      ],
      "credentials": {
        "postgres": {
          "id": "GPnWI2OL5IjBv3zm",
          "name": "[PROD] Bonde"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"state\"]}}",
              "value2": "INT"
            },
            {
              "value1": "={{$json[\"city\"]}}",
              "value2": "INTERNACIONAL"
            }
          ]
        }
      },
      "id": "d52e95a1-b06c-44a0-8f73-b9aa9a7f2a5d",
      "name": "Is international?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2620,
        860
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  item.json.zipcode = \"not_found\";\n  \n}\n\nreturn $input.all();"
      },
      "id": "840bcd04-1f5e-4042-8534-d211eb668d4a",
      "name": "Adds not_found zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3360,
        560
      ]
    },
    {
      "parameters": {},
      "id": "1852cb29-cb9a-4b65-96d1-91d3b482ae0b",
      "name": "Volunteers with international city + valid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3680,
        580
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2024-01-16T21:42:40.361Z",
      "updatedAt": "2024-01-16T21:42:40.361Z",
      "role": "workflow:owner",
      "workflowId": "kvEwsmFv1pZniwXY",
      "projectId": "rfgBK87HsySgxYKT",
      "project": {
        "createdAt": "2024-11-15T08:07:36.637Z",
        "updatedAt": "2024-11-15T08:07:36.637Z",
        "id": "rfgBK87HsySgxYKT",
        "name": "Desenvolvimento Mapa <dev@mapa.org.br>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2024-11-15T08:07:36.637Z",
            "updatedAt": "2024-11-15T08:07:36.637Z",
            "userId": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
            "projectId": "rfgBK87HsySgxYKT",
            "user": {
              "createdAt": "2024-01-09T22:21:28.810Z",
              "updatedAt": "2025-09-16T11:09:20.000Z",
              "id": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
              "email": "dev@mapa.org.br",
              "firstName": "Desenvolvimento",
              "lastName": "Mapa",
              "personalizationAnswers": null,
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "sMoToF9HauyKvsFJ",
                "isOnboarded": true,
                "userActivatedAt": 1731658062996,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1749493410027
                },
                "easyAIWorkflowOnboarded": true
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-09-16",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-16T21:22:09.302Z",
      "updatedAt": "2024-01-16T21:22:09.302Z",
      "id": "8M37j63g33Qdgeyh",
      "name": "database pipeline"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-24T20:02:52.000Z",
  "versionId": "fa7b9097-1e2d-4f97-a438-6abf1a9e057c"
}