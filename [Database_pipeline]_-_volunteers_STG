{
  "active": false,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Fetch volunteers with zipcode, city and state",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch cities",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch volunteers",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetches lat long",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch cities": {
      "main": [
        [
          {
            "node": "Volunteers with valid city",
            "type": "main",
            "index": 1
          },
          {
            "node": "Volunteers with invalid city",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch volunteers with zipcode, city and state": {
      "main": [
        [
          {
            "node": "Is international?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle invalid lat long1": {
      "main": [
        [
          {
            "node": "Volunteers with lat long",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Volunteers with valid city": {
      "main": [
        [
          {
            "node": "Normalize city and zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with invalid city": {
      "main": [
        [
          {
            "node": "Volunteers with invalid zipcode",
            "type": "main",
            "index": 0
          },
          {
            "node": "Volunteers with valid zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with invalid zipcode": {
      "main": [
        [
          {
            "node": "Volunteer with correct city + volunteers with invalid zipcode",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Volunteers with valid zipcode": {
      "main": [
        [
          {
            "node": "Select distinct zipcodes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Volunteers with new cities",
            "type": "main",
            "index": 0
          },
          {
            "node": "Volunteers with not found cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize city and zipcode": {
      "main": [
        [
          {
            "node": "Volunteers with international city + valid city",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Standardize found cities": {
      "main": [
        [
          {
            "node": "Handle corner cases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle corner cases": {
      "main": [
        [
          {
            "node": "Volunteers with new cities",
            "type": "main",
            "index": 1
          },
          {
            "node": "Volunteers with not found cities",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Select distinct zipcodes": {
      "main": [
        [
          {
            "node": "Fetch city from zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch city from zipcode": {
      "main": [
        [
          {
            "node": "Standardize found cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteer with correct city + volunteers with invalid zipcode": {
      "main": [
        [
          {
            "node": "All volunteers with correct cities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with new cities": {
      "main": [
        [
          {
            "node": "Volunteers after Brasil API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with not found cities": {
      "main": [
        [
          {
            "node": "Add NOT_FOUND city and state",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add NOT_FOUND city and state": {
      "main": [
        [
          {
            "node": "Volunteers after Brasil API",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Volunteers after Brasil API": {
      "main": [
        [
          {
            "node": "All volunteers with correct cities",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Volunteers with lat long": {
      "main": [
        [
          {
            "node": "All volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All volunteers with correct cities": {
      "main": [
        [
          {
            "node": "All volunteers",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch volunteers": {
      "main": [
        [
          {
            "node": "Volunteers with lat long",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetches lat long": {
      "main": [
        [
          {
            "node": "Handle invalid lat long1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is international?": {
      "main": [
        [
          {
            "node": "Adds not_found zipcode",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Volunteers with valid city",
            "type": "main",
            "index": 0
          },
          {
            "node": "Volunteers with invalid city",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adds not_found zipcode": {
      "main": [
        [
          {
            "node": "Volunteers with international city + valid city",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteers with international city + valid city": {
      "main": [
        [
          {
            "node": "Volunteer with correct city + volunteers with invalid zipcode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All volunteers": {
      "main": [
        [
          {
            "node": "Insert into volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-16T21:40:14.077Z",
  "id": "j61v412oTuWLpoOx",
  "meta": null,
  "name": "[Database pipeline] - volunteers STG",
  "nodes": [
    {
      "parameters": {},
      "id": "3132b491-3de7-46ce-8088-89b081474542",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        900,
        2400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT city_value, state\nFROM public.cities",
        "additionalFields": {}
      },
      "id": "61e925f1-9faf-4751-8d20-61bca8f2a76a",
      "name": "Fetch cities",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        2220,
        1280
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n   user_id AS zendesk_user_id,\n   REGEXP_REPLACE(cep, '-', '', 'g') AS zipcode,\n   BTRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(city), 'À|Á|Â|Ã|Ä|Å', 'A', 'g'), 'È|É|Ê|Ë', 'E', 'g'), 'Í|Ì|Î|Ĩ|Ï ', 'I', 'g'), 'Ò|Ó|Ô|Õ|Ö', 'O', 'g'),'Ù|Ú|Û|Ü', 'U', 'g'), 'Ç', 'C', 'g')) AS city,\n   BTRIM(UPPER(state)) AS state\nFROM public.solidarity_users\nWHERE organization_id IN (360269610652, 360282119532)\n\n\n\n",
        "additionalFields": {}
      },
      "id": "eaf5bb1f-ba05-43e7-9484-b990ba04dfa9",
      "name": "Fetch volunteers with zipcode, city and state",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        2220,
        860
      ]
    },
    {
      "parameters": {
        "content": "## O que esse workflow faz\n\n### 1. Padroniza o município das voluntárias:\n- Busca todas as voluntárias na tabela `solidarity_users` do Bonde;\n- Busca todos os municípios padronizados na tabela `cities` do Mapa do Acolhimento;\n- Executa um join entre essas duas tabelas;\n- Se encontrar correspondência, show, o município da voluntária está correto.\n- Se não encontrar correspondência, verifica se o CEP da voluntária é válido (não está vazio, possui 8 caracteres e apenas números);\n- Se o CEP for inválido, adiciona `NOT_FOUND` nos campos `zipcode`, `city` e `state`;\n- Se o CEP for válido, busca na Brasil API o município correspondente a esse CEP;\n- Se encontrar na Brasil API, show, adiciona esse município para a voluntária;\n- Se não encontrar, adiciona `NOT_FOUND` nos campos `zipcode`, `city` e `state`.\n\n### 2. Padroniza latitude e longitude das voluntárias:\n- Se a latitude ou longitude for inválida (nula, não numérica ou estiver fora do range necessário), substiui por `null`.\n- Se não, mantém como está.\n\n### 3. Padroniza os status antigos com os novos status:\n- Seguindo a [documentação](https://miro.com/app/board/uXjVMzPi3ZA=/?moveToWidget=3458764570428954733&cot=14).\n\n\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 502.6746367999999,
        "width": 946.9145087999996
      },
      "id": "c2a9c9d0-3896-498a-bbda-348011b170e7",
      "name": "Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  \n  if(!item.json.latitude || !item.json.longitude)\n  {\n    item.json.latitude = null;\n    item.json.longitude = null;\n  }\n  else {\n    \n    const isLatitudeNotANumber = isNaN(item.json.latitude);\n    const isLongitudeNotANumber = isNaN(item.json.longitude);\n\n    if(isLatitudeNotANumber || isLongitudeNotANumber)\n    {\n      item.json.latitude = null;\n      item.json.longitude = null;\n    }\n    else {\n      \n      const isLatitudeNotInRange = item.json.latitude < -90 \n      || item.json.latitude > 90;\n    const isLongitudeNotInRange = item.json.longitude < -180 \n      || item.json.longitude > 180;\n\n      if(isLatitudeNotInRange || isLongitudeNotInRange)\n      {\n        item.json.latitude = null;\n        item.json.longitude = null;\n      }\n      else {\n        \n        item.json.latitude = parseFloat(item.json.latitude);\n        item.json.longitude = parseFloat(item.json.longitude);\n      }\n      \n    }\n  }\n}\n\nreturn $input.all();"
      },
      "id": "77ec1c1a-f6d8-48c0-914f-3bf9fa7db3f1",
      "name": "Handle invalid lat long1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2500,
        2780
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "city",
              "field2": "city_value"
            },
            {
              "field1": "state",
              "field2": "state"
            }
          ]
        },
        "options": {}
      },
      "id": "bc92f395-95cd-474f-8dfe-806ac1660983",
      "name": "Volunteers with valid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3060,
        900
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "city",
              "field2": "city_value"
            },
            {
              "field1": "state",
              "field2": "state"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "id": "8834f7d7-875b-4ac1-b1fe-fd9a5a10c082",
      "name": "Volunteers with invalid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3060,
        1260
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    output.push(\n      {\n        zendesk_user_id: item.json.zendesk_user_id,\n        zipcode: \"not_found\",\n        city: \"not_found\",\n        state: \"not_found\"\n      }\n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "b653d45f-d653-48b2-8e68-8507e9afc8c7",
      "name": "Volunteers with invalid zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3360,
        1260
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNotNull = item.json.zipcode;\n  const zipcodeHasCorrectLength = item.json.zipcode ? item.json.zipcode.length === 8 : false;\n  const zipcodeIsANumber = !isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNotNull && zipcodeHasCorrectLength && zipcodeIsANumber){\n    output.push(\n      {\n        zendesk_user_id: item.json.zendesk_user_id,\n        zipcode: item.json.zipcode\n      }\n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "6ae150fc-3924-418f-be41-c474e9495c01",
      "name": "Volunteers with valid zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3360,
        1480
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    item.json.zipcode = \"not_found\";\n  }\n  \n}\n\nreturn $input.all();"
      },
      "id": "640c058f-f345-49e4-b9d2-b0f448c2e452",
      "name": "Normalize city and zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3360,
        900
      ]
    },
    {
      "parameters": {
        "jsCode": "const output = [];\n\nfor (const item of $input.all()) {\n\n  if(item.json.city){\n    \n    const normalizedName = item.json.city\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \") \n    .replace(/ *\\([^)]*\\) */g, \"\")\n    .toUpperCase();\n  \n    output.push(\n      {\n        zipcode: item.json.cep,\n        city: normalizedName,\n        state: item.json.state\n      } \n    )\n    \n  }\n}\n\nreturn output;"
      },
      "id": "56829445-715c-40b7-93a9-e52e1b7c5401",
      "name": "Standardize found cities",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        4180,
        1780
      ]
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  if(item.json.city === \"IPIABAS\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"SAO JOSE DO TURVO\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"CAETE-ACU\" && item.json.state === \"BA\"){\n    item.json.city = \"PALMEIRAS\";\n  }\n  if(item.json.city === \"MORAES ALMEIDA\" && item.json.state === \"PA\"){\n    item.json.city = \"ITAITUBA\";\n  }\n  \n}\n\n\nreturn $input.all();"
      },
      "id": "979d08f8-059e-4c1b-8087-e4bb5690ed9c",
      "name": "Handle corner cases",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        4380,
        1780
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const newItem = {\n    zipcode: item.json.zipcode\n  }\n  \n  if(!output.includes(newItem)){\n    output.push(newItem)   \n  }\n}\n\nreturn output;"
      },
      "id": "a9af3310-2e44-40a1-bb00-501cde2b3dff",
      "name": "Select distinct zipcodes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3760,
        1780
      ]
    },
    {
      "parameters": {
        "url": "=https://brasilapi.com.br/api/cep/v1/{{$json[\"zipcode\"]}}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 20
            }
          },
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "b19e50c8-a3cc-4e36-a0f4-30063ce12469",
      "name": "Fetch city from zipcode",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        3980,
        1780
      ],
      "executeOnce": false
    },
    {
      "parameters": {},
      "id": "81859326-7827-4c14-a1d2-57b3a8cb60ee",
      "name": "Volunteer with correct city + volunteers with invalid zipcode",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3960,
        900
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zipcode",
              "field2": "zipcode"
            }
          ]
        },
        "options": {
          "multipleMatches": "first"
        }
      },
      "id": "89bf756e-b300-48d2-b639-4f1444888ef5",
      "name": "Volunteers with new cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        4800,
        1500
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zipcode",
              "field2": "zipcode"
            }
          ]
        },
        "joinMode": "keepNonMatches",
        "outputDataFrom": "input1",
        "options": {}
      },
      "id": "f0e92d2f-a713-4eac-8ba6-48a8acb4a252",
      "name": "Volunteers with not found cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        4780,
        1760
      ]
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  item.json.city = \"not_found\";\n  item.json.state = \"not_found\";\n}\n\nreturn $input.all();"
      },
      "id": "09b9c865-02f3-494a-a187-04c9e0ce2ee3",
      "name": "Add NOT_FOUND city and state",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        5020,
        1760
      ]
    },
    {
      "parameters": {},
      "id": "b914d5f5-acc6-4763-a876-6eda4ff02ea8",
      "name": "Volunteers after Brasil API",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        5280,
        1520
      ]
    },
    {
      "parameters": {},
      "id": "01b09ba0-8f5f-469e-8308-dce9b023701e",
      "name": "All volunteers with correct cities",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        5640,
        920
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zendesk_user_id",
              "field2": "zendesk_user_id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "id": "ad521172-bf13-4122-a294-633654ed1386",
      "name": "Volunteers with lat long",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        2980,
        2480
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "zendesk_user_id",
              "field2": "zendesk_user_id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "id": "8a833b6d-3524-443f-8087-61450e878082",
      "name": "All volunteers",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        6780,
        1980
      ]
    },
    {
      "parameters": {
        "table": "volunteers",
        "columns": "zendesk_user_id, form_entries_id, created_at, updated_at, first_name, last_name, email, phone, neighborhood, birth_date, register_number, color, gender, modality, fields_of_work, years_of_experience, availability, approach, form_data_id, occupation, moodle_id, latitude, longitude, zipcode, city, state, condition, offers_libras_support",
        "additionalFields": {}
      },
      "id": "4765c7fa-4004-4df0-8fb9-b10338119191",
      "name": "Insert into volunteers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        7080,
        1980
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    user_id AS zendesk_user_id,\n    external_id AS form_entries_id,\n    COALESCE(created_at, NOW()) AS created_at,\n    COALESCE(updated_at, NOW()) AS updated_at,\n    condition AS old_condition,\n    CASE \n      WHEN name = 'sem nome'  THEN 'not_found'\n      WHEN name = 'X'  THEN 'not_found'\n      WHEN name IS NULL  THEN 'not_found'\n      ELSE INITCAP(SUBSTR(BTRIM(name), 1, STRPOS(BTRIM(name), ' ')))\n    END AS first_name,\n    CASE \n      WHEN name = 'sem nome'  THEN 'not_found'\n      WHEN name = 'X'  THEN 'not_found'\n      WHEN name IS NULL  THEN 'not_found'\n      ELSE INITCAP(SUBSTR(BTRIM(name), (STRPOS(BTRIM(name), ' ') + 1)))\n    END AS last_name,\n    COALESCE(email, 'not_found') AS email,\n    COALESCE(BTRIM(phone), BTRIM(whatsapp), 'not_found') AS phone,\n    'not_found' AS neighborhood,\n    TO_TIMESTAMP(0)::DATE AS birth_date,\n    COALESCE(registration_number, 'not_found') AS register_number,\n    CASE \n      WHEN cor = 'amarela'  THEN 'yellow'\n      WHEN cor = 'branca'  THEN 'white'\n      WHEN cor = 'indigena'  THEN 'indigenous'\n      WHEN cor = 'parda'  THEN 'brown'\n      WHEN cor = 'preta'  THEN 'black'\n      ELSE 'not_found'\n    END AS color,\n    'not_found' AS gender, \n    CASE \n      WHEN email = 'magacrema@hotmail.com'  THEN 'on_site'\n      ELSE 'both'\n    END AS modality,\n    'not_found' AS fields_of_work,\n    'not_found' AS years_of_experience,\n    CASE \n      WHEN BTRIM(disponibilidade_de_atendimentos) = '1' THEN 1\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '2' THEN 2\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '3' THEN 3\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '4' THEN 3\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '5' OR BTRIM(disponibilidade_de_atendimentos) = '5_ou_mais' THEN 3\n      ELSE 1\n    END AS availability,\n    'not_found' AS approach,\n    NULL AS form_data_id,\n    CASE \n      WHEN organization_id = 360269610652 THEN 'lawyer'\n      ELSE 'psychologist'\n    END AS occupation,\n    NULL AS moodle_id,\n    FALSE AS offers_libras_support,\n    COALESCE(condition, 'not_found') AS condition\nFROM public.solidarity_users \nWHERE \n    organization_id IN (360269610652, 360282119532)\n",
        "additionalFields": {}
      },
      "id": "7a46dbc7-381e-4955-a461-410594b6b266",
      "name": "Fetch volunteers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        2260,
        2460
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    user_id AS zendesk_user_id,\n    latitude,\n    longitude  \nFROM public.solidarity_users \nWHERE \n    organization_id IN (360269610652, 360282119532)\n",
        "additionalFields": {}
      },
      "id": "6cb13f0a-0d91-4b6d-8a84-474429dbbaf6",
      "name": "Fetches lat long",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        2260,
        2780
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"state\"]}}",
              "value2": "INT"
            },
            {
              "value1": "={{$json[\"city\"]}}",
              "value2": "INTERNACIONAL"
            }
          ]
        }
      },
      "id": "8943f0a0-3bf6-43af-9492-fb7958980d8f",
      "name": "Is international?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2620,
        860
      ]
    },
    {
      "parameters": {
        "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  item.json.zipcode = \"not_found\";\n  \n}\n\nreturn $input.all();"
      },
      "id": "a8ad8d04-0b69-43cf-a390-362c52db89a0",
      "name": "Adds not_found zipcode",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3360,
        560
      ]
    },
    {
      "parameters": {},
      "id": "c695080f-0334-49b2-a4b2-daa8d8438ee5",
      "name": "Volunteers with international city + valid city",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3680,
        580
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-16T21:22:09.302Z",
      "updatedAt": "2024-01-16T21:22:09.302Z",
      "id": "8M37j63g33Qdgeyh",
      "name": "database pipeline"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-16T21:40:14.077Z",
  "versionId": "c765e8e1-6151-40bf-b4b4-21173d13cf90"
}