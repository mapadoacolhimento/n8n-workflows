{
  "active": false,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Fetch matches",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch support_requests",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch matches": {
      "main": [
        [
          {
            "node": "Matches with support_request_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch support_requests": {
      "main": [
        [
          {
            "node": "Matches with support_request_id",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Matches with support_request_id": {
      "main": [
        [
          {
            "node": "Matches with volunteer_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch volunteers": {
      "main": [
        [
          {
            "node": "Matches with volunteer_id",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Matches with volunteer_id": {
      "main": [
        [
          {
            "node": "Insert into matches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-24T20:14:21.651Z",
  "id": "koWOeg3pu4Ysg9CE",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[Database pipeline] matches PROD",
  "nodes": [
    {
      "parameters": {},
      "id": "838bfe57-40d8-4f9c-aa7e-4231e9b27d56",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        500,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH msr_tickets AS (\n    SELECT \n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        requester_id AS msr_id,\n        CASE \n            WHEN SUBSTRING(raw_subject, '\\[(.+)\\]') = 'Psicológico' THEN 'psychological'\n            ELSE 'legal'\n        END AS support_type,\n        'not_found' AS support_expertise,\n        null AS priority,\n        null AS has_disability,\n        null AS requires_libras,\n        TRUE AS accepts_online_support,\n        COALESCE(updated_at, NOW()) AS updated_at,\n        COALESCE(created_at, NOW()) AS created_at\n    FROM public.solidarity_tickets\n    WHERE \n        organization_id = 360273031591 \n        AND SUBSTRING(raw_subject, '\\[(.+)\\]') IN ('Psicológico', 'Jurídico') \n        AND raw_subject NOT LIKE '%Re:%'\n        AND tags::text NOT LIKE '%msr-fora-do-perfil%'\n),\nvolunteer_tickets AS (\n    SELECT \n        requester_id AS volunteer_zendesk_user_id,\n        ticket_id::TEXT AS volunteer_zendesk_ticket_id,\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS msr_zendesk_ticket_id\n    FROM public.solidarity_tickets\n    WHERE organization_id IN (360269610652, 360282119532)\n),\ntickets_solicitacao_repetida AS (\n    SELECT \n        'duplicated' AS status_support_request,\n        *\n    FROM msr_tickets\n    WHERE \n        status_acolhimento = 'solicitação_repetida'\n        OR tags::text LIKE '%closed_by_merge%'\n),\nrn_duplicated_tickets AS (\n    SELECT\n        a.*,\n        ROW_NUMBER() OVER(PARTITION BY a.requester_id, SUBSTRING(a.raw_subject, '\\[(.+)\\]') ORDER BY a.updated_at DESC) AS rn\n    FROM msr_tickets a\n    LEFT JOIN tickets_solicitacao_repetida USING (id) \n    WHERE status_support_request IS NULL\n),\nduplicated_tickets AS (\n    SELECT\n        'duplicated' AS status_support_request,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM rn_duplicated_tickets\n    WHERE \n        rn > 1\n),\nall_duplicated_tickets AS (\n    SELECT * FROM tickets_solicitacao_repetida\n    UNION\n    SELECT * FROM duplicated_tickets\n),\nnon_duplicated_tickets AS (\n    SELECT a.* \n    FROM msr_tickets a\n    LEFT JOIN all_duplicated_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\npublic_service_tickets AS (\n    SELECT \n        'public_service' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'encaminhamento__realizado_para_serviço_público'\n),\nsolicitacao_recebida_tickets AS (\n    SELECT \n        CASE \n            WHEN status = 'closed' THEN 'closed'\n            WHEN status != 'closed' AND tags::TEXT LIKE '%nova-voluntaria-com-prioridade%' THEN 'special_case'\n            ELSE 'open'\n        END AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'solicitação_recebida'\n),\ninvalid_status_tickets AS (\n    SELECT \n        'closed' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento IS NULL OR status_acolhimento IN ('', 'encaminhamento__antigo', 'encaminhamento__confirmou_disponibilidade', 'encaminhamento__negado')\n),\nnon_match_tickets AS (\n    SELECT * FROM all_duplicated_tickets\n    UNION\n    SELECT * FROM public_service_tickets\n    UNION \n    SELECT * FROM solicitacao_recebida_tickets\n    UNION \n    SELECT * FROM invalid_status_tickets\n),\nshould_have_match_tickets AS (\n    SELECT a.*\n    FROM non_duplicated_tickets a\n    LEFT JOIN non_match_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\nshould_have_match_with_id_from_link_match AS (\n    SELECT\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS volunteer_zendesk_ticket_id,\n        *\n    FROM should_have_match_tickets\n),\nmatched_through_msr_link_match AS (\n    SELECT \n        a.volunteer_zendesk_ticket_id::bigint AS volunteer_zendesk_ticket_id,\n        b.volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM should_have_match_with_id_from_link_match a\n    INNER JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n),\ndidnt_match_through_msr_link_match AS (\n    SELECT \n        a.*,\n        b.volunteer_zendesk_user_id\n    FROM should_have_match_with_id_from_link_match a\n    LEFT JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n    WHERE b.volunteer_zendesk_user_id IS NULL\n),\nrn_solidarity_matches AS (\n    SELECT \n        ROW_NUMBER() OVER (PARTITION BY individuals_ticket_id ORDER BY created_at DESC) AS rn,\n        individuals_ticket_id,\n        volunteers_user_id,\n        volunteers_ticket_id\n    FROM public.solidarity_matches\n),\ndedup_solidarity_matches AS (\n    SELECT *\n    FROM rn_solidarity_matches \n    WHERE rn = 1\n),\nmatched_through_solidarity_matches AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    INNER JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n),\nall_matched AS (\n    SELECT * FROM matched_through_msr_link_match\n    UNION\n    SELECT * FROM matched_through_solidarity_matches\n),\nall_not_matched AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    LEFT JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n    WHERE b.individuals_ticket_id IS NULL\n),\nall_should_have_been_matched AS (\n    SELECT * FROM all_matched\n    UNION\n    SELECT * FROM all_not_matched\n),\nall_matched_with_real_status_acolhimento AS (\n    SELECT \n        a.*,\n        CASE\n            WHEN \n                a.status_acolhimento = 'encaminhamento__realizado' \n                AND a.status_acolhimento != b.status_acolhimento \n                AND b.status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento_interrompido')\n            THEN b.status_acolhimento\n            ELSE a.status_acolhimento\n       END AS real_status_acolhimento\n    FROM all_should_have_been_matched a\n    INNER JOIN public.solidarity_tickets b ON a.volunteer_zendesk_ticket_id::bigint = b.ticket_id\n),\nall_matched_with_status AS (\n    SELECT \n        CASE \n            WHEN real_status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento__aguardando_confirmação', 'encaminhamento__realizado', 'encaminhamento_interrompido') THEN 'matched'\n            ELSE null\n        END AS status_support_request,\n        CASE \n            WHEN real_status_acolhimento = 'atendimento__concluído' THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status IN ('closed', 'deleted') THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status IN ('open', 'pending') THEN 'in_contact'\n            WHEN real_status_acolhimento = 'atendimento__interrompido' THEN 'interrupted_after_support'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status = 'closed' THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status != 'closed' THEN 'waiting_contact'\n            WHEN real_status_acolhimento = 'encaminhamento_interrompido' THEN 'interrupted_before_support'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status IN ('closed', 'deleted') THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) < (CURRENT_DATE - 30)  THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) >= (CURRENT_DATE - 30) THEN 'waiting_contact'\n            ELSE null\n        END AS status_match,\n        *\n    FROM all_matched_with_real_status_acolhimento\n),\nall_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM all_matched_with_status\n),\nall_non_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM non_match_tickets\n),\nsupport_requests AS (\n    SELECT * FROM all_matched_support_request\n    UNION\n    SELECT * FROM all_non_matched_support_request\n),\nmatches AS (\n    SELECT \n    msr_id,\n    ticket_id AS msr_zendesk_ticket_id,\n    volunteer_zendesk_user_id,\n    volunteer_zendesk_ticket_id,\n    support_type,\n    'old' AS match_type,\n    'old' AS match_stage,\n    status_match AS status,\n    updated_at,\n    created_at\n    FROM all_matched_with_status\n\n),\nvolunteer_match_tickets AS (\n    SELECT \n        volunteer_zendesk_ticket_id, \n        msr_zendesk_ticket_id\n    FROM matches\n    WHERE volunteer_zendesk_ticket_id IS NOT NULL\n),\nvolunteer_match_tickets_with_status AS (\n    SELECT \n        msr_zendesk_ticket_id,\n        SPLIT_PART(status_acolhimento, 'atendimento_', 2) AS survey_type,\n        updated_at,\n        updated_at AS created_at\n    FROM volunteer_match_tickets\n    INNER JOIN public.solidarity_tickets ON volunteer_zendesk_ticket_id::bigint = ticket_id\n    WHERE \n        organization_id IN (360269610652, 360282119532)\n        AND status_acolhimento IN ('atendimento_triagem_1', 'atendimento_triagem_2', 'atendimento_acompanhamento_1', 'atendimento_acompanhamento_2')\n\n)\nSELECT *\nFROM matches",
        "additionalFields": {}
      },
      "id": "dabb2dce-927d-4cb1-9629-c4f0d342f61f",
      "name": "Fetch matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        840,
        160
      ],
      "credentials": {
        "postgres": {
          "id": "GPnWI2OL5IjBv3zm",
          "name": "[PROD] Bonde"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n   support_request_id,\n   zendesk_ticket_id AS msr_zendesk_ticket_id\nFROM match.support_requests",
        "additionalFields": {}
      },
      "id": "4a8b0b84-f1c4-4470-b81d-27945453345b",
      "name": "Fetch support_requests",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        840,
        460
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "msr_zendesk_ticket_id",
              "field2": "msr_zendesk_ticket_id"
            }
          ]
        },
        "options": {
          "multipleMatches": "first"
        }
      },
      "id": "684ec1ff-6079-4fe5-9f93-108c81902caa",
      "name": "Matches with support_request_id",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1200,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n   id AS volunteer_id,\n   zendesk_user_id AS volunteer_zendesk_user_id\nFROM public.volunteers",
        "additionalFields": {}
      },
      "id": "622a3afa-a842-4a5c-8fa9-6db407973e9d",
      "name": "Fetch volunteers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        840,
        760
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "volunteer_zendesk_user_id",
              "field2": "volunteer_zendesk_user_id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {
          "multipleMatches": "first"
        }
      },
      "id": "7f9f0ea4-d691-4250-a451-b294208fda5d",
      "name": "Matches with volunteer_id",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1640,
        540
      ]
    },
    {
      "parameters": {
        "schema": "match",
        "table": "matches",
        "columns": "support_request_id, msr_id, volunteer_id, msr_zendesk_ticket_id, volunteer_zendesk_ticket_id, support_type, match_type, match_stage, status, created_at, updated_at",
        "additionalFields": {}
      },
      "id": "a3851d50-df45-479d-91d2-4c0a0cc52f22",
      "name": "Insert into matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1940,
        540
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2024-01-24T20:14:21.657Z",
      "updatedAt": "2024-01-24T20:14:21.657Z",
      "role": "workflow:owner",
      "workflowId": "koWOeg3pu4Ysg9CE",
      "projectId": "rfgBK87HsySgxYKT",
      "project": {
        "createdAt": "2024-11-15T08:07:36.637Z",
        "updatedAt": "2024-11-15T08:07:36.637Z",
        "id": "rfgBK87HsySgxYKT",
        "name": "Desenvolvimento Mapa <dev@mapa.org.br>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2024-11-15T08:07:36.637Z",
            "updatedAt": "2024-11-15T08:07:36.637Z",
            "userId": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
            "projectId": "rfgBK87HsySgxYKT",
            "user": {
              "createdAt": "2024-01-09T22:21:28.810Z",
              "updatedAt": "2025-10-10T23:13:49.000Z",
              "id": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
              "email": "dev@mapa.org.br",
              "firstName": "Desenvolvimento",
              "lastName": "Mapa",
              "personalizationAnswers": null,
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "sMoToF9HauyKvsFJ",
                "isOnboarded": true,
                "userActivatedAt": 1731658062996,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1749493410027
                },
                "easyAIWorkflowOnboarded": true
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-10",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-16T21:22:09.302Z",
      "updatedAt": "2024-01-16T21:22:09.302Z",
      "id": "8M37j63g33Qdgeyh",
      "name": "database pipeline"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-24T20:21:43.000Z",
  "versionId": "9d7225cf-a4da-45fe-a472-70df0d898929"
}