{
  "active": true,
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get all MSRs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get all volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zendesk": {
      "main": [
        [
          {
            "node": "Filter deleted users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checks if we need to update volunteer": {
      "main": [
        [
          {
            "node": "Volunteer exists in our DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check city, state and zipcode1": {
      "main": [
        [
          {
            "node": "Busca as coordenadas do endereço2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add null lat/lng1": {
      "main": [
        [
          {
            "node": "Updates volunteer geolocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer_availability geolocation": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteer exists in our DB": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Zendesk input from volunteer": {
      "main": [
        [
          {
            "node": "Checks if we need to update volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer geolocation": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer personal data": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Updates volunteer_availability geolocation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Updates volunteer geolocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all volunteers": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Zendesk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if volunteer is available": {
      "main": [
        [
          {
            "node": "Updates volunteer availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer availability": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter deleted users": {
      "main": [
        [
          {
            "node": "Normalize Zendesk input from volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca as coordenadas do endereço2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Check city, state and zipcode1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Updates volunteer personal data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check if volunteer is available",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zendesk1": {
      "main": [
        [
          {
            "node": "Filter deleted users1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Zendesk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all MSRs": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Zendesk input from MSR": {
      "main": [
        [
          {
            "node": "Checks if we need to update status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checks if we need to update status": {
      "main": [
        [
          {
            "node": "MSR exists in our DB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSR exists in our DB1": {
      "main": [
        [
          {
            "node": "Should update msr_pii",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should update location",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should update status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update msr_pii": {
      "main": [
        [
          {
            "node": "Update msr_pii",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update location": {
      "main": [
        [
          {
            "node": "Check city, state and zipcode",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Updates support_request1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Updates msr.msrs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add null lat/lng2": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check city, state and zipcode": {
      "main": [
        [
          {
            "node": "Busca as coordenadas do endereço",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca as coordenadas do endereço": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update status": {
      "main": [
        [
          {
            "node": "Update status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter deleted users1": {
      "main": [
        [
          {
            "node": "Normalize Zendesk input from MSR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update status": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update msr_pii": {
      "main": [
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates msr.msrs1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates support_request1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "No Operation, do nothing4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing3": {
      "main": [
        [
          {
            "node": "No Operation, do nothing4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing4": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-07-25T19:18:22.256Z",
  "id": "t6h9U4VSoY9xaEMA",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[PROD] Cronjob Integração Zendesk/BD",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 13
            }
          ]
        }
      },
      "id": "d720a176-67da-4bf4-a82b-3338d6f5dac0",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -2540,
        960
      ]
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "get",
        "id": "={{ $json.zendesk_user_id }}"
      },
      "id": "b438305e-edb5-45ec-a770-144aefe4d882",
      "name": "Zendesk",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        -1780,
        980
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  id AS volunteer_id,\n  '{{ $json.user_fields.city }}' AS new_city,\n  '{{ $json.user_fields.state }}' AS new_state,\n  '{{ $json.user_fields.zipcode }}' AS new_zipcode,\n  '{{ $json.user_fields.first_name }}' AS new_first_name,\n  '{{ $json.user_fields.availability }}'::INT AS new_availability,\n  '{{ $json.phone }}' AS new_phone,\n  '{{ $json.user_fields.registration_number }}' AS new_register_number,\n  '{{ $json.user_fields.condition }}' AS new_volunteer_status,\n  CASE \n    WHEN \n      city != '{{ $json.user_fields.city }}' OR \n      state != '{{ $json.user_fields.state }}' OR \n      zipcode != '{{ $json.user_fields.zipcode }}'\n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_geolocation,\n  CASE WHEN availability != '{{ $json.user_fields.availability }}'::INT AND '{{ $json.user_fields.availability }}'::INT != 0 THEN TRUE ELSE FALSE END AS should_update_availability,\n  CASE \n    WHEN \n      first_name != '{{ $json.user_fields.first_name }}' OR \n      phone != '{{ $json.phone }}' OR \n      register_number != '{{ $json.user_fields.registration_number }}' \n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_personal,\n  CASE WHEN condition != '{{ $json.user_fields.condition }}' THEN TRUE ELSE FALSE END AS should_update_status\nFROM public.volunteers\nWHERE zendesk_user_id = {{ $json.id }}",
        "options": {}
      },
      "id": "ed0b7040-6e68-48f4-95d3-e51b8f28e61c",
      "name": "Checks if we need to update volunteer",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -1000,
        980
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cd3132a5-7821-49ae-a080-957a931cb612",
              "leftValue": "={{ $json.new_city }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "e0a033c3-38d5-4583-943e-43fffb34b624",
              "leftValue": "={{ $json.new_state }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f95c4be6-693b-4809-b28c-a583b7c813ca",
              "leftValue": "={{ $json.new_zipcode }}",
              "rightValue": "=not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "0dfe5866-b7dd-4ee3-b31f-e094bde52a7d",
      "name": "Check city, state and zipcode1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        60,
        520
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"coordinates\": {\n    \"lat\": null,\n    \"lng\": null\n  }\n}\n",
        "options": {}
      },
      "id": "bb838832-36dd-4533-bb11-a559257b13f4",
      "name": "Add null lat/lng1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        600,
        680
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.volunteer_availability\nSET \n  city = '{{ $json.city }}', \n  state = '{{ $json.state }}', \n  lat = {{ $json.coordinates.lat }}, \n  lng = {{ $json.coordinates.lng }}, \n  updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "a6fafc93-7538-45ae-b0ff-c4e1bdcaaf06",
      "name": "Updates volunteer_availability geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1120,
        940
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "93753f6a-58ca-4ad5-a9ce-0b173efe7565",
              "leftValue": "={{ $json.volunteer_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e0ad458e-bf5b-4f4f-b481-de0671122961",
      "name": "Volunteer exists in our DB",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -760,
        980
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "errorMessage": "=A voluntária com Zendesk User ID '{{$node[\"Webhook Volunteer\"].json['body']['volunteer_zendesk_user_id']}}' não existe no nosso banco de dados."
      },
      "id": "404d632b-a1fc-4b15-9ac7-2d5a87e5e1f7",
      "name": "Stop and Error1",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -460,
        1260
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const city = item.json.user_fields?.city || \"\";\n  const new_city = !city || city === 'ZERO_RESULTS'\n      ? 'not_found'\n      : city\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .replace(\"'\", ' ')\n          .replace(/ *\\([^)]*\\) */g, '')\n          .toUpperCase();\n  const onlyNumbersZipcode = item.json.user_fields.cep?.replace(/[^0-9\\\\.]+/g, '').slice(0,8)\n  const zipcode = onlyNumbersZipcode || 'not_found';\n  item.json.user_fields.city = new_city;\n  item.json.user_fields.zipcode = zipcode;\n  item.json.user_fields.state = item.json.user_fields?.state || 'not_found';\n\n  const first_name = item.json.name.split(\" \")[0];\n  item.json.user_fields.first_name = first_name.charAt(0).toUpperCase() + first_name.slice(1);\n  item.json.phone = item.json.phone?.replace(/[^0-9\\\\.]+/g, '');\n  item.json.user_fields.registration_number = item.json.user_fields.registration_number?.replace(/[^0-9\\\\.]+/g, '');\n  item.json.user_fields.availability = Number(item.json.user_fields?.disponibilidade_de_atendimentos || 0);\n  item.json.user_fields.condition = item.json.user_fields?.condition || \"not_found\";\n}\n\nreturn $input.all();\n"
      },
      "id": "9fa9c1db-1372-476e-add6-23b79eefc508",
      "name": "Normalize Zendesk input from volunteer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1280,
        980
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  city = '{{ $json.new_city }}', \n  state = '{{ $json.new_state }}', \n  zipcode = '{{ $json.new_zipcode }}',\n  latitude = {{ $json.coordinates.lat }}, \n  longitude = {{ $json.coordinates.lng }}, \n  \n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "44331827-d945-4e06-a82a-0073a56dc4f4",
      "name": "Updates volunteer geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1200,
        520
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  first_name = '{{ $json.new_first_name }}',\n  phone = '{{ $json.new_phone }}',\n  register_number = '{{ $json.new_register_number }}',\n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "076dd714-081b-44b5-916f-79fce5eb3451",
      "name": "Updates volunteer personal data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        940,
        1120
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "64ae3adc-b968-413d-901b-0ebaf95cdfb9",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        920,
        740
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "2531e9a7-4c63-4d30-888b-6105a0c97de1",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1400,
        1540
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM volunteers \nWHERE \n  zendesk_user_id IS NOT null AND \n  condition NOT IN ('anti-etica', 'descadastrada')",
        "options": {}
      },
      "id": "a33ad6f7-6a16-465e-b8d5-c96c58238331",
      "name": "Get all volunteers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -2260,
        960
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 100,
        "options": {
          "reset": false
        }
      },
      "id": "b6d7f5ab-6372-4622-9c62-57456b01dd3f",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2040,
        960
      ]
    },
    {
      "parameters": {
        "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const is_available_lookup = {\n      \"disponivel\": 1,\n      \"indisponível_férias\": 0,\n      \"indisponível_maternidade\": 0,\n      \"indisponível_saude\": 0,\n      \"indisponível_trabalho_e_estudo\": 0,\n      \"indisponível_outros_motivos\": 0,\n      \"indisponível_agenda\": 0,\n      \"indisponível_-sem_resposta\": 0,\n      \"dados_incompletos_endereço\": 0,\n      \"dados_incompletos_telefone\": 0,\n      \"dados_incompletos_email\": 0,\n      \"descadastrada\": 0,\n      \"reprovada_estudo_de_caso\": 0,\n      \"reprovada_diretrizes_do_mapa\": 0,\n      \"reprovada_registro_inválido\": 0,\n      \"aprovada\": 0,\n      \"anti-etica\": 0,\n      \"capacitacao\": 0,\n      \"indisponivel_sem_vagas\": 0,\n      \"desabilitada\": 0,\n      \"cadastrada\": 0,\n      \"not_found\": 0\n  }\n \n  const volunteer_id = item.json.volunteer_id;\n  const status = item.json.new_volunteer_status;\n  \n  const is_available = is_available_lookup[status];\n    \n  const newItem = {\n    \"volunteer_id\": volunteer_id,\n    \"new_status\": status,\n    \"is_available\": !!is_available,\n    \"max_matches\": item.json.new_availability\n  }\n  output.push(newItem)\n}\n\nreturn output;"
      },
      "id": "bdd0c1ba-e68b-403a-8352-71d686180d74",
      "name": "Check if volunteer is available",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -140,
        1140
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteers\nSET \n  condition = '{{ $json.new_status }}',\n  availability = {{ $json.max_matches }}, \n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, '{{$json[\"new_status\"]}}', NOW());\n\nUPDATE public.volunteer_availability\nSET \n  is_available = {{$json[\"is_available\"]}}::boolean, \n  max_matches = {{ $json.max_matches }},\n  updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}};",
        "options": {}
      },
      "id": "53bcfe9b-ddd4-476d-9f91-9b307d94018a",
      "name": "Updates volunteer availability",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        80,
        1140
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "708e9845-f73e-4644-b3a8-ee9e4d63da2e",
              "leftValue": "={{ $json.active }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c2866ace-f047-4d3f-9eb6-cb149a2d631a",
      "name": "Filter deleted users",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        -1540,
        980
      ]
    },
    {
      "parameters": {
        "url": "=https://voluntaria.mapadoacolhimento.org/address",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "city",
              "value": "={{ $json.new_city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.new_state }}"
            },
            {
              "name": "zipcode",
              "value": "={{ $json.new_zipcode === 'not_found' ? '' : $json.new_zipcode  }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6c5a7244-790b-4e97-ac56-f53c2202a424",
      "name": "Busca as coordenadas do endereço2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        440,
        320
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.should_update_geolocation }}",
                    "rightValue": "{{ true }}",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "geolocation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "1206305f-a715-4cb0-990a-d942246a7212",
                    "leftValue": "={{ $json.should_update_personal }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "personal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "26fd6c46-a2eb-4299-a425-e7978d0102fd",
                    "leftValue": "={{ $json.should_update_availability || $json.should_update_status  }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "availability"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "43b488d5-2622-4a12-b917-0abd92ccdc49",
                    "leftValue": "={{ $json.should_update_geolocation && $json.should_update_personal && $json.should_update_availability || $json.should_update_status }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "no_update"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "id": "ddfef6dd-975e-48fb-89a6-2621389c938c",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -460,
        880
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C06H7GA52A1",
          "mode": "list",
          "cachedResultName": "alertas-n8n"
        },
        "text": "Cronjob de atualização do Zendesk concluído com sucesso!",
        "otherOptions": {}
      },
      "id": "d3f34f88-ae9e-4617-961e-c3ccc260ecd6",
      "name": "Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        -1780,
        760
      ],
      "credentials": {
        "slackOAuth2Api": {
          "id": "01G85hUbLT4VlY92",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * \nFROM msr.msrs\nWHERE \n  status != 'unregistered'\nLIMIT 100",
        "options": {}
      },
      "id": "0b9814ae-034d-41b3-beda-a8787626664f",
      "name": "Get all MSRs",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -2180,
        2660
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "get",
        "id": "={{ $json.msr_id }}"
      },
      "id": "472ec610-31a8-481d-908d-e23e161ba4c8",
      "name": "Zendesk1",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        -1640,
        2680
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 100,
        "options": {
          "reset": false
        }
      },
      "id": "b31fa33f-23b0-4dba-8363-511ed15db5db",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1900,
        2660
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "708e9845-f73e-4644-b3a8-ee9e4d63da2e",
              "leftValue": "={{ $json.active }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "678d4615-bbcf-42a5-8c9c-aff43679b944",
      "name": "Filter deleted users1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        -1400,
        2680
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const status = item.json.user_fields.condition === 'inscrita' ? 'registered' : 'unregistered';\n  const phone = !!item.json.user_fields.phone ? item.json.user_fields.phone.replace(/\\D/g, \"\") : 'not_found';\n  const city =\n    item.json.user_fields.city === 'ZERO_RESULTS' ||\n    item.json.user_fields.city === '' \n    || !item.json.user_fields.city\n      ? 'not_found'\n      : item.json.user_fields.city\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .replace(\"'\", ' ')\n          .replace(/ *\\([^)]*\\) */g, '')\n          .toUpperCase();\n  const onlyNumbersZipcode = !item.json.user_fields.cep ||\n    item.json.user_fields.cep === ''\n      ? 'not_found'\n    : item.json.user_fields.cep.replace(/[^0-9\\\\.]+/g, '').slice(0,8);\n\n  const zipcode = onlyNumbersZipcode || 'not_found';\n\n  const body = {\n    city: city,\n    zipcode: zipcode,\n    state: item.json.user_fields.state || 'not_found',\n    status: status,\n    phone: phone\n  }\n  \n  item.json.body = body;\n}\n\nreturn $input.all();\n"
      },
      "id": "90d1d79e-95cb-4b57-bf38-08bcb4574456",
      "name": "Normalize Zendesk input from MSR",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1160,
        2680
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  msr_id,\n  CASE \n    WHEN '{{ $json.body.phone }}' != phone THEN TRUE \n    ELSE FALSE \n  END AS should_update_msr_pii,\n  CASE \n    WHEN '{{ $json.body.zipcode }}' != zipcode \n      OR '{{ $json.body.city }}' != city \n      OR '{{ $json.body.state }}' != state\n    THEN TRUE\n    ELSE FALSE\n  END AS should_update_location,\n  CASE \n    WHEN '{{ $json.body.status }}' != status \n    THEN TRUE\n    ELSE FALSE\n  END AS should_update_status,\n  '{{ $json.body.phone }}' AS phone,\n  '{{ $json.body.zipcode }}' AS new_zipcode,\n  '{{ $json.body.city }}' AS new_city,\n  '{{ $json.body.state }}' AS new_state,\n  '{{ $json.body.status }}' AS new_status\nFROM msr.msrs\nINNER JOIN pii_sec.msr_pii USING(msr_id)\nWHERE msr_id = {{ $json.id }}",
        "options": {}
      },
      "id": "5103bfb6-d6e7-4aff-989e-3f3757856bda",
      "name": "Checks if we need to update status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -900,
        2680
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "=A MSR com Zendesk User ID '{{$node[\"Webhook MSR\"].json['body']['msr_zendesk_user_id']}}' não existe no nosso banco de dados."
      },
      "id": "bab0485e-85cd-4b86-8792-3673d849424b",
      "name": "Stop and Error2",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -480,
        2900
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "43ab3526-3a4b-49a3-b6db-2e482b0f9e31",
              "leftValue": "={{ $json.msr_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "c135dcf2-e912-4fa3-850e-284a964434be",
      "name": "MSR exists in our DB1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -660,
        2680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9bbb07e8-f753-4190-b6a4-ca7c6eee7875",
              "leftValue": "={{ $json.should_update_msr_pii }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "fca72cf0-2360-48a9-a7f5-683ed7eea863",
      "name": "Should update msr_pii",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -140,
        2660
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE pii_sec.msr_pii\nSET phone = '{{ $json.phone }}'\nWHERE msr_id = {{ $json.msr_id }}",
        "options": {}
      },
      "id": "d92f2bdb-db5c-4978-9af9-864f821360c3",
      "name": "Update msr_pii",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        160,
        2640
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9bbb07e8-f753-4190-b6a4-ca7c6eee7875",
              "leftValue": "={{ $json.should_update_location }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5d3032af-ae81-4279-abe6-4ba8be59c791",
      "name": "Should update location",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -140,
        3080
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "8f16de1e-20ce-4b2b-8249-ef5505b8071e",
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1060,
        3460
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE match.support_requests\nSET city = '{{ $json.new_city }}', state = '{{ $json.new_state }}', lat = {{ $json.coordinates.lat }}, lng = {{ $json.coordinates.lng }}, updated_at = NOW()\nWHERE msr_id = {{ $json.msr_id }}",
        "options": {}
      },
      "id": "f7bd8fd7-30df-4e77-af71-339285620999",
      "name": "Updates support_request1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1380,
        3560
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"coordinates\": {\n    \"lat\": null,\n    \"lng\": null\n  }\n}\n",
        "options": {}
      },
      "id": "e1905647-0857-4699-bd56-5c8ba20348ce",
      "name": "Add null lat/lng2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        680,
        3280
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cd3132a5-7821-49ae-a080-957a931cb612",
              "leftValue": "={{ $json.new_city }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "e0a033c3-38d5-4583-943e-43fffb34b624",
              "leftValue": "={{ $json.new_state }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f95c4be6-693b-4809-b28c-a583b7c813ca",
              "leftValue": "={{ $json.new_zipcode }}",
              "rightValue": "=not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "314a81c6-0779-46c5-b407-b25949da3c29",
      "name": "Check city, state and zipcode",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        160,
        3060
      ]
    },
    {
      "parameters": {
        "url": "=https://voluntaria.mapadoacolhimento.org/address",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "city",
              "value": "={{ $json.new_city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.new_state }}"
            },
            {
              "name": "zipcode",
              "value": "={{ $json.new_zipcode === 'not_found' ? '' : $json.new_zipcode  }}"
            }
          ]
        },
        "options": {}
      },
      "id": "424ded38-9e89-41c8-97d1-133b6f78bf6f",
      "name": "Busca as coordenadas do endereço",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        440,
        3040
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE msr.msrs\nSET city = '{{ $json.new_city }}', state = '{{ $json.new_state }}', zipcode = REGEXP_REPLACE('{{ $json.new_zipcode }}', '-', ''), updated_at = NOW()\nWHERE msr_id = {{ $json.msr_id }}",
        "options": {}
      },
      "id": "1de3f5f4-a232-41c5-9d5c-c7a83072a44b",
      "name": "Updates msr.msrs1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1380,
        3340
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9bbb07e8-f753-4190-b6a4-ca7c6eee7875",
              "leftValue": "={{ $json.should_update_status }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7e432401-e35b-41cb-93f4-2068daf23bfb",
      "name": "Should update status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -140,
        2260
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE msr.msrs\nSET status = {{ $json.new_status }}, updated_at = NOW()\nWHERE msr_id = {{ $json.msr_id }};\n\nINSERT INTO msr.msr_status_history (msr_id, status, created_at)\nVALUES ({{ $json.msr_id }}, '{{ $json.new_status }}', NOW())",
        "options": {}
      },
      "id": "2b4c3b8c-a00b-4375-af5e-0bdea51c7df1",
      "name": "Update status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        160,
        2240
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {},
      "id": "be257ee2-1595-430b-bb89-12a42d70ed8e",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1980,
        2260
      ]
    },
    {
      "parameters": {},
      "id": "825475cc-dd34-46e6-bf0d-f14aa899a006",
      "name": "No Operation, do nothing2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1980,
        2700
      ]
    },
    {
      "parameters": {},
      "id": "458a6060-6897-4d68-b157-315c51fefe7f",
      "name": "No Operation, do nothing3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1960,
        3440
      ]
    },
    {
      "parameters": {},
      "id": "478c365d-bb4a-4146-9036-375a31b16489",
      "name": "No Operation, do nothing4",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2780,
        3720
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "HYstwqyTrzYsvJ2P"
  },
  "shared": [
    {
      "createdAt": "2024-07-25T19:18:22.260Z",
      "updatedAt": "2024-07-25T19:18:22.260Z",
      "role": "workflow:owner",
      "workflowId": "t6h9U4VSoY9xaEMA",
      "projectId": "rfgBK87HsySgxYKT",
      "project": {
        "createdAt": "2024-11-15T08:07:36.637Z",
        "updatedAt": "2024-11-15T08:07:36.637Z",
        "id": "rfgBK87HsySgxYKT",
        "name": "Desenvolvimento Mapa <dev@mapa.org.br>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2024-11-15T08:07:36.637Z",
            "updatedAt": "2024-11-15T08:07:36.637Z",
            "userId": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
            "projectId": "rfgBK87HsySgxYKT",
            "user": {
              "createdAt": "2024-01-09T22:21:28.810Z",
              "updatedAt": "2025-11-01T23:13:06.000Z",
              "id": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
              "email": "dev@mapa.org.br",
              "firstName": "Desenvolvimento",
              "lastName": "Mapa",
              "personalizationAnswers": null,
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "sMoToF9HauyKvsFJ",
                "isOnboarded": true,
                "userActivatedAt": 1731658062996,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1749493410027
                },
                "easyAIWorkflowOnboarded": true
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-11-01",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrencyRules": [],
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2024-01-09T22:32:23.916Z",
      "updatedAt": "2024-01-09T22:32:23.916Z",
      "id": "JnlufCPRnot361zL",
      "name": "zendesk integration"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-12-03T14:52:44.000Z",
  "versionId": "d0cd1fbf-cd58-4eca-a21f-9d2008abb219"
}