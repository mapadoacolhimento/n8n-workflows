{
  "active": true,
  "connections": {
    "Checks if we need to update volunteer": {
      "main": [
        [
          {
            "node": "Volunteer exists in our DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check city, state and zipcode1": {
      "main": [
        [
          {
            "node": "Busca as coordenadas do endereço2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add null lat/lng1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteer exists in our DB": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Zendesk input from volunteer": {
      "main": [
        [
          {
            "node": "Checks if we need to update volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Zendesk input from MSR": {
      "main": [
        [
          {
            "node": "Checks if we need to update status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Updates volunteer geolocation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Updates volunteer_availability geolocation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update volunteer geolocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca as coordenadas do endereço2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSR exists in our DB1": {
      "main": [
        [
          {
            "node": "Should update msr_pii",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should update location",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should update status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checks if we need to update status": {
      "main": [
        [
          {
            "node": "MSR exists in our DB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update msr_pii": {
      "main": [
        [
          {
            "node": "Update msr_pii",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update location": {
      "main": [
        [
          {
            "node": "Check city, state and zipcode",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Updates support_request1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Updates msr.msrs1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update MSR geolocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add null lat/lng2": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check city, state and zipcode": {
      "main": [
        [
          {
            "node": "Busca as coordenadas do endereço",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca as coordenadas do endereço": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update status": {
      "main": [
        [
          {
            "node": "Update status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Volunteer": {
      "main": [
        [
          {
            "node": "Normalize Zendesk input from volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook MSR": {
      "main": [
        [
          {
            "node": "Normalize Zendesk input from MSR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Check city, state and zipcode1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Updates volunteer personal data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Updates volunteer availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-07-24T19:45:34.233Z",
  "id": "xokKMoUPjlqi7Rpe",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[PROD] Integração Zendesk/BD",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  id AS volunteer_id,\n  '{{ $json.body.city }}' AS new_city,\n  '{{ $json.body.state }}' AS new_state,\n  '{{ $json.body.zipcode }}' AS new_zipcode,\n  '{{ $json.body.first_name }}' AS new_first_name,\n  '{{ $json.body.availability }}'::INT AS new_availability,\n  '{{ $json.body.phone }}' AS new_phone,\n  '{{ $json.body.register_number }}' AS new_register_number,\n  '{{ $json.body.email }}' AS new_email,\n  '{{ $json.body.volunteer_zendesk_user_id }}' AS volunteer_zendesk_user_id,\n  CASE \n    WHEN \n      city != '{{ $json.body.city }}' OR \n      state != '{{ $json.body.state }}' OR \n      zipcode != '{{ $json.body.zipcode }}'\n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_geolocation,\n  CASE WHEN availability != '{{ $json.body.availability }}'::INT AND '{{ $json.body.availability }}'::INT != 0 THEN TRUE ELSE FALSE END AS should_update_availability,\n  CASE \n    WHEN \n      first_name != '{{ $json.body.first_name }}' OR \n      phone != '{{ $json.body.phone }}' OR \n      register_number != '{{ $json.body.register_number }}' OR\n      email != '{{ $json.body.email }}'\n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_personal\nFROM public.volunteers\nWHERE zendesk_user_id = {{ $json.body.volunteer_zendesk_user_id }}",
        "options": {}
      },
      "id": "fc5a3d2f-6d6c-41ee-8742-a4b7216ecfb7",
      "name": "Checks if we need to update volunteer",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -120,
        1540
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cd3132a5-7821-49ae-a080-957a931cb612",
              "leftValue": "={{ $json.new_city }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "e0a033c3-38d5-4583-943e-43fffb34b624",
              "leftValue": "={{ $json.new_state }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f95c4be6-693b-4809-b28c-a583b7c813ca",
              "leftValue": "={{ $json.new_zipcode }}",
              "rightValue": "=not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "c4d09102-4b7a-4572-8605-ca264bb2cf81",
      "name": "Check city, state and zipcode1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        660,
        1220
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"coordinates\": {\n    \"lat\": null,\n    \"lng\": null\n  }\n}\n",
        "options": {}
      },
      "id": "f0764c46-8b44-4cce-8bf1-b71b0cb87640",
      "name": "Add null lat/lng1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        1060,
        1400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.volunteer_availability\nSET \n  city = '{{ $json.city }}', \n  state = '{{ $json.state }}', \n  lat = {{ $json.coordinates.lat }}, \n  lng = {{ $json.coordinates.lng }}, \n  updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "2d100c30-c534-413e-9a2b-8b11df49c2b9",
      "name": "Updates volunteer_availability geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1840,
        1140
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "93753f6a-58ca-4ad5-a9ce-0b173efe7565",
              "leftValue": "={{ $json.volunteer_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e3c10e3d-69d0-4dcd-8b96-a0c2609f8eb1",
      "name": "Volunteer exists in our DB",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        100,
        1540
      ]
    },
    {
      "parameters": {
        "errorMessage": "=A voluntária com Zendesk User ID '{{$node[\"Webhook Volunteer\"].json['body']['volunteer_zendesk_user_id']}}' não existe no nosso banco de dados."
      },
      "id": "4c9d7e91-9be8-4366-ac44-7587fbce270f",
      "name": "Stop and Error1",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        280,
        1740
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE volunteers\nSET availability = {{ $json.new_availability }}, updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }};\n\nUPDATE public.volunteer_availability\nSET max_matches = {{ $json.new_availability }}, updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }};",
        "options": {}
      },
      "id": "e200a469-17c0-4c0a-9e3b-3ec21cada304",
      "name": "Updates volunteer availability",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        640,
        1740
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const city =\n    item.json.body.city === 'ZERO_RESULTS' ||\n    item.json.body.city === ''\n      ? 'not_found'\n      : item.json.body.city\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .replace(\"'\", ' ')\n          .replace(/ *\\([^)]*\\) */g, '')\n          .toUpperCase();\n  const onlyNumbersZipcode = item.json.body.zipcode.replace(/[^0-9\\\\.]+/g, '').slice(0, 8);\n  const zipcode = onlyNumbersZipcode || 'not_found';\n  item.json.body.city = city;\n  item.json.body.zipcode = zipcode;\n  item.json.body.state = item.json.body.state || 'not_found';\n\n  const first_name = item.json.body.first_name;\n  item.json.body.first_name = first_name.charAt(0).toUpperCase() + first_name.slice(1);\n  item.json.body.phone = item.json.body.phone.replace(/[^0-9\\\\.]+/g, '');\n  item.json.body.register_number = item.json.body.register_number.replace(/[^0-9\\\\.]+/g, '');\n  item.json.body.availability = Number(item.json.body.availability) || 0\n}\n\nreturn $input.all();\n"
      },
      "id": "c598682e-a288-4829-9e7b-ebb9446ec872",
      "name": "Normalize Zendesk input from volunteer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -380,
        1540
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const status = item.json.body.status === 'inscrita' ? 'registered' : 'unregistered';\n  const phone = !!item.json.body.phone ? item.json.body.phone.replace(/\\D/g, \"\") : 'not_found';\n  const city =\n    item.json.body.city === 'ZERO_RESULTS' ||\n    item.json.body.city === '' ||\n    !item.json.body.city\n      ? 'not_found'\n      : item.json.body.city\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .replace(\"'\", ' ')\n          .replace(/ *\\([^)]*\\) */g, '')\n          .toUpperCase();\n  const onlyNumbersZipcode = !item.json.body.zipcode ||\n    item.json.body.zipcode === ''\n      ? 'not_found'\n    : item.json.body.zipcode.replace(/[^0-9\\\\.]+/g, '').slice(0,8);\n  const zipcode = onlyNumbersZipcode || 'not_found';\n  item.json.body.city = city;\n  item.json.body.zipcode = zipcode;\n  item.json.body.state = item.json.body.state || 'not_found';\n  item.json.body.status = status;\n  item.json.body.phone = phone;\n}\n\nreturn $input.all();\n"
      },
      "id": "82934787-b998-4757-839a-d1018296ff86",
      "name": "Normalize Zendesk input from MSR",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        -320
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  city = '{{ $json.city }}', \n  state = '{{ $json.state }}', \n  zipcode = '{{ $json.new_zipcode }}',\n  neighborhood = '{{ $json.neighborhood }}',\n  latitude = {{ $json.coordinates.lat }}, \n  longitude = {{ $json.coordinates.lng }}, \n  \n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "a2d09abc-0122-4dba-824b-12a6e377e34d",
      "name": "Updates volunteer geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1860,
        1580
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  first_name = '{{ $json.new_first_name }}',\n  phone = '{{ $json.new_phone }}',\n  register_number = '{{ $json.new_register_number }}',\n  email = '{{ $json.new_email }}',\n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "30ab21bf-3c1f-4858-8f2a-10ef1922c988",
      "name": "Updates volunteer personal data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        640,
        1560
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "85357540-f47f-4f3a-bc52-5821221d4c1a",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1420,
        1480
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "=https://voluntaria.mapadoacolhimento.org/address",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "city",
              "value": "={{ $json.new_city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.new_state }}"
            },
            {
              "name": "zipcode",
              "value": "={{ $json.new_zipcode === 'not_found' ? '' : $json.new_zipcode  }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ee1a10ee-70e8-48f3-a609-8ea5a51c1423",
      "name": "Busca as coordenadas do endereço2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        1180
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  msr_id,\n  CASE \n    WHEN '{{ $json.body.phone }}' != phone THEN TRUE \n    ELSE FALSE \n  END AS should_update_msr_pii,\n  CASE \n    WHEN '{{ $json.body.zipcode }}' != zipcode \n      OR '{{ $json.body.city }}' != city \n      OR '{{ $json.body.state }}' != state\n    THEN TRUE\n    ELSE FALSE\n  END AS should_update_location,\n  CASE \n    WHEN '{{ $json.body.status }}' != status \n    THEN TRUE\n    ELSE FALSE\n  END AS should_update_status,\n  '{{ $json.body.phone }}' AS phone,\n  '{{ $json.body.zipcode }}' AS new_zipcode,\n  '{{ $json.body.city }}' AS new_city,\n  '{{ $json.body.state }}' AS new_state,\n  '{{ $json.body.status }}' AS new_status\nFROM msr.msrs\nINNER JOIN pii_sec.msr_pii USING(msr_id)\nWHERE msr_id = {{ $json.body.msr_zendesk_user_id }}",
        "options": {}
      },
      "id": "2d0bd14e-9eb5-4085-bf9c-2d3b737d7b51",
      "name": "Checks if we need to update status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -180,
        -320
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "=A MSR com Zendesk User ID '{{$node[\"Webhook MSR\"].json['body']['msr_zendesk_user_id']}}' não existe no nosso banco de dados."
      },
      "id": "3b94b42b-42a6-47bc-93cc-1f9336f564ac",
      "name": "Stop and Error2",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        240,
        -100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "43ab3526-3a4b-49a3-b6db-2e482b0f9e31",
              "leftValue": "={{ $json.msr_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "d991ad3c-97a7-4603-b32a-765b86fccd10",
      "name": "MSR exists in our DB1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        60,
        -320
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9bbb07e8-f753-4190-b6a4-ca7c6eee7875",
              "leftValue": "={{ $json.should_update_msr_pii }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "11b485c8-4ed9-45cb-8c1c-51543e032afd",
      "name": "Should update msr_pii",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        580,
        -340
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE pii_sec.msr_pii\nSET phone = '{{ $json.phone }}'\nWHERE msr_id = {{ $json.msr_id }}",
        "options": {}
      },
      "id": "7b0feea3-eca8-4c40-bf0c-5719017ad27b",
      "name": "Update msr_pii",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        880,
        -360
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9bbb07e8-f753-4190-b6a4-ca7c6eee7875",
              "leftValue": "={{ $json.should_update_location }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d6c5c06e-963e-4f42-b9ef-8671f18ba96c",
      "name": "Should update location",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        580,
        80
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "53ec99a5-f1fb-4dfd-86f3-4f5577e4346e",
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1680,
        340
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE match.support_requests\nSET city = '{{ $json.new_city }}', state = '{{ $json.new_state }}', lat = {{ $json.coordinates.lat }}, lng = {{ $json.coordinates.lng }}, updated_at = NOW()\nWHERE msr_id = {{ $json.msr_id }}",
        "options": {}
      },
      "id": "3db8b331-1bfc-480e-b6de-31bebaa99a9c",
      "name": "Updates support_request1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2000,
        520
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"coordinates\": {\n    \"lat\": null,\n    \"lng\": null\n  }\n}\n",
        "options": {}
      },
      "id": "760cc89c-5830-456c-96e5-ad319524125b",
      "name": "Add null lat/lng2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        1300,
        140
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cd3132a5-7821-49ae-a080-957a931cb612",
              "leftValue": "={{ $json.new_city }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "e0a033c3-38d5-4583-943e-43fffb34b624",
              "leftValue": "={{ $json.new_state }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f95c4be6-693b-4809-b28c-a583b7c813ca",
              "leftValue": "={{ $json.new_zipcode }}",
              "rightValue": "=not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "dd6737a3-b866-4b75-adfa-f3c3c4e84fff",
      "name": "Check city, state and zipcode",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        880,
        -100
      ]
    },
    {
      "parameters": {
        "url": "=https://voluntaria.mapadoacolhimento.org/address",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "city",
              "value": "={{ $json.new_city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.new_state }}"
            },
            {
              "name": "zipcode",
              "value": "={{ $json.new_zipcode === 'not_found' ? '' : $json.new_zipcode  }}"
            }
          ]
        },
        "options": {}
      },
      "id": "edb868d7-ec90-4182-a8ef-df8372577335",
      "name": "Busca as coordenadas do endereço",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1180,
        -120
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE msr.msrs\nSET city = '{{ $json.new_city }}', state = '{{ $json.new_state }}', zipcode = REGEXP_REPLACE('{{ $json.new_zipcode }}', '-', ''), updated_at = NOW()\nWHERE msr_id = {{ $json.msr_id }}",
        "options": {}
      },
      "id": "81293085-aa9d-445d-9bc7-30638e4bae3a",
      "name": "Updates msr.msrs1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2000,
        140
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9bbb07e8-f753-4190-b6a4-ca7c6eee7875",
              "leftValue": "={{ $json.should_update_status }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1eb1db99-b3a9-4daa-b9ea-82ca895d1a49",
      "name": "Should update status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        580,
        -740
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE msr.msrs\nSET status = '{{ $json.new_status }}', updated_at = NOW()\nWHERE msr_id = {{ $json.msr_id }};\n\nINSERT INTO msr.msr_status_history (msr_id, status, created_at)\nVALUES ({{ $json.msr_id }}, '{{ $json.new_status }}', NOW())",
        "options": {}
      },
      "id": "6d6f41ed-f45e-4c4e-8cf8-9e5d75fd2834",
      "name": "Update status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        880,
        -760
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-msr-info",
        "options": {}
      },
      "id": "194213ca-fee8-462f-bb73-1d9bbefec496",
      "name": "Webhook MSR",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -660,
        -320
      ],
      "webhookId": "1beb64b3-a520-46a9-8440-51404375a823"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-volunteer-info",
        "options": {}
      },
      "id": "7156bf61-4f0e-44c8-93e5-3504f590e14f",
      "name": "Webhook Volunteer",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -620,
        1540
      ],
      "webhookId": "643ff536-dbec-4912-b1b8-83301d8b17f6"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.should_update_geolocation }}",
                    "rightValue": "{{ true }}",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "geolocation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "1206305f-a715-4cb0-990a-d942246a7212",
                    "leftValue": "={{ $json.should_update_personal }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "personal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "26fd6c46-a2eb-4299-a425-e7978d0102fd",
                    "leftValue": "={{ $json.should_update_availability }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "availability"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "id": "0b94890f-6ffd-46d7-9107-5628c16675fa",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        380,
        1520
      ]
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "update",
        "id": "={{ $json.msr_id }}",
        "updateFields": {
          "userFieldsUi": {
            "userFieldValues": [
              {
                "field": "city",
                "value": "={{ $json.city }}"
              },
              {
                "field": "cep",
                "value": "={{ $json.zipcode }}"
              },
              {
                "field": "state",
                "value": "={{ $json.state }}"
              },
              {
                "field": "neighborhood",
                "value": "={{ $json.neighborhood }}"
              }
            ]
          }
        }
      },
      "id": "92eb08da-ea2a-4e65-8abd-e670dc48bd10",
      "name": "Update MSR geolocation",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        2000,
        340
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "update",
        "id": "={{ $json.volunteer_zendesk_user_id }}",
        "updateFields": {
          "userFieldsUi": {
            "userFieldValues": [
              {
                "field": "city",
                "value": "={{ $json.city }}"
              },
              {
                "field": "cep",
                "value": "={{ $json.zipcode }}"
              },
              {
                "field": "state",
                "value": "={{ $json.state }}"
              },
              {
                "field": "neighborhood",
                "value": "={{ $json.neighborhood }}"
              }
            ]
          }
        }
      },
      "id": "7fbbd1ca-8fc7-4098-9ec6-30e9331178cb",
      "name": "Update volunteer geolocation",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        1860,
        1400
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook Volunteer": [
      {
        "json": {
          "headers": {
            "host": "mapadoacolhimento.app.n8n.cloud",
            "user-agent": "Zendesk Webhook",
            "content-length": "247",
            "accept-encoding": "gzip, br",
            "authorization": "Basic ZGV2QG1hcGEub3JnLmJyL3Rva2VuOkxWMHJoR2hxYzd1UTB2OGwzbTFtUFhwdmVZVFNMWG93UU4xbEJLZFk=",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "216.198.2.195",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "8be6c39ad6bd3078-SEA",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json; charset=utf-8",
            "traceparent": "00-66d9ba3c000000005b43c2faab6f39e3-5b43c2faab6f39e3-00",
            "tracestate": "dd=s:-1;p:5b43c2faab6f39e3",
            "x-forwarded-for": "216.198.2.195, 172.71.147.103",
            "x-forwarded-host": "mapadoacolhimento.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-76f56c775b-nqz4f",
            "x-is-trusted": "yes",
            "x-real-ip": "216.198.2.195",
            "x-request-id": "89ab9582-7207-4e61-a6d2-eab077eeca6c",
            "x-zendesk-account-id": "9040899",
            "x-zendesk-webhook-id": "01HSGXS4E94S3BH8DFMQKPAVDJ",
            "x-zendesk-webhook-invocation-id": "01J717YYXWNX6Y66MV4PBDBMA5",
            "x-zendesk-webhook-signature": "G2WOReEcFXeWSJtIPYYmq5ab3Xg9e+ZAw7ouobIqLY4=",
            "x-zendesk-webhook-signature-timestamp": "2024-09-05T14:03:40Z"
          },
          "params": {},
          "query": {},
          "body": {
            "volunteer_zendesk_user_id": "417544904932",
            "city": "CAMPINAS",
            "state": "SP",
            "first_name": "Psi",
            "availability": "2",
            "zipcode": "01303020",
            "phone": "19999999999",
            "register_number": "13/232453",
            "email": "dev.psi.mapa@gmail.com"
          },
          "webhookUrl": "https://mapadoacolhimento.app.n8n.cloud/webhook/update-volunteer-info",
          "executionMode": "production"
        }
      }
    ],
    "Webhook MSR": [
      {
        "json": {
          "headers": {
            "host": "mapadoacolhimento.app.n8n.cloud",
            "user-agent": "Zendesk Webhook",
            "content-length": "164",
            "accept-encoding": "gzip, br",
            "authorization": "Basic ZGV2QG1hcGEub3JnLmJyL3Rva2VuOkxWMHJoR2hxYzd1UTB2OGwzbTFtUFhwdmVZVFNMWG93UU4xbEJLZFk=",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "216.198.2.146",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "8c0864bde3519b72-SEA",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json; charset=utf-8",
            "traceparent": "00-66df1bb200000000df9a843637fa1281-df9a843637fa1281-00",
            "tracestate": "dd=s:-1;p:df9a843637fa1281",
            "x-forwarded-for": "216.198.2.146, 172.71.147.104",
            "x-forwarded-host": "mapadoacolhimento.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-76f56c775b-ww8fm",
            "x-is-trusted": "yes",
            "x-real-ip": "216.198.2.146",
            "x-request-id": "0cfd14af-8029-4174-9c2f-28f5088d01ea",
            "x-zendesk-account-id": "9040899",
            "x-zendesk-webhook-id": "01HSGNVFZXZ0VD5KXJJC8YG4Z7",
            "x-zendesk-webhook-invocation-id": "01J7BR8CJ6XE6KME8WSH6R7MZB",
            "x-zendesk-webhook-signature": "CsPkCSQ3UCn873jA7Ws7z0Q7wY20m+cKUuxW+QAhr5c=",
            "x-zendesk-webhook-signature-timestamp": "2024-09-09T16:00:50Z"
          },
          "params": {},
          "query": {},
          "body": {
            "msr_zendesk_user_id": "19595488838932",
            "city": "Contagem",
            "state": "MG",
            "zipcode": "",
            "status": "indisponível_-sem_resposta",
            "phone": "31983892120"
          },
          "webhookUrl": "https://mapadoacolhimento.app.n8n.cloud/webhook/update-msr-info",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "HYstwqyTrzYsvJ2P"
  },
  "shared": [
    {
      "createdAt": "2024-07-24T19:45:34.235Z",
      "updatedAt": "2024-07-24T19:45:34.235Z",
      "role": "workflow:owner",
      "workflowId": "xokKMoUPjlqi7Rpe",
      "projectId": "rfgBK87HsySgxYKT",
      "project": {
        "createdAt": "2024-11-15T08:07:36.637Z",
        "updatedAt": "2024-11-15T08:07:36.637Z",
        "id": "rfgBK87HsySgxYKT",
        "name": "Desenvolvimento Mapa <dev@mapa.org.br>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2024-11-15T08:07:36.637Z",
            "updatedAt": "2024-11-15T08:07:36.637Z",
            "userId": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
            "projectId": "rfgBK87HsySgxYKT",
            "user": {
              "createdAt": "2024-01-09T22:21:28.810Z",
              "updatedAt": "2025-10-05T23:13:49.000Z",
              "id": "6e437c36-d4e0-42f4-bbc3-d9b5ac96e474",
              "email": "dev@mapa.org.br",
              "firstName": "Desenvolvimento",
              "lastName": "Mapa",
              "personalizationAnswers": null,
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "sMoToF9HauyKvsFJ",
                "isOnboarded": true,
                "userActivatedAt": 1731658062996,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1749493410027
                },
                "easyAIWorkflowOnboarded": true
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-05",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-09T22:32:23.916Z",
      "updatedAt": "2024-01-09T22:32:23.916Z",
      "id": "JnlufCPRnot361zL",
      "name": "zendesk integration"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-09-09T17:03:44.000Z",
  "versionId": "890964cd-954b-430a-b299-c561641d70b9"
}