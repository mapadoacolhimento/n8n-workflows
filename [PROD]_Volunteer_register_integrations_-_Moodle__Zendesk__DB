"[
  {
    "createdAt": "2024-01-24T01:52:22.279Z",
    "updatedAt": "2024-02-20T18:01:35.000Z",
    "id": "0hojIhmzSHjJnPDe",
    "name": "[PROD] Volunteer register integrations - Moodle / Zendesk / DB",
    "active": true,
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "moodle-zendesk",
          "options": {}
        },
        "id": "755cbae2-69bf-4deb-92e8-fa787481d63e",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -780,
          760
        ],
        "webhookId": "3e06675f-aa55-42cd-bfa1-be979b64b575"
      },
      {
        "parameters": {
          "errorMessage": "=Não achou a voluntária\nmoodle_id:  {{$node[\"Schedule Trigger\"].json[\"body\"][\"userid\"]}}"
        },
        "id": "3feb912b-0efd-40ce-bd40-d3a17a2576e1",
        "name": "Stop And Error",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          -20,
          1100
        ]
      },
      {
        "parameters": {
          "errorMessage": "=Não achou a voluntária\nvollunteer_id:  {{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
        },
        "id": "df677af8-6cf3-47ef-b1a7-5f60c95b27b6",
        "name": "Stop And Error1",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          340,
          1080
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=select * from volunteers v\nleft join integrations_logs il on il.internal_id = v.id and il.form_type = v.occupation\nwhere\nil.integration = 'moodle'\nand il.\"type\" = 'matricular'\nand il.external_id = {{$node[\"Webhook\"].json[\"body\"][\n\"userid\"]}}",
          "additionalFields": {}
        },
        "id": "a2797037-f471-4eb8-955c-63dc3f458ec1",
        "name": "Busca voluntária pelo moodle ID",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -560,
          760
        ],
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Busca voluntária pelo moodle ID\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "e906724e-4b46-4f79-a913-2aaf424eff3a",
        "name": "Se retornou a voluntária",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -340,
          760
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "search",
          "limit": 30,
          "filters": {
            "query": "={{ $json.email }}"
          }
        },
        "id": "821c6e9a-d42f-49c8-9c02-695311739b64",
        "name": "Busca voluntária pelo email",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          20,
          820
        ],
        "alwaysOutputData": true,
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  if (item.json.organization_id == 360269610652) {\n  \titem.json.subject =`[Advogada] ${item.json.name} - ${item.json.user_fields.registration_number}`;\n  } else {\n    item.json.subject =`[Psicóloga] ${item.json.name} - ${item.json.user_fields.registration_number}`;\n  }\n}\n\nreturn $input.all();"
        },
        "id": "3920dc51-99c8-46d1-81a9-92ae6f46c4eb",
        "name": "Monta o assunto do ticket de acordo com a organização da voluntária",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          780,
          60
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=https://mapadoacolhimento.zendesk.com/api/v2/tickets/",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "zendeskApi",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"ticket\": {\n\t\t\"requester_id\":{{$node[\"Atualiza status da voluntária no Zendesk\"].json[\"id\"]}},\n\t\t\"organization_id\": {{$node[\"Atualiza status da voluntária no Zendesk\"].json[\"organization_id\"]}},\n\t\t\"description\": \"Importado via N8N\",\n\t\t\"subject\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"subject\"] }}\",\n\t\t\"comment\": {\n\t\t\t\"body\": \"Cadastrada\",\n\t\t\t\"public\": false\n\t\t},\n\t\t\"status\": \"pending\",\n\t\t\"custom_fields\": [\n\t\t\t{\n\t\t\t\t\"id\": 360021879811, \n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"user_fields\"][\"city\"] }}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 360021812712, \n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"phone\"] }}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 360016631592, \n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"name\"] }}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 360021665652, \n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"user_fields\"][\"condition\"] }}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 360021879791,\n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"user_fields\"][\"state\"] }}\"\n\t\t\t}\n\t\t]\n\t}\n}",
          "options": {}
        },
        "id": "03395f91-68bd-419c-a86b-74872bced949",
        "name": "Cria o ticket de entrada da voluntária pela API do Zendesk",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1360,
          60
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "condition",
                "value": "aprovada"
              },
              {
                "name": "updated_at",
                "value": "={{$now}}"
              }
            ],
            "number": [
              {
                "name": "id",
                "value": "={{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
              },
              {
                "name": "zendesk_user_id",
                "value": "={{ $json[\"id\"] }}"
              }
            ]
          },
          "options": {}
        },
        "id": "f7a0f6fd-a864-41e4-b227-68573b450856",
        "name": "Seta os campos para atualizar a voluntária no BD",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          600,
          800
        ]
      },
      {
        "parameters": {
          "url": "=https://mapadoacolhimento.zendesk.com/api/v2/users/{{$node[\"Busca voluntária pelo email\"].json[\"id\"]}}/tickets/requested",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpBasicAuth",
          "options": {}
        },
        "id": "48c29a8a-c55e-43e6-a3d9-20b63b60c658",
        "name": "Busca os tickets da voluntária no Zendesk",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          980,
          800
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "fieldToSplitOut": "tickets",
          "include": "allOtherFields",
          "options": {}
        },
        "id": "4eb27b4c-616d-4109-a5a4-bb0a782d3a9e",
        "name": "Separa os tickets do objeto retornado",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          1180,
          800
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Busca voluntária pelo email\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "176bc847-9aef-458a-a39d-ae4249cbcc02",
        "name": "Se retornou a voluntária do Zendesk",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          180,
          820
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{ $json[\"id\"] }}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "capacitacao"
                }
              ]
            }
          }
        },
        "id": "2244999e-5659-409a-9b76-273a1c70b382",
        "name": "Atualiza status da voluntária no Zendesk",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          600,
          60
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{ $json[\"id\"] }}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "aprovada"
                }
              ]
            }
          }
        },
        "id": "2b80278f-a43b-4863-9277-aa247998a4fa",
        "name": "Atualiza status da voluntária no Zendesk1",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          440,
          800
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "condition",
                "value": "capacitacao"
              },
              {
                "name": "updated_at",
                "value": "={{$now}}"
              }
            ],
            "number": [
              {
                "name": "id",
                "value": "={{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
              },
              {
                "name": "zendesk_user_id",
                "value": "={{$node[\"Atualiza status da voluntária no Zendesk\"].json[\"id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "99e8f036-d770-4640-bbbc-77aa4417e4c9",
        "name": "Seta os campos para atualizar voluntária no BD",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          980,
          60
        ]
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "status",
                "value": "capacitacao"
              },
              {
                "name": "created_at",
                "value": "={{$now}}"
              }
            ],
            "number": [
              {
                "name": "volunteer_id",
                "value": "={{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "38958f78-dbc4-4eed-a4a2-c5830a8b65eb",
        "name": "Seta os campos para inserir na tabela volunteer_status_history",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          1560,
          60
        ]
      },
      {
        "parameters": {
          "table": "volunteer_status_history",
          "columns": "volunteer_id,status,created_at",
          "additionalFields": {}
        },
        "id": "2da652b0-2401-4f36-9d74-e212a1a25079",
        "name": "Insere o novo status na tabela volunteer_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1780,
          60
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.tickets.custom_fields[6].value }}",
                "value2": "capacitacao"
              }
            ]
          }
        },
        "id": "88c425a4-1e80-4d02-95ad-08b2eed4c487",
        "name": "Se o campo \"Status da Inscrição\" for igual a \"capacitacao\"",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1340,
          800
        ]
      },
      {
        "parameters": {
          "operation": "limit"
        },
        "id": "eb3e36b1-5f8c-409e-adce-a707e2f826cc",
        "name": "Seleciona o ticket mais antigo",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          1560,
          780
        ]
      },
      {
        "parameters": {
          "operation": "update",
          "id": "={{ $json[\"tickets\"][\"id\"] }}",
          "updateFields": {
            "customFieldsUi": {
              "customFieldsValues": [
                {
                  "id": 360021665652,
                  "value": "aprovada"
                }
              ]
            }
          }
        },
        "id": "1dc0c5a3-4059-4566-bd8f-905aafac171a",
        "name": "Atualiza o ticket para \"aprovada\"",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          1780,
          780
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "status",
                "value": "aprovada"
              },
              {
                "name": "created_at",
                "value": "={{ $now }} "
              }
            ],
            "number": [
              {
                "name": "volunteer_id",
                "value": "={{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "2fee76a0-bc6b-4716-a85d-93a8b462c229",
        "name": "Seta os campos para inserir na tabela volunteer_status_history1",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          1980,
          780
        ]
      },
      {
        "parameters": {
          "table": "volunteer_status_history",
          "columns": "volunteer_id,status,created_at",
          "additionalFields": {}
        },
        "id": "23b913c0-ec20-4470-a5f4-8698968618ae",
        "name": "Insere  o registro na volunteer_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2200,
          780
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE public.volunteers\nSET condition = '{{ $json[\"condition\"] }}', updated_at = NOW(), zendesk_user_id={{ $json[\"zendesk_user_id\"] }}\nWHERE id = {{ $json[\"id\"] }}",
          "options": {}
        },
        "id": "c8b56c00-4992-4467-ae3a-b19b8d4a006e",
        "name": "Atualiza voluntária no BD",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1180,
          60
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE volunteers\nSET condition = '{{ $json.condition }}', updated_at = NOW()\nWHERE id = {{ $json.id }}",
          "options": {}
        },
        "id": "26bc07b6-e90d-4daf-b57d-664f963daf89",
        "name": "Atualiza voluntária no BD1",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          780,
          800
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "dataType": "string",
          "value1": "={{$node[\"Webhook\"].json[\"body\"][\"eventname\"]}}",
          "rules": {
            "rules": [
              {
                "value2": "\\mod_page\\event\\course_module_viewed"
              },
              {
                "value2": "\\core\\event\\course_completed",
                "output": 1
              }
            ]
          }
        },
        "id": "b92c1d99-9f7e-4aa4-80d9-513e8384167e",
        "name": "Determina se acessou módulo ou conclusão de curso",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 1,
        "position": [
          -140,
          560
        ]
      },
      {
        "parameters": {
          "errorMessage": "=Não achou a voluntária\nvollunteer_id:  {{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
        },
        "id": "649b4734-e500-44c0-afc3-346bb1cad177",
        "name": "Stop And Error2",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          500,
          340
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "search",
          "limit": 30,
          "filters": {
            "query": "={{ $json.email }}"
          }
        },
        "id": "0460f562-be28-459c-9dc1-21dd61101a92",
        "name": "Busca voluntária pelo email1",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          180,
          80
        ],
        "alwaysOutputData": true,
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Busca voluntária pelo email1\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "1ae642d4-df00-40fa-a2cf-440103d04227",
        "name": "Se retornou a voluntária do Zendesk1",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          360,
          80
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "id": "b4c9bdc8-6d21-48ea-88c4-6fed9800ea33",
                "leftValue": "={{ $json[\"condition\"] }}",
                "rightValue": "cadastrada",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "6e3e9737-a1d1-42f0-9661-cb38f926324f",
        "name": "O atual status da mulher é cadastrada?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          20,
          320
        ]
      },
      {
        "parameters": {},
        "id": "4af34494-246a-465e-bce9-0bd190becefd",
        "name": "No Operation, do nothing",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          220,
          340
        ]
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Busca voluntária pelo moodle ID",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca voluntária pelo moodle ID": {
        "main": [
          [
            {
              "node": "Se retornou a voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se retornou a voluntária": {
        "main": [
          [
            {
              "node": "Determina se acessou módulo ou conclusão de curso",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca voluntária pelo email": {
        "main": [
          [
            {
              "node": "Se retornou a voluntária do Zendesk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Monta o assunto do ticket de acordo com a organização da voluntária": {
        "main": [
          [
            {
              "node": "Seta os campos para atualizar voluntária no BD",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Cria o ticket de entrada da voluntária pela API do Zendesk": {
        "main": [
          [
            {
              "node": "Seta os campos para inserir na tabela volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seta os campos para atualizar a voluntária no BD": {
        "main": [
          [
            {
              "node": "Atualiza voluntária no BD1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca os tickets da voluntária no Zendesk": {
        "main": [
          [
            {
              "node": "Separa os tickets do objeto retornado",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Separa os tickets do objeto retornado": {
        "main": [
          [
            {
              "node": "Se o campo \"Status da Inscrição\" for igual a \"capacitacao\"",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se retornou a voluntária do Zendesk": {
        "main": [
          [
            {
              "node": "Atualiza status da voluntária no Zendesk1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza status da voluntária no Zendesk": {
        "main": [
          [
            {
              "node": "Monta o assunto do ticket de acordo com a organização da voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza status da voluntária no Zendesk1": {
        "main": [
          [
            {
              "node": "Seta os campos para atualizar a voluntária no BD",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seta os campos para atualizar voluntária no BD": {
        "main": [
          [
            {
              "node": "Atualiza voluntária no BD",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seta os campos para inserir na tabela volunteer_status_history": {
        "main": [
          [
            {
              "node": "Insere o novo status na tabela volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se o campo \"Status da Inscrição\" for igual a \"capacitacao\"": {
        "main": [
          [
            {
              "node": "Seleciona o ticket mais antigo",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seleciona o ticket mais antigo": {
        "main": [
          [
            {
              "node": "Atualiza o ticket para \"aprovada\"",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza o ticket para \"aprovada\"": {
        "main": [
          [
            {
              "node": "Seta os campos para inserir na tabela volunteer_status_history1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seta os campos para inserir na tabela volunteer_status_history1": {
        "main": [
          [
            {
              "node": "Insere  o registro na volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza voluntária no BD": {
        "main": [
          [
            {
              "node": "Cria o ticket de entrada da voluntária pela API do Zendesk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza voluntária no BD1": {
        "main": [
          [
            {
              "node": "Busca os tickets da voluntária no Zendesk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Determina se acessou módulo ou conclusão de curso": {
        "main": [
          [
            {
              "node": "O atual status da mulher é cadastrada?",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Busca voluntária pelo email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca voluntária pelo email1": {
        "main": [
          [
            {
              "node": "Se retornou a voluntária do Zendesk1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se retornou a voluntária do Zendesk1": {
        "main": [
          [
            {
              "node": "Atualiza status da voluntária no Zendesk",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "O atual status da mulher é cadastrada?": {
        "main": [
          [
            {
              "node": "Busca voluntária pelo email1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "No Operation, do nothing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "1f458ff8-1247-4a69-b25f-33ff7949ee59",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-24T01:51:54.592Z",
        "updatedAt": "2024-01-24T01:51:54.592Z",
        "id": "9qHi7Mg3P0urkBHm",
        "name": "volunteer"
      }
    ]
  },
  {
    "createdAt": "2024-02-05T20:07:45.871Z",
    "updatedAt": "2024-02-08T14:30:42.000Z",
    "id": "3r3gcBYguQQhyQqU",
    "name": "[MauticxZendesk] Formularios de triagem",
    "active": true,
    "nodes": [
      {
        "parameters": {},
        "name": "Start",
        "type": "n8n-nodes-base.start",
        "typeVersion": 1,
        "position": [
          80,
          2520
        ],
        "id": "0af36d1c-f730-469d-acf8-a6be8dd8b831"
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "mda-forms",
          "options": {}
        },
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          0,
          2240
        ],
        "webhookId": "de99fdcb-9018-4494-9abb-259194d5ad21",
        "id": "c9a06fd5-fc7c-421a-ad5c-c7dd2a9b0d40"
      },
      {
        "parameters": {
          "value1": "={{$node[\"Item Lists\"].json[\"submission\"][\"form\"][\"id\"]}}",
          "rules": {
            "rules": [
              {
                "operation": "equal",
                "value2": 21
              },
              {
                "operation": "equal",
                "value2": 20,
                "output": 1
              },
              {
                "operation": "equal",
                "value2": 22,
                "output": 2
              },
              {
                "operation": "equal",
                "value2": 23,
                "output": 3
              }
            ]
          }
        },
        "name": "Switch",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 1,
        "position": [
          900,
          2200
        ],
        "id": "eb78b07f-f6f0-4f93-bcc8-2e434cc1801d"
      },
      {
        "parameters": {
          "fieldToSplitOut": "[\"body\"][\"mautic.form_on_submit\"]",
          "options": {}
        },
        "name": "Item Lists",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          220,
          2240
        ],
        "id": "dc717fe9-ccae-4081-9bc5-4fbc77a574d3"
      },
      {
        "parameters": {
          "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nfor (item of items) {\n  \n  var dados_voluntaria = {  \n    nome: item.json.submission.results[\"1_nome_completo\"],\n    email: item.json.submission.results[\"2_email_de_cadastro1\"],\n    whatsapp: item.json.submission.results[\"3_whatsapp\"]\n  };\n\n  var criterios_projeto ={\n    e_maior_18: item.json.submission.results[\"4_a_acolhida_e_maior_de_1\"],\n    reside_no_brasil: item.json.submission.results[\"5_a_acolhida_reside_no_br\"],\n    brasileira: item.json.submission.results[\"6_a_acolhida_e_brasileira\"],\n    situacao_de_violencia: item.json.submission.results[\"7_a_acolhida_passou_ou_es\"],\n    periodo: item.json.submission.results[\"9_por_qual_periodo_de_tem\"],\n    tipos_de_violencia:item.json.submission.results[\"8_quais_os_tipos_de_viole\"],\n    autor_da_violencia: item.json.submission.results[\"10_quem_e_oa_autora_da_vi\"],\n    situacao_vulnerabilidade_baixa_renda: item.json.submission.results[\"11_a_acolhida_esta_em_sit\"]\n  };\n\n  var dados_acolhida = {\n\n    nome: item.json.submission.results[\"12_nome_da_acolhida\"],\n    data_de_nascimento: item.json.submission.results[\"13_data_de_nascimento_da\"],\n    regime_de_trabalho: item.json.submission.results[\"14_qual_o_regime_de_traba\"],\n    renda_individual: item.json.submission.results[\"15_assinale_a_opcao_que_c\"],\n    tem_independencia_financeira: item.json.submission.results[\"16_a_acolhida_tem_indepen\"],\n    tem_cadunico: item.json.submission.results[\"17_a_acolhida_esta_inscri\"],\n    recebe_algum_beneficio: item.json.submission.results[\"18_atualmente_a_acolhida\"],\n    responsavel_financeiramente: item.json.submission.results[\"19_a_acolhida_e_responsav\"],\n    divide_responsabilidade_com: item.json.submission.results[\"20_caso_tenha_respondido\"],\n    tem_dependentes_financeiros: item.json.submission.results[\"21_a_acolhida_tem_pessoas\"],\n    quantidade_de_dependentes: item.json.submission.results[\"22_caso_tenha_respondido\"] === \"\"? \"0\": item.json.submission.results[\"22_caso_tenha_respondido\"]\n    \n  }\n\n  var moradia = {\n\n    situacao_moradia: item.json.submission.results[\"23_qual_a_situacao_de_mor\"],\n    cedida_por: item.json.submission.results[\"24_caso_tenha_respondido\"],\n    reside_com_o_autor_da_viloencia: item.json.submission.results[\"25_a_acolhida_reside_com\"],\n    sente_seguram_em_casa: item.json.submission.results[\"26_a_acolhida_se_sente_se\"],\n    situacao_de_carcere: item.json.submission.results[\"27_a_acolhida_vive_em_sit\"]\n  } \n\n  //Determina risco do caso\n  var risco = 'nenhum'\n  item.json.priority = 'low'\n  if(moradia.situacao_de_carcere === 'Sim') {\n    item.json.priority = 'urgent'  \n    risco = 'extremo'\n  }\n\n  var servico_publico = {\n    \n    conhece_redes_de_atendimento: item.json.submission.results[\"28_a_acolhida_conhece_a_r\"],\n    quais_redes_de_atendimento_conhece: item.json.submission.results[\"29_se_sim_assinale_qualqu\"],\n    atentendida_em_servico_publico: item.json.submission.results[\"30_a_acolhida_esta_em_ate\"],\n    quais_servicos_publicos_atentida: item.json.submission.results[\"31_se_sim_assinale_qualqu\"]\n  }\n\n  var processo_psicoterapeutico = {\n\n    demanda_inicial: item.json.submission.results[\"32_descreva_resumidamente\"],\n    encaminhamento: item.json.submission.results[\"33_encaminhamentos_do_cas\"],\n    qual_servico_publico: item.json.submission.results[\"34_caso_tenha_assinalado\"]\n  }\n  item.json.answers = {dados_voluntaria,criterios_projeto, dados_acolhida, moradia, servico_publico, processo_psicoterapeutico, risco: risco}\n  \n  item.json.answers_txt = JSON.stringify(item.json.answers).replaceAll('Sim',true).replaceAll(\"Não\",false);\n  item.json.answers_txt = item.json.answers_txt.replaceAll(\"false \", \"Não \").replaceAll(\"false.\",\"Não.\");\n  item.json.answers_txt = item.json.answers_txt.replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false');\n  let data = new Date(item.json.submission.results[\"13_data_de_nascimento_da\"]);\n  item.json.answers.dados_acolhida.data_de_nascimento_br =   ((data.getDate() )) + \"/\" + ((data.getMonth() + 1)) + \"/\" + data.getFullYear(); ;\n\n  item.json.answers.risco = item.json.answers.risco.toUpperCase();\n}\nreturn items; "
        },
        "name": "Formata - Triagem Pscologo 1",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1260,
          1900
        ],
        "id": "c18b61f7-3989-4d67-a772-5309deb38c94"
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\n  insert_mda_forms_answers(objects: {answers: $answers, form: \"triagem-psicologico-1\", msr_name: \"{{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (triagem psi 1)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_voluntaria\"][\"email\"]}}\",organization_id:360282119532, form_id:{{$node[\"Formata - Triagem Pscologo 1\"].json[\"submission\"][\"form\"][\"id\"]}}\n}) {\n    affected_rows\n  }\n}",
          "variables": "={\n\"answers\": {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          1680,
          1900
        ],
        "id": "66877894-059c-426b-85de-a3365ed1cef7",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\n  insert_mda_forms_answers(objects: {answers: $answers, form: \"triagem-juridico-1\", msr_name: \"{{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (triagem jur 1)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_voluntaria\"][\"email\"]}}\", organization_id:360269610652, form_id:{{$node[\"Formata - Triagem Jurídico 1\"].json[\"submission\"][\"form\"][\"id\"]}}\n}) {\n    affected_rows\n  }\n}",
          "variables": "={\n\"answers\": {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas1",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          1680,
          2080
        ],
        "id": "f7ed0821-5022-4fda-b563-1b55b92d18db",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nfor (item of items) {\n  var dados_voluntaria = { \n    nome: item.json.submission.results[\"1_nome_completo\"],\n    email: item.json.submission.results[\"2_email_de_cadastro1\"],\n    whatsapp: item.json.submission.results[\"3_whatsapp\"]\n    };\n  \n  \n  var criterios_projeto = {\n    maior_de_18: item.json.submission.results[\"4_a_acolhida_e_maior_de_1\"],\n    reside_no_brasil: item.json.submission.results[\"5_a_acolhida_reside_no_br\"],\n    brasileira: item.json.submission.results[\"6_a_acolhida_e_brasileira\"],\n    situacao_de_violencia: item.json.submission.results[\"7_a_acolhida_passou_ou_es\"],\n    periodo: item.json.submission.results[\"9_por_qual_periodo_de_tem\"],\n    tipos_de_violencia:item.json.submission.results[\"8_quais_os_tipos_de_viole\"],\n    autor_da_violencia: item.json.submission.results[\"10_quem_e_oa_autora_da_vi\"],\n    situacao_vulnerabilidade_baixa_renda: item.json.submission.results[\"11_a_acolhida_esta_em_sit\"],\n    atendida_denfensoria_publica: item.json.submission.results[\"12_a_acolhida_esta_recebe\"],\n    atendida_advogada_particular: item.json.submission.results[\"13_a_acolhida_esta_recebe\"]\n  }\n\n  \n  \n  var dados_acolhida = {\n\n    nome: item.json.submission.results[\"14_nome_da_acolhida\"],\n    data_de_nascimento: item.json.submission.results[\"15_data_de_nascimento\"],\n    regime_de_trabalho: item.json.submission.results[\"16_qual_o_regime_de_traba\"],\n    renda_individual: item.json.submission.results[\"17_assinale_a_opcao_que_c\"],\n    tem_independencia_financeira: item.json.submission.results[\"18_a_acolhida_tem_indepen\"],\n    tem_cadunico: item.json.submission.results[\"19_a_acolhida_esta_inscri\"],\n    recebe_algum_beneficio: item.json.submission.results[\"20_atualmente_a_acolhida\"],\n    responsavel_financeiramente: item.json.submission.results[\"21_a_acolhida_e_responsav\"],\n    divide_responsabilidade_com: item.json.submission.results[\"22_caso_tenha_respondido\"],\n    tem_dependentes_financeiros: item.json.submission.results[\"23_a_acolhida_tem_pessoas\"],\n    quantidade_de_dependentes: item.json.submission.results[\"24_caso_tenha_respondido\"] === \"\"? \"0\":item.json.submission.results[\"24_caso_tenha_respondido\"],\n    recebe_pensao_alimenticia: item.json.submission.results[\"25_a_acolhida_recebe_pens\"]\n  } \n  var moradia = {\n\n    situacao_moradia: item.json.submission.results[\"26_qual_a_situacao_de_mor\"],\n    cedida_por: item.json.submission.results[\"27_caso_tenha_respondido\"],\n    reside_com_o_autor_da_viloencia: item.json.submission.results[\"28_a_acolhida_reside_com\"],\n    sente_segura_em_casa: item.json.submission.results[\"29_a_acolhida_se_sente_se\"],\n    situacao_de_carcere: item.json.submission.results[\"30_a_acolhida_vive_em_sit\"]\n  } \n \n  //Determina risco do caso\n  var risco = 'nenhum'\n  item.json.priority = 'low'\n  if(moradia.situacao_de_carcere === 'Sim') {\n    item.json.priority = 'urgent'  \n    risco = 'extremo'\n  }\n\n  var servico_publico = {\n    \n    conhece_redes_de_atendimento: item.json.submission.results[\"31_a_acolhida_conhece_a_r\"],\n    quais_redes_de_atendimento_conhece: item.json.submission.results[\"32_se_sim_assinale_qualqu\"],\n    atentendida_em_servico_publico: item.json.submission.results[\"33_a_acolhida_esta_em_ate\"],\n    quais_servicos_publicos_atentida: item.json.submission.results[\"34_se_sim_assinale_qualqu\"]  \n  }\n\n  var processo_juridico = {\n    areas_direito_demanda_se_enquadra: item.json.submission.results[\"35_em_qualis_areas_do_dir\"],\n    demanda_inicial: item.json.submission.results[\"36_descreva_resumidamente\"],\n    encaminhamento: item.json.submission.results[\"37_encaminhamentos_do_cas\"],\n    servicos_indicados: item.json.submission.results[\"38_caso_tenha_assinalado\"]\n    \n  }\n  item.json.answers = {dados_voluntaria,criterios_projeto, dados_acolhida, moradia, servico_publico, processo_juridico, risco: risco}\n  item.json.answers_txt = JSON.stringify(item.json.answers).replaceAll('Sim',true).replaceAll(\"Não\",false);\n  //item.json.answers_txt = item.json.answers_txt.replaceAl(\"false se enquadra no perfil\", \"Não se enquadra no perfil\").replaceAll(\"false conhece\",\"Não conhece\").replaceAll(\"false se aplica\",\"Não se aplica\")\n  item.json.answers_txt = item.json.answers_txt.replaceAll(\"false \", \"Não \").replaceAll(\"false.\",\"Não.\");\n  item.json.answers_txt = item.json.answers_txt.replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n  let data = new Date(item.json.submission.results[\"15_data_de_nascimento\"]);\n  item.json.answers.dados_acolhida.data_de_nascimento_br =   ((data.getDate() )) + \"/\" + ((data.getMonth() + 1)) + \"/\" + data.getFullYear(); \n\n  item.json.answers.risco = item.json.answers.risco.toUpperCase();\n}\nconsole.log('Done!');\n\nreturn items; "
        },
        "name": "Formata - Triagem Jurídico 1",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1260,
          2080
        ],
        "id": "442e3b10-dc35-4a20-b9c1-d5198d51e129"
      },
      {
        "parameters": {
          "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nfor (item of items) {\n  var results = item.json.submission.results;\n  \n  Object.keys(results).forEach(key => {\n    if (results[key] === \"\" || results[key] === null) {\n      delete results[key];\n      }\n  });\n  let risco = 'nenhum';\n  let priority = 'low';\n  var dados_voluntaria = {\n\t  nome: results[\"1_nome_completo\"],\n\t  email: results[\"2_email_de_cadastro1\"],\n  }\n  var dados_acolhida = {\n    nome: results[\"3_nome_da_acolhida\"],\n    data_de_nascimento: results[\"4_data_de_nascimento_da_a\"],\n    identidade_racial: results[\"5_como_a_acolhida_se_auto\"],\n    identidade_genero:results[\"6_qual_a_identidade_de_ge\"],\n    deficiencia:results[\"informe_aqui_qual_ou_quai\"],\n    pcd:results[\"7_a_acolhida_tem_alguma_d\"],\n    regime_de_bens:results[\"81_caso_se_aplique_qual_o\"],\n    estado_civil:results[\"8_qual_o_estado_civil_da\"],\n    filhos_faixa_etaria:results[\"91_selecione_em_qual_faix1\"],\n    filhos_pcd: results[\"92_algum_dos_filhos_e_pes1\"],\n    deficiencia_filhos:results[\"93_caso_tenha_respondido1\"],\n    tem_filhos:results[\"9_a_acolhida_tem_filhasos\"],\n    gravida_ou_tem_recem_nascido: results[\"10_a_acolhida_esta_gravid\"],\n  }\n\n  let data = new Date(results[\"4_data_de_nascimento_da_a\"]);\n  let data_de_nascimento_br =   ((data.getDate() )) + \"/\" + ((data.getMonth() + 1)) + \"/\" + data.getFullYear();\n  \n  var aspectos_socioeconomicos = {\n    escolaridade: results[\"11_qual_a_escolaridade_da\"],\n  }\n\n  var moradia = {\n    local_de_risco: results[\"12_a_acolhida_considera_q\"],\n  }\n\n  var historico_violencia = {\n    tipos_violencia: results[\"13_tipos_de_violencia_que\"],\n    violencia_fisica_grave: results[\"14_oa_autora_da_violencia\"],\n    violencia_fisica_extrema: results[\"15_oa_autora_da_violencia\"],\n    se_sente_isolada: results[\"16_a_acolhida_se_sente_is\"],\n    autor_tem_acesso_arma_fogo: results[\"17_oa_autora_da_violencia\"],\n    como_ameacou: results[\"181_como\"],\n    autor_ameacou_familiar: results[\"18_oa_autora_da_violencia\"],\n    autor_obrigou_ato_sexual:results[\"19_oa_autora_da_violencia\"],\n    violencia_durante_gravidez:results[\"20_caso_se_aplique_a_acol\"],\n    autor_comportamentos_abusivos:results[\"21_oa_autora_da_violencia\"],\n    acolhida_atendimento_medico:results[\"22_a_acolhida_necessitou\"],\n    acolhida_teve_interrese_em_separar: results[\"23_caso_se_aplique_a_acol\"],\n    acolhida_tem_dependencia_emocional: results[\"24_a_acolhida_apresenta_d\"],\n    frequencia_violencia_aumentou: results[\"25_as_agressoes_ou_ameaca\"],\n    autor_agrediu_outras_pessoas: results[\"26_oa_autora_da_violencia\"],\n  }\n\n  var autor_da_violencia = {\n    quais_dominios: results[\"271_selecione_as_opcaooes\"],\n    tem_dominio: results[\"27_oa_autora_da_violencia\"],\n    usa_substancias_psicoativas: results[\"28_oa_autora_da_violencia\"],\n    quais_substancias: results[\"281_informe_aqui_qual_ou\"],\n    diagnostico_doenca_psiquiatrica: results[\"29_oa_autora_da_violencia\"],\n  }\n\n  var servico_publico = {\n    acolhida_criticou_servicos_publicos: results[\"30_a_acolhida_ja_manifest\"],\n    quais_servicos_publicos: results[\"301_sobre_quais_servicos\"],\n  }\n\n  var processo_juridico = {\n    objetivo_da_demanda: results[\"31_qual_o_objeto_das_dema\"],\n    lei_maria_da_penha: results[\"32_a_demanda_da_acolhida\"],\n    forma_de_viloencia: results[\"321_em_qual_forma_de_viol\"],\n    lei_que_se_enquadra: results[\"321_entao_em_qualis_outra\"],\n    resumo_demanda: results[\"33_descreva_resumidamente\"],\n    encaminhamento: results[\"34_encaminhamento_do_caso\"],\n  }\n  var contato_contrato_com_acolhida = {\n    inicio_atendimento: results[\"35_data_do_inicio_do_aten\"],\n    contrato_pro_bono: results[\"36_voce_estabeleceu_um_co\"],\n    horas_atendimento_por_semana: results[\"37_quantas_horas_de_atend\"],\n    qual_fluxo_comunicao: results[\"38_voce_e_a_acolhida_esta\"],\n    frequencia_comunicacao: results[\"381_voces_acordaram_uma_f\"],\n    forma_segura_contato_com_acolhida: results[\"39_formas_mais_seguras_de\"],\n  }\n  data = new Date(results[\"35_data_do_inicio_do_aten\"]);\n  let inicio_atendimento_br =   ((data.getDate() )) + \"/\" + ((data.getMonth() + 1)) + \"/\" + data.getFullYear();\n  \n  var assistencia_psicologica = {\n    tem_acompanhamento_psicologico: results[\"40_a_acolhida_esta_em_aco\"],\n    via_mapa_do_acolhimento: results[\"401_esse_acompanhamento_e\"],\n    entrou_em_contato_com_psicologa: results[\"402_voce_profissional_adv\"]\n  }\n\n  //risco moderado \n  if(moradia.local_de_risco === 'Sim' || autor_da_violencia.tem_dominio === 'Sim'){\n    risco = 'moderado'\n    priority = 'normal'\n  }\n  //risco grave\n  if (dados_acolhida.pcd === 'Sim' || \n      dados_acolhida.filhos_pcd === 'Sim' || \n      dados_acolhida.gravida_ou_tem_recem_nascido === 'Sim' || \n      historico_violencia.violencia_fisica_grave !== 'Nenhuma agressão física' ||\n      historico_violencia.autor_obrigou_ato_sexual === 'Sim' || \n      historico_violencia.violencia_durante_gravidez === 'Sim' ||\n      historico_violencia.acolhida_atendimento_medico.includes('Sim') || \n      historico_violencia.frequencia_violencia_aumentou === 'Sim' ||\n      autor_da_violencia.usa_substancias_psicoativas === 'Sim' ||\n      autor_da_violencia.diagnostico_doenca_psiquiatrica === 'Sim'){\n  \n   risco = 'grave'\n   priority = 'high'\n  }\n\n  //risco extremo \n  if (historico_violencia.violencia_fisica_extrema !== 'Nenhuma agressão física' ||\n      historico_violencia.autor_tem_acesso_arma_fogo === 'Sim' ||\n      historico_violencia.autor_ameacou_familiar === 'Sim' ||\n      historico_violencia.autor_comportamentos_abusivos || \n      historico_violencia.autor_agrediu_outras_pessoas.includes('Sim') ){\n    risco = 'extremo'\n    priority = 'urgent'\n  }\n  item.json.priority = priority;\n  item.json.answers = { dados_voluntaria,dados_acolhida,aspectos_socioeconomicos,moradia,historico_violencia,autor_da_violencia,servico_publico,processo_juridico,contato_contrato_com_acolhida,assistencia_psicologica, risco: risco}\n  \n  item.json.body_ticket = 'RISCO: ' + risco.toUpperCase() + '\\\\n\\\\nDADOS VOLUNTARIA\\\\nNome: '+ dados_voluntaria.nome + '\\\\nemail: ' + dados_voluntaria.email +\n  '\\\\n\\\\nDADOS ACOLHIDA\\\\nNome: ' + dados_acolhida.nome+ '\\\\nData de nascimento: ' + data_de_nascimento_br + \n  '\\\\nIdentidade racial: ' + dados_acolhida.identidade_racial + '\\\\nIdentidade de genero: ' + dados_acolhida.identidade_genero +\n  '\\\\nÉ uma pessoa com deficiência: ' + dados_acolhida.pcd + \n  //codicao pcd\n  (dados_acolhida.pcd.toUpperCase() === 'SIM' ? '\\\\nQual deficiencia: ' + dados_acolhida.deficiencia : '') +\n  '\\\\nEstado cívil: ' + dados_acolhida.estado_civil + \n  //condicao estado civil\n  (dados_acolhida.estado_civil === 'Solteira'? '' : '\\\\nRegime de bens: ' + dados_acolhida.regime_de_bens) + '\\\\nTem filhos: ' + dados_acolhida.tem_filhos +\n  //condicao filhos\n  (dados_acolhida.tem_filhos === 'Sim'? '\\\\nFaixa etaria dos filhos(as): ' + dados_acolhida.filhos_faixa_etaria + '\\\\nAlgum dos filhos tem difciência: ' + dados_acolhida.filhos_pcd + \n  //condicao filhos pcd\n  (dados_acolhida.filhos_pcd === 'Sim' ?  '\\\\nDeficiencia do filho: ' + dados_acolhida.deficiencia_filhos: '') : '') +\n  '\\\\nGravida ou esteve grávida nos últimos 18 meses: ' + dados_acolhida.gravida_ou_tem_recem_nascido +\n  '\\\\n\\\\nASPECTOS SOCIOECONÔMICOS\\\\nEscolaridade: ' + aspectos_socioeconomicos.escolaridade +\n  '\\\\n\\\\nMORADIA\\\\nConsidera que mora num local com risco de violência: ' + moradia.local_de_risco + \n  '\\\\n\\\\nHISTÓRICO DE VIOLÊNCIA\\\\nTipos de violência: ' + historico_violencia.tipos_violencia + '\\\\nTipos de viloencia física (grave): ' + historico_violencia.violencia_fisica_grave +\n  '\\\\nTipos de viloencia física (extrema): ' + historico_violencia.violencia_fisica_extrema + '\\\\nSe sente isolada: ' + historico_violencia.se_sente_isolada +\n  '\\\\nO autor da violência tem acesso a uma arma fogo: ' + historico_violencia.autor_tem_acesso_arma_fogo +  \n  '\\\\nO autor da violência já ameaçou algum familiar: ' + historico_violencia.autor_ameacou_familiar +\n  //condicao ja ameacou \n  (historico_violencia.autor_ameacou_familiar === 'Sim'? '\\\\nComo ameaçou: ' + historico_violencia.como_ameacou : '') +\n  '\\\\nO autor da violência obrigou a acolhida a ter relações sexuais ou praticar atos sexuais: ' + historico_violencia.autor_obrigou_ato_sexual + \n  '\\\\nA acolhida sofreu algum tipo de violência durante a gravidez ou nos três meses posteriores ao parto: ' + historico_violencia.violencia_durante_gravidez +\n  '\\\\nO autor da violência teve algum destes comportamentos com a acolhida: ' + historico_violencia.autor_comportamentos_abusivos +\n  '\\\\nA acolhida necessitou de atendimento médico e/ou internação: ' + historico_violencia.acolhida_atendimento_medico +\n  '\\\\nA acolhida se separou ou teve interrese em separar: ' + historico_violencia.acolhida_teve_interrese_em_separar + \n  '\\\\nA acolhida apresenta dependência emocional do autor da violência: ' + historico_violencia.acolhida_tem_dependencia_emocional +\n  '\\\\nAs agressões ou ameaças do autor da violência contra a acolhida se tornaram mais frequentes ou mais graves nos últimos meses: ' + historico_violencia.frequencia_violencia_aumentou +\n  '\\\\nO autor da violência já ameaçou ou agrediu outras pessoas ou animais: ' + historico_violencia.autor_agrediu_outras_pessoas +\n  '\\\\n\\\\nSOBRE O(A) AUTOR(A) DA VIOLÊNCIA\\\\nTem domínio/poder social e/ou financeiro sobre a acolhida: ' + autor_da_violencia.tem_dominio +\n  //condicao dominio socila/financeiro\n  (autor_da_violencia.tem_dominio === 'Sim'? '\\\\nQuais dominios/poderes: ' + autor_da_violencia.quais_dominios : '') +\n  '\\\\nFaz uso de substâncias psicoativas: ' + autor_da_violencia.usa_substancias_psicoativas +\n  //condicao uso substancias\n  (autor_da_violencia.usa_substancias_psicoativas === 'Sim'? '\\\\nQuais substâncias psicoativas: ' + autor_da_violencia.quais_substancias : '') +\n  '\\\\nTem algum diagnóstico (verbal ou laudo) de doença psiquiátrica: ' +  autor_da_violencia.diagnostico_doenca_psiquiatrica +\n  '\\\\n\\\\nSERVIÇO PÚBLICO\\\\nA acolhida já manifestou alguma resistência, má experiência ou estranhamento sobre o atendimento em serviços públicos: ' + servico_publico.acolhida_criticou_servicos_publicos +\n  //condicao servicao publicos\n  (servico_publico.acolhida_criticou_servicos_publicos === 'Sim'? '\\\\nQuais serviços públicos: ' + servico_publico.quais_servicos_publicos : '') +\n  '\\\\n\\\\nPROCESSO JURÍDICO\\\\nObjetivo da demanda: '  + processo_juridico.objetivo_da_demanda + '\\\\nSe enquadra na lei Maria da Penha: ' +  processo_juridico.lei_maria_da_penha +\n  //condicao lei maria da penha \n  (processo_juridico.lei_maria_da_penha === 'Sim'? '\\\\nQual forma de violência se enquadra na lei Maria da Penha: ' + processo_juridico.forma_de_viloencia : \n   '\\\\nEm qual lei_que se enquadra: ' + processo_juridico.lei_que_se_enquadra) +\n  '\\\\nResumo da demanda: ' + processo_juridico.resumo_demanda + '\\\\nEncaminhamento: ' + processo_juridico.encaminhamento +\n  '\\\\n\\\\nCONTATRO E CONTRATO COM A ACOLHIDA\\\\nData do inicio do atendimento: ' + inicio_atendimento_br + \n  '\\\\nEstabeleceu um contrato de serviços pro bono: ' + contato_contrato_com_acolhida.contrato_pro_bono +\n  '\\\\nHoras de atendimento por semana: ' + contato_contrato_com_acolhida.horas_atendimento_por_semana +\n  '\\\\nEstabeleceram um tipo de fluxo de comunição: ' + contato_contrato_com_acolhida.qual_fluxo_comunicao +\n  //condicao fluxo de comunicacao\n  (contato_contrato_com_acolhida.qual_fluxo_comunicao.includes('Sim')? '\\\\nFoi estabelecida uma frequência de comunicacao: ' + contato_contrato_com_acolhida.frequencia_comunicacao : '') +\n  '\\\\nQual a forma segura de entrar em contato com a acolhida: ' + contato_contrato_com_acolhida.forma_segura_contato_com_acolhida +\n  '\\\\n\\\\nASSISTÊNCIA PSICOLÓGICA\\\\nA acolhida está em acompanhamento psicológico: ' + assistencia_psicologica.tem_acompanhamento_psicologico +\n  //condica tem acompanhamento\n  (assistencia_psicologica.tem_acompanhamento_psicologico === 'Sim'? '\\\\nIntermediado pelo Mapa do Acolhimento: ' + assistencia_psicologica.via_mapa_do_acolhimento +\n  '\\\\nA voluntária entrou em contato com a psicologa: ' + assistencia_psicologica.entrou_em_contato_com_psicologa : '')\n  \n  dados_acolhida.deficiencia = dados_acolhida.deficiencia?.replaceAll('Deficiência ','');\n  dados_acolhida.deficiencia_filhos = dados_acolhida.deficiencia_filhos?.replaceAll('Deficiência ','');\n  historico_violencia.como_ameacou = historico_violencia.como_ameacou?.replaceAll('Utilizando ','');\n  historico_violencia.acolhida_atendimento_medico = historico_violencia.acolhida_atendimento_medico?.replaceAll('Sim, ', '');\n  historico_violencia.autor_ameacou_familiar = historico_violencia.autor_ameacou_familiar?.replaceAll('Sim, ', ''); \n  historico_violencia.autor_agrediu_outras_pessoas = historico_violencia.autor_agrediu_outras_pessoas?.replaceAll('Sim, ', ''); \n  historico_violencia.acolhida_tem_dependencia_emocional = historico_violencia.acolhida_tem_dependencia_emocional.replace('Sim', true).replace('Não', false)\n  historico_violencia.violencia_durante_gravidez = historico_violencia.violencia_durante_gravidez?.replace('Sim', true).replace('Não', false);\n  processo_juridico.forma_de_viloencia = processo_juridico.forma_de_viloencia?.replaceAll('Violência ',''); \n  contato_contrato_com_acolhida.qual_fluxo_comunicao = contato_contrato_com_acolhida.qual_fluxo_comunicao\n                                                        .replaceAll('Sim, pelo WhatsApp', 'whatsapp')\n                                                        .replaceAll('Sim, por ligação telefônica', 'ligação telefônica')\n                                                        .replaceAll('Não, a comunicação se dará por livre demanda', 'livre')\n  item.json.answers_txt = '\"dados_voluntaria\": ' + JSON.stringify(dados_voluntaria)\n  item.json.answers_txt = item.json.answers_txt + ', \"dados_acolhida\":'+JSON.stringify(dados_acolhida).replaceAll('Sim', true).replaceAll('Não', false) ; \n  item.json.answers_txt =  item.json.answers_txt + ', \"moradia\":' + JSON.stringify(moradia).replaceAll('Sim', true).replaceAll('Não', false) ; \n  historico_violencia.se_sente_isolada = historico_violencia.se_sente_isolada?.replace('Sim', true).replace('Não', false);\n  historico_violencia.autor_tem_acesso_arma_fogo = historico_violencia.autor_tem_acesso_arma_fogo?.replace('Sim', true).replace('Não', false);\n  historico_violencia.autor_ameacou_familiar = historico_violencia.autor_ameacou_familiar?.replace('Sim', true).replace('Não', false);\n  historico_violencia.autor_obrigou_ato_sexual = historico_violencia.autor_obrigou_ato_sexual?.replace('Sim', true).replace('Não', false);\n  historico_violencia.acolhida_teve_interrese_em_separar = historico_violencia.acolhida_teve_interrese_em_separar?.replace('Sim', true).replace('Não', false);\n  historico_violencia.frequencia_violencia_aumentou = historico_violencia.frequencia_violencia_aumentou?.replace('Sim', true).replace('Não', false);\n  servico_publico.acolhida_criticou_servicos_publicos = servico_publico.acolhida_criticou_servicos_publicos?.replaceAll('Sim', true).replaceAll('Não',false); \n  processo_juridico.lei_maria_da_penha = processo_juridico.lei_maria_da_penha?.replaceAll('Sim',true).replaceAll('Não',false);\n  autor_da_violencia.tem_dominio = autor_da_violencia.tem_dominio.replaceAll('Sim', true).replaceAll('Não',false);\n  autor_da_violencia.usa_substancias_psicoativas = autor_da_violencia.usa_substancias_psicoativas.replaceAll('Sim', true).replaceAll('Não',false);\n  autor_da_violencia.diagnostico_doenca_psiquiatrica = autor_da_violencia.diagnostico_doenca_psiquiatrica.replaceAll('Sim', true).replaceAll('Não',false);\n\n  item.json.answers_txt = '{' + item.json.answers_txt + ',\"historico_violencia\":' + JSON.stringify(historico_violencia) + \n                          ', \"autor_da_violencia\": ' +  JSON.stringify(autor_da_violencia) + \n                          ', \"servico_publico\":' + JSON.stringify(servico_publico) + \n                          ', \"aspectos_socioeconomicos\":' + JSON.stringify(aspectos_socioeconomicos) +\n                          ', \"processo_juridico\":' + JSON.stringify(processo_juridico) +\n                          ', \"contato_contrato_com_acolhida\":' + JSON.stringify(contato_contrato_com_acolhida).replaceAll('Sim', true).replaceAll('Não', false) + \n                          ', \"assistencia_psicologica\":' + JSON.stringify(assistencia_psicologica).replaceAll('Sim', true).replaceAll('Não', false) + ', \"risco\": \"' + risco + '\"}'\n  item.json.answers_txt = item.json.answers_txt.replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n}\n\n\n// You can write logs to the browser console\nconsole.log('Done!');\n\nreturn items;"
        },
        "id": "6c3521ed-1fa3-4257-96ce-ed42de2c7cb5",
        "name": "Formata - Triagem Juridico 2",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1260,
          2260
        ]
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\n  insert_mda_forms_answers(objects: {answers: $answers, form: \"triagem-juridico-2\", msr_name: \"{{$node[\"Formata - Triagem Juridico 2\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id:{{$node[\"Criar novo ticket (triagem jur 2)\"].json[\"ticket\"][\"id\"]}} , volunteer_email: \"{{$node[\"Formata - Triagem Juridico 2\"].json[\"answers\"][\"dados_voluntaria\"][\"email\"]}}\", organization_id:360269610652, form_id:{{$node[\"Formata - Triagem Juridico 2\"].json[\"submission\"][\"form\"][\"id\"]}}\n}) {\n    affected_rows\n  }\n}",
          "variables": "={\n\"answers\": {{$node[\"Formata - Triagem Juridico 2\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas2",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          1680,
          2260
        ],
        "id": "10b83196-f22b-42dd-b442-8b329528bcfe",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nfor (item of items) {\n  var results = item.json.submission.results;\n  \n  Object.keys(results).forEach(key => {\n    if (results[key] === \"\" || results[key] === null) {\n      delete results[key];\n      }\n  });\n  \n  let risco = 'nenhum';\n  let priority = 'low';\n  var dados_voluntaria = {\n\t  nome: results[\"1_nome_completo\"],\n\t  email: results[\"2_email_de_cadastro1\"],\n  }\n  var dados_acolhida = {\n    nome: results[\"3_nome_da_acolhida\"],\n    data_de_nascimento: results[\"4_data_de_nascimento_da_a\"],\n    identidade_racial: results[\"5_como_a_acolhida_se_auto1\"],\n    identidade_genero:results[\"6_qual_a_identidade_de_ge1\"],\n    pcd:results[\"7_a_acolhida_tem_alguma_d\"],\n    deficiencia:results[\"71_informe_aqui_qual_ou_q\"],\n    estado_civil:results[\"8_qual_o_estado_civil_da\"],\n    tem_filhos:results[\"9_a_acolhida_tem_filhasos\"],\n    filhos_faixa_etaria:results[\"91_selecione_em_qual_faix1\"],\n    filhos_pcd: results[\"92_algum_dos_filhos_e_pes1\"],\n    deficiencia_filhos:results[\"93_caso_tenha_respondido\"],\n    gravida_ou_tem_recem_nascido: results[\"10_a_acolhida_esta_gravid\"],\n  }\n  \n  let data = new Date(results[\"4_data_de_nascimento_da_a\"]);\n  let data_de_nascimento_br =   ((data.getDate() )) + \"/\" + ((data.getMonth() + 1)) + \"/\" + data.getFullYear();\n  \n  var aspectos_socioeconomicos = {\n    escolaridade: results[\"11_qual_a_escolaridade_da\"],\n  }\n\n  var moradia = {\n    local_de_risco: results[\"12_a_acolhida_considera_q\"],\n  }\n\n  var qualidade_de_vida = {\n    impacto_sofrido_moderado: results[\"13_quais_impactos_a_acolh\"],\n    impacto_sofrido_grave: results[\"14_quais_impactos_a_acolh\"]\n  } \n\n  var historico_viloencia = {\n    tipos_violencia: results[\"15_tipos_de_violencia_que\"],\n    violencia_fisica_grave: results[\"16_oa_autora_da_violencia\"],\n    violencia_fisica_extrema: results[\"17_oa_autora_da_violencia\"],\n    se_sente_isolada: results[\"18_a_acolhida_se_sente_is\"],\n    autor_tem_acesso_arma_fogo: results[\"19_oa_autora_da_violencia\"],\n    autor_ameacou_familiar: results[\"20_oa_autora_da_violencia\"],\n    como_ameacou: results[\"201_como\"],\n    autor_obrigou_ato_sexual:results[\"21_oa_autora_da_violencia\"],\n    violencia_durante_gravidez:results[\"22_caso_se_aplique_a_acol\"],\n    autor_comportamentos_abusivos:results[\"23_oa_autora_da_violencia\"],\n    acolhida_atendimento_medico:results[\"24_a_acolhida_necessitou\"],\n    acolhida_teve_interrese_em_separar: results[\"25_caso_se_aplique_a_acol\"],\n    acolhida_tem_dependencia_emocional: results[\"26_a_acolhida_apresenta_d\"],\n    frequencia_violencia_aumentou: results[\"27_as_agressoes_ou_ameaca\"],\n    autor_agrediu_outras_pessoas: results[\"28_oa_autora_da_violencia\"],\n    quem_o_autor_agrediu: results[\"281_qualis_outros_familia\"]\n  }\n\n  var autor_da_violencia = {\n    tem_dominio: results[\"29_oa_autora_da_violencia\"],\n    quais_dominios: results[\"291_selecione_as_opcaooes\"],\n    usa_substancias_psicoativas: results[\"30_oa_autora_da_violencia\"],\n    quais_substancias: results[\"301_informe_qual_ou_quais\"],\n    diagnostico_doenca_psiquiatrica: results[\"31_oa_autora_da_violencia\"],\n  }\n\n  var servico_publico = {\n    acolhida_criticou_servicos_publicos: results[\"32_a_acolhida_ja_manifest\"],\n    quais_servicos_publicos: results[\"321_sobre_quais_servicos\"],\n  }\n\n  var processo_psicoterapeutico = {\n    resumo_demanda: results[\"33_descreva_resumidamente\"],\n    encaminhamento: results[\"34_encaminhamento_do_caso\"],\n    \n  }\n  var contato_contrato_com_acolhida = {\n    inicio_atendimento: results[\"35_data_do_inicio_do_aten\"],\n    frequencia_atendimento: results[\"37_qual_a_frequencia_do_a\"],\n    forma_segura_contato_com_acolhida: results[\"36_formas_mais_seguras_de\"],\n    contrato: results[\"38_contrato_formato\"],\n    acordou_politica_falta: results[\"39_acordou_a_politica_de\"]\n  }\n\n  data = new Date(results[\"35_data_do_inicio_do_aten\"]);\n  let inicio_atendimento_br =   ((data.getDate() )) + \"/\" + ((data.getMonth() + 1)) + \"/\" + data.getFullYear();\n \n  var assistencia_juridica = {\n    tem_acompanhamento_juridico: results[\"40_a_acolhida_esta_em_aco\"],\n    via_mapa_do_acolhimento: results[\"401_esse_acompanhamento_e\"],\n    processo_juridico_em_andamento: results[\"41_existe_processo_juridi\"],\n    entrou_em_contato_advogada: results[\"42_caso_se_aplique_voce_p\"]    \n  }\n\n  var atualizacoes_emergenciais = {\n     riscos_relacionados_suicidio: results[\"43_voce_se_preocupa_ou_pe\"]\n  }\n\n  //risco moderado\n  if(moradia.local_de_risco === 'Sim' || \n     autor_da_violencia.tem_dominio === 'Sim' ||\n     qualidade_de_vida.impacto_sofrido_moderado !== 'A acolhida não está sofrendo nenhum dos impactos citados acima'){\n    risco = 'moderado';\n    priority = 'normal';\n  }\n\n  //risco grave \n  if(dados_acolhida.pcd === 'Sim' ||\n     dados_acolhida.filhos_pcd === 'Sim' ||\n     dados_acolhida.gravida_ou_tem_recem_nascido === 'Sim' ||\n     qualidade_de_vida.impacto_sofrido_grave !== 'A acolhida não está sofrendo nenhum dos impactos citados acima' ||\n     historico_viloencia.violencia_fisica_grave !== 'Nenhuma agressão física' ||\n     historico_viloencia.autor_obrigou_ato_sexual === 'Sim' ||\n     historico_viloencia.violencia_durante_gravidez === 'Sim' ||\n     historico_viloencia.acolhida_atendimento_medico.includes('Sim') || \n     historico_viloencia.frequencia_violencia_aumentou === 'Sim' ||\n     autor_da_violencia.usa_substancias_psicoativas === 'Sim'||\n     autor_da_violencia.diagnostico_doenca_psiquiatrica === 'Sim'){\n    risco = 'grave';\n    priority = 'high'\n  }\n \n  //risco extremo\n  if(historico_viloencia.violencia_fisica_extrema !== 'Nenhuma agressão física' || \n     historico_viloencia.autor_tem_acesso_arma_fogo === 'Sim' ||\n     historico_viloencia.autor_agrediu_outras_pessoas === 'Sim' ||\n     historico_viloencia.como_ameacou || \n     historico_viloencia.autor_comportamentos_abusivos ||\n     historico_viloencia.autor_ameacou_familiar.includes('Sim')){\n    risco = 'extremo';\n    priority = 'urgent';\n  }\n\n  item.json.priority = priority\n  item.json.answers = { dados_voluntaria,dados_acolhida,aspectos_socioeconomicos,moradia,qualidade_de_vida,historico_viloencia,autor_da_violencia,servico_publico,processo_psicoterapeutico,contato_contrato_com_acolhida,assistencia_juridica,atualizacoes_emergenciais, risco: risco};\n  item.json.body_ticket = 'RISCO: ' + risco.toUpperCase() + '\\\\n\\\\nDADOS VOLUNTARIA\\\\nNome: '+ dados_voluntaria.nome + '\\\\nemail: ' + dados_voluntaria.email +\n  '\\\\n\\\\nDADOS ACOLHIDA\\\\nNome: ' + dados_acolhida.nome + '\\\\nData de nascimento: ' + data_de_nascimento_br + \n  '\\\\nIdentidade racial: ' + dados_acolhida.identidade_racial + '\\\\nIdentidade de genero: ' + dados_acolhida.identidade_genero +\n  '\\\\nÉ uma pessoa com deficiência: ' + dados_acolhida.pcd + \n  //codicao pcd\n  (dados_acolhida.pcd.toUpperCase() === 'SIM' ? '\\\\nQual deficiencia: ' + dados_acolhida.deficiencia : '') +\n  '\\\\nEstado cívil: ' + dados_acolhida.estado_civil +  '\\\\nTem filhos: ' + dados_acolhida.tem_filhos +\n  //condicao filhos\n  (dados_acolhida.tem_filhos === 'Sim'? '\\\\nFaixa etaria dos filhos(as): ' + dados_acolhida.filhos_faixa_etaria + '\\\\nAlgum dos filhos tem difciência: ' + dados_acolhida.filhos_pcd + \n  //condicao filhos pcd\n  (dados_acolhida.filhos_pcd === 'Sim' ?  '\\\\nDeficiencia do filho: ' + dados_acolhida.deficiencia_filhos: '') : '') +\n  '\\\\nGravida ou esteve grávida nos últimos 18 meses: ' + dados_acolhida.gravida_ou_tem_recem_nascido +\n  '\\\\n\\\\nASPECTOS SOCIOECONÔMICOS\\\\nEscolaridade: ' + aspectos_socioeconomicos.escolaridade +\n  '\\\\n\\\\nMORADIA\\\\nConsidera que mora num local com risco de violência: ' + moradia.local_de_risco + \n  '\\\\n\\\\nQUALIDADE DE VIDA\\\\n Impactos que a acolhida está sofrendo em decorrência da violência(moderado): ' + qualidade_de_vida.impacto_sofrido_moderado +\n  '\\\\nImpactos que a acolhida está sofrendo em decorrência da violência(grave): ' + qualidade_de_vida.impacto_sofrido_grave +\n  '\\\\n\\\\nHISTÓRICO DE VIOLÊNCIA\\\\nTipos de violência: ' + historico_viloencia.tipos_violencia + '\\\\nTipos de viloencia física (grave): ' + historico_viloencia.violencia_fisica_grave +\n  '\\\\nTipos de viloencia física (extrema): ' + historico_viloencia.violencia_fisica_extrema + '\\\\nSe sente isolada: ' + historico_viloencia.se_sente_isolada +\n  '\\\\nO autor da violência tem acesso a uma arma fogo: ' + historico_viloencia.autor_tem_acesso_arma_fogo +  \n  '\\\\nO autor da violência já ameaçou algum familiar: ' + historico_viloencia.autor_ameacou_familiar +\n  //condicao ja ameacou \n  (historico_viloencia.autor_ameacou_familiar === 'Sim'? '\\\\nComo ameaçou: ' + historico_viloencia.como_ameacou : '') +\n  '\\\\nO autor da violência obrigou a acolhida a ter relações sexuais ou praticar atos sexuais: ' + historico_viloencia.autor_obrigou_ato_sexual + \n  '\\\\nA acolhida sofreu algum tipo de violência durante a gravidez ou nos três meses posteriores ao parto: ' + historico_viloencia.violencia_durante_gravidez +\n  '\\\\nO autor da violência teve algum destes comportamentos com a acolhida: ' + historico_viloencia.autor_comportamentos_abusivos +\n  '\\\\nA acolhida necessitou de atendimento médico e/ou internação: ' + historico_viloencia.acolhida_atendimento_medico +\n  '\\\\nA acolhida se separou ou teve interrese em separar: ' + historico_viloencia.acolhida_teve_interrese_em_separar + \n  '\\\\nA acolhida apresenta dependência emocional do autor da violência: ' + historico_viloencia.acolhida_tem_dependencia_emocional +\n  '\\\\nAs agressões ou ameaças do autor da violência contra a acolhida se tornaram mais frequentes ou mais graves nos últimos meses: ' + historico_viloencia.frequencia_violencia_aumentou +\n  '\\\\nO autor da violência já ameaçou ou agrediu outras pessoas ou animais: ' + historico_viloencia.autor_agrediu_outras_pessoas +\n  //condição quais outros familiares\n  (historico_viloencia.autor_agrediu_outras_pessoas === 'Sim, outros familiares'? '\\\\nQuais outros familiares: ' + historico_viloencia.quem_o_autor_agrediu : '' ) +\n  '\\\\n\\\\nSOBRE O(A) AUTOR(A) DA VIOLÊNCIA\\\\nTem domínio/poder social e/ou financeiro sobre a acolhida: ' + autor_da_violencia.tem_dominio +\n  //condicao dominio socila/financeiro\n  (autor_da_violencia.tem_dominio === 'Sim'? '\\\\nQuais dominios/poderes: ' + autor_da_violencia.quais_dominios : '') +\n  '\\\\nFaz uso de substâncias psicoativas: ' + autor_da_violencia.usa_substancias_psicoativas +\n  //condicao uso substancias\n  (autor_da_violencia.usa_substancias_psicoativas === 'Sim'? '\\\\nQuais substâncias psicoativas: ' + autor_da_violencia.quais_substancias : '') +\n  '\\\\nTem algum diagnóstico (verbal ou laudo) de doença psiquiátrica: ' +  autor_da_violencia.diagnostico_doenca_psiquiatrica +\n  '\\\\n\\\\nSERVIÇO PÚBLICO\\\\nA acolhida já manifestou alguma resistência, má experiência ou estranhamento sobre o atendimento em serviços públicos: ' + servico_publico.acolhida_criticou_servicos_publicos +\n  //condicao servicao publicos\n  (servico_publico.acolhida_criticou_servicos_publicos === 'Sim'? '\\\\nQuais serviços públicos: ' + servico_publico.quais_servicos_publicos : '') +\n  '\\\\n\\\\nPROCESSO PSICOTERAPÊUTICOS\\\\nResumo da demanda: ' + processo_psicoterapeutico.resumo_demanda + '\\\\nEncaminhamento: ' + processo_psicoterapeutico.encaminhamento +\n  '\\\\n\\\\nCONTATRO E CONTRATO COM A ACOLHIDA\\\\nData do inicio do atendimento: ' + inicio_atendimento_br + \n  '\\\\nQual a forma segura de entrar em contato com a acolhida: ' + contato_contrato_com_acolhida.forma_segura_contato_com_acolhida +\n  '\\\\nFrequência de atendimento: ' + contato_contrato_com_acolhida.frequencia_atendimento +\n  '\\\\nContrato (formato): ' + contato_contrato_com_acolhida.contrato +\n  '\\\\nAcordou a Política de Faltas: ' + contato_contrato_com_acolhida.acordou_politica_falta + \n   '\\\\n\\\\nASSISTÊNCIA JURÍDICA\\\\nA acolhida está em acompanhamento jurídico: ' + assistencia_juridica.tem_acompanhamento_juridico +\n  //condicao tem acompanhamento\n  (assistencia_juridica.tem_acompanhamento_juridico === 'Sim'? '\\\\nIntermediado pelo Mapa do Acolhimento: ' + assistencia_juridica.via_mapa_do_acolhimento : '') +\n  '\\\\nExiste processo jurídico em andamento: ' + assistencia_juridica.processo_juridico_em_andamento + \n  '\\\\nEntrou em contato com a advogada: ' + assistencia_juridica.entrou_em_contato_advogada + \n  '\\\\n\\\\nATUALIZAÇÕES CRÍTICAS OU EMERGENCIAIS\\\\nSe preocupa ou percebe, na condução do processo psicoterapêutico, riscos relacionados ao suicídio: ' + atualizacoes_emergenciais.riscos_relacionados_suicidio\n\n  dados_acolhida.deficiencia = dados_acolhida.deficiencia?.replaceAll('Deficiência ','');\n  dados_acolhida.deficiencia_filhos = dados_acolhida.deficiencia_filhos?.replaceAll('Deficiência ','');\n  historico_viloencia.como_ameacou = historico_viloencia.como_ameacou?.replaceAll('Utilizando ','');\n  historico_viloencia.acolhida_atendimento_medico = historico_viloencia.acolhida_atendimento_medico?.replaceAll('Sim, ', '');\n  //historico_viloencia.autor_ameacou_familiar = historico_viloencia.autor_ameacou_familiar?.replaceAll('Sim, ', ''); \n  historico_viloencia.autor_agrediu_outras_pessoas = historico_viloencia.autor_agrediu_outras_pessoas?.replaceAll('Sim, ', ''); \n  \n  item.json.answers_txt = '\"dados_voluntaria\": ' + JSON.stringify(dados_voluntaria) \n  item.json.answers_txt = item.json.answers_txt + ', \"dados_acolhida\":' + JSON.stringify(dados_acolhida).replaceAll('Sim', true).replaceAll('Não', false) ; \n  item.json.answers_txt = item.json.answers_txt + ', \"moradia\":' + JSON.stringify(moradia).replaceAll('Sim', true).replaceAll('Não', false) + \n                          ',\"qualidade_de_vida\":' + JSON.stringify(qualidade_de_vida); \n  historico_viloencia.se_sente_isolada = historico_viloencia.se_sente_isolada?.replace('Sim', true).replace('Não', false);\n  historico_viloencia.autor_tem_acesso_arma_fogo = historico_viloencia.autor_tem_acesso_arma_fogo?.replace('Sim', true).replace('Não', false);\n  historico_viloencia.autor_ameacou_familiar = historico_viloencia.autor_ameacou_familiar?.replace('Sim', true).replace('Não', false);\n  historico_viloencia.autor_agrediu_outras_pessoas = historico_viloencia.autor_agrediu_outras_pessoas?.replace('Sim', true).replace('Não', false);\n  historico_viloencia.autor_obrigou_ato_sexual = historico_viloencia.autor_obrigou_ato_sexual?.replace('Sim', true).replace('Não', false);\n  historico_viloencia.acolhida_teve_interrese_em_separar = historico_viloencia.acolhida_teve_interrese_em_separar?.replace('Sim', true).replace('Não', false);\n  historico_viloencia.frequencia_violencia_aumentou = historico_viloencia.frequencia_violencia_aumentou?.replace('Sim', true).replace('Não', false);\n  historico_viloencia.violencia_durante_gravidez = historico_viloencia.violencia_durante_gravidez?.replace('Sim', true).replace('Não', false);\n  historico_viloencia.acolhida_tem_dependencia_emocional = historico_viloencia.acolhida_tem_dependencia_emocional?.replace('Sim', true).replace('Não', false);\n  servico_publico.acolhida_criticou_servicos_publicos = servico_publico.acolhida_criticou_servicos_publicos?.replaceAll('Sim', true).replaceAll('Não',false); \n  autor_da_violencia.tem_dominio = autor_da_violencia.tem_dominio.replaceAll('Sim', true).replaceAll('Não',false);\n  autor_da_violencia.usa_substancias_psicoativas = autor_da_violencia.usa_substancias_psicoativas.replaceAll('Sim', true).replaceAll('Não',false);\n  autor_da_violencia.diagnostico_doenca_psiquiatrica = autor_da_violencia.diagnostico_doenca_psiquiatrica.replaceAll('Sim', true).replaceAll('Não',false);\n  item.json.answers_txt = '{' + item.json.answers_txt + ', \"historico_violencia\":' + JSON.stringify(historico_viloencia) + \n                          ', \"autor_da_violencia\": ' +  JSON.stringify(autor_da_violencia) + \n                          ',\"servico_publico\":' + JSON.stringify(servico_publico) + \n                          ', \"aspectos_socioeconomicos\":' + JSON.stringify(aspectos_socioeconomicos) + \n                          ', \"processo_psicoterapeutico\":' + JSON.stringify(processo_psicoterapeutico) +\n                          ', \"contato_contrato_com_acolhida\":' + JSON.stringify(contato_contrato_com_acolhida).replaceAll('Sim', true).replaceAll('Não', false) + \n                          ', \"assistencia_juridica\":' + JSON.stringify(assistencia_juridica).replaceAll('Sim', true).replaceAll('Não', false) + \n                          ', \"atualizacoes_emergenciais\": ' + JSON.stringify(atualizacoes_emergenciais).replace(' (comunique imediatamente à equipe)','').replaceAll('Sim', true).replaceAll('Não', false)\n                           +  ', \"risco\": \"' + risco + '\"}'\n  item.json.answers_txt = item.json.answers_txt.replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n}\n\n// You can write logs to the browser console\nconsole.log('Done!');\n\nreturn items;"
        },
        "id": "21f57958-4b91-4189-9c6b-f1fec31f412d",
        "name": "Formata - Triagem Psicológico 2",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1260,
          2480
        ]
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\n  insert_mda_forms_answers(objects: {answers: $answers, form: \"triagem-psicologico-2\", msr_name: \"{{$node[\"Formata - Triagem Psicológico 2\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (triagem psi 2)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Triagem Psicológico 2\"].json[\"answers\"][\"dados_voluntaria\"][\"email\"]}}\",organization_id:360282119532, form_id:{{$node[\"Formata - Triagem Psicológico 2\"].json[\"submission\"][\"form\"][\"id\"]}}\n}) {\n    affected_rows\n  }\n}",
          "variables": "={\n\"answers\": {{$node[\"Formata - Triagem Psicológico 2\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas3",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          1680,
          2480
        ],
        "id": "e6835b5f-73e0-4ae8-9748-bf31f7c1d4f6",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Triagem Psicológico 2\"].json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]}},\n \t\t\"organization_id\": {{$node[\"Formata - Triagem Psicológico 2\"].json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"organization_id\"][\"value\"]}},\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"triagem-2\"], \n \t\t\"status\": \"new\",\n\t\t\"priority\": \"{{$node[\"Formata - Triagem Psicológico 2\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Triagem 2] {{$node[\"Formata - Triagem Psicológico 2\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\"body\": \"{{$node[\"Formata - Triagem Psicológico 2\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (triagem psi 2)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          1480,
          2480
        ],
        "id": "1a457319-6b46-4359-ba41-0ff72f055f66",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Triagem Juridico 2\"].json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]}},\n \t\t\"organization_id\": {{$node[\"Formata - Triagem Juridico 2\"].json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"organization_id\"][\"value\"]}},\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"triagem-2\"], \n \t\t\"status\": \"new\",\n\t\t\"priority\": \"{{$node[\"Formata - Triagem Juridico 2\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Triagem 2] {{$node[\"Formata - Triagem Juridico 2\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\"body\": \"{{$node[\"Formata - Triagem Juridico 2\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (triagem jur 2)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          1480,
          2260
        ],
        "id": "5937d1ab-2b95-4a37-877a-514358de6f29",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Triagem Jurídico 1\"].json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]}},\n \t\t\"organization_id\": 360269610652,\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"triagem-1\"], \n \t\t\"status\": \"new\",\n\t\t\"priority\": \"{{$node[\"Formata - Triagem Jurídico 1\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Triagem 1] {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\"body\": \"RISCO: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"risco\"]}}\\n\\nDADOS DA VOLUNTÁRIA\\n\\tNome completo: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_voluntaria\"][\"nome\"]}}\\n\\tEmail de cadastro: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_voluntaria\"][\"email\"]}}\\n\\tWhatsapp: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_voluntaria\"][\"whatsapp\"]}}\\n\\n CRITÉRIOS DO PROJETO\\n\\tA acolhida é maior de 18: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"maior_de_18\"]}}\\n\\tA acolhida reside no brasil: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"reside_no_brasil\"]}}\\n\\ta acolhida é brasileira: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"brasileira\"]}}\\n\\tA acolhida passou ou está passando por uma situação de violência baseada no gênero: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"situacao_de_violencia\"]}}\\n\\tPeríodo que está submetida a situação de violência: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"periodo\"]}}\\n\\tTipos de violência que a pessoa acolhida está submetida: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"tipos_de_violencia\"]}}\\n\\tAutor(a) da violencia: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"autor_da_violencia\"]}}\\n\\tEstá em situação de vulnerabilidade socioeconômica: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"situacao_vulnerabilidade_baixa_renda\"]}}\\n\\tA acolhida é atendida pela denfensoria publica: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"atendida_denfensoria_publica\"]}}\\n\\tA acolhida é atendida por advogada(o) particular: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"criterios_projeto\"][\"atendida_advogada_particular\"]}}\\n\\nDADOS DA ACOLHIDA\\n\\tNome da acolhida: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\\n\\tData de nascimento: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"data_de_nascimento_br\"]}}\\n\\tRegime de trabalho da acolhida: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"regime_de_trabalho\"]}}\\n\\tRenda individual da acolihda: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"renda_individual\"]}}\\n\\tIndependência financeira: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"tem_independencia_financeira\"]}}\\n\\tInscrita no Cadastro Único: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"tem_cadunico\"]}}\\n\\tRecebendo algum benefício da assistência social: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"recebe_algum_beneficio\"]}}\\n\\tResponsável financeiramente pela renda familiar: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"responsavel_financeiramente\"]}}\\n\\tCom: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"divide_responsabilidade_com\"]}}\\n\\tTem dependentes financeiros: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"tem_dependentes_financeiros\"]}}\\n\\tquantidade de dependentes: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"quantidade_de_dependentes\"]}}\\n\\tRecebe pensão alimenticia: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"dados_acolhida\"][\"recebe_pensao_alimenticia\"]}}\\n\\nMORADIA\\n\\tSituação de moradia: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"moradia\"][\"situacao_moradia\"]}}\\n\\tCedida por quem: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"moradia\"][\"cedida_por\"]}}\\n\\tReside com o(a) autor(a) da violência: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"moradia\"][\"reside_com_o_autor_da_viloencia\"]}}\\n\\tSente-se segura  em casa: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"moradia\"][\"sente_segura_em_casa\"]}}\\n\\tVive em situação de cárcere: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"moradia\"][\"situacao_de_carcere\"]}}\\n\\nSERVIÇO PÚBLICO\\n\\tA acolhida conhece a rede de atendimento de violência contra as mulheres da região disponíveis: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"servico_publico\"][\"conhece_redes_de_atendimento\"]}}\\n\\tQuais:{{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"servico_publico\"][\"quais_redes_de_atendimento_conhece\"]}}\\n\\tA pessoa acolhida está em atendimento em algum dos serviços públicos da região: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"servico_publico\"][\"atentendida_em_servico_publico\"]}}\\n\\tQuais:{{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"servico_publico\"][\"quais_servicos_publicos_atentida\"]}}\\n\\nPROCESSO JURÍDICO\\n\\tÁreas direito a demanda se enquadra: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"processo_juridico\"][\"areas_direito_demanda_se_enquadra\"]}}\\n\\tDemanda inicial: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"processo_juridico\"][\"demanda_inicial\"]}}\\n\\tEncaminhamento do caso: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"processo_juridico\"][\"encaminhamento\"]}}\\n\\tEncaminhar para estes serviços públicos: {{$node[\"Formata - Triagem Jurídico 1\"].json[\"answers\"][\"processo_juridico\"][\"servicos_indicados\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (triagem jur 1)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          1500,
          2080
        ],
        "id": "777ac257-9232-419e-a746-36ac7dd1c309",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Triagem Pscologo 1\"].json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]}},\n \t\t\"organization_id\": 360282119532,\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"triagem-1\"], \n \t\t\"status\": \"new\",\n   \t\t\"priority\": \"{{$node[\"Formata - Triagem Pscologo 1\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Triagem 1] {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\t\"body\": \"RISCO: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"risco\"]}}\\n\\nDADOS DA VOLUNTÁRIA\\n\\tNome completo: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_voluntaria\"][\"nome\"]}}\\n\\tEmail de cadastro: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_voluntaria\"][\"email\"]}}\\n\\tWhatsapp: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_voluntaria\"][\"whatsapp\"]}}\\n\\nCRITÉRIOS DO PROJETO\\n\\tA acolhida é maior de 18: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"criterios_projeto\"][\"e_maior_18\"]}}\\n\\tA acolhida reside no brasil: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"criterios_projeto\"][\"reside_no_brasil\"]}}\\n\\tA acolhida é brasileira: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"criterios_projeto\"][\"brasileira\"]}}\\n\\tA acolhida passou ou está passando por uma situação de violência baseada no gênero: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"criterios_projeto\"][\"situacao_de_violencia\"]}}\\n\\tPeríodo que está submetida a situação de violência: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"criterios_projeto\"][\"periodo\"]}}\\n\\tTipos de violência que a pessoa acolhida está submetida: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"criterios_projeto\"][\"tipos_de_violencia\"]}}\\n\\tAutor(a) da violência: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"criterios_projeto\"][\"autor_da_violencia\"]}}\\n\\tEstá em situação de vulnerabilidade socioeconômica: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"criterios_projeto\"][\"situacao_vulnerabilidade_baixa_renda\"]}}\\n\\nDADOS DA ACOLHIDA\\n\\tNome da acolhida: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\\n\\tData de nascimento: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"data_de_nascimento\"]}}\\n\\tRegime de trabalho da acolhida: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"regime_de_trabalho\"]}}\\n\\tRenda individual da acolhida (per capita): {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"renda_individual\"]}}\\n\\tIndependência financeira: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"tem_independencia_financeira\"]}}\\n\\tInscrita no Cadastro Único (Cadúnico) do governo federal: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"tem_cadunico\"]}}\\n\\tRecebendo algum benefício da assistência social: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"recebe_algum_beneficio\"]}} \\n\\tResponsável financeiramente pela renda familiar: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"responsavel_financeiramente\"]}}\\n\\tCom: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"divide_responsabilidade_com\"]}}\\n\\tTem dependentes financeiros: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"tem_dependentes_financeiros\"]}}\\n\\tQuantidade de dependentes: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"dados_acolhida\"][\"quantidade_de_dependentes\"]}}\\n\\nMORADIA\\n\\tSituação de moradia: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"moradia\"][\"situacao_moradia\"]}}\\n\\tCedida por: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"moradia\"][\"cedida_por\"]}}\\n\\tReside com o(a) autor(a) da violência: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"moradia\"][\"reside_com_o_autor_da_viloencia\"]}}\\n\\tSente-se segura em casa: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"moradia\"][\"sente_seguram_em_casa\"]}}\\n\\tVive em situação de cárcere: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"moradia\"][\"situacao_de_carcere\"]}}\\n\\nSERVIÇO PÚBLICO\\n\\tA pessoa acolhida conhece a rede de atendimento de violência contra as mulheres da região disponíveis: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"servico_publico\"][\"conhece_redes_de_atendimento\"]}}\\n\\tQuais: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"servico_publico\"][\"quais_redes_de_atendimento_conhece\"]}}\\n\\tA pessoa acolhida está em atendimento em algum dos serviços públicos da região: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"servico_publico\"][\"atentendida_em_servico_publico\"]}}\\n\\tQuais: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"servico_publico\"][\"quais_servicos_publicos_atentida\"]}}\\n\\nPROCESSO PSICOTERAPEUTICO\\n\\tDemanda inicial: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"processo_psicoterapeutico\"][\"demanda_inicial\"]}}\\n\\tEncaminhamento do caso: {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"processo_psicoterapeutico\"][\"encaminhamento\"]}}\\n\\tencaminhar para qual(is) serviço(s) público(s): {{$node[\"Formata - Triagem Pscologo 1\"].json[\"answers\"][\"processo_psicoterapeutico\"][\"qual_servico_publico\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (triagem psi 1)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          1500,
          1900
        ],
        "id": "7e1412ff-c247-432a-a8db-cb80f30f250a",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "errorMessage": "=Voluntária sem user_id! \nnome: {{$node[\"Item Lists\"].json[\"submission\"][\"results\"][\"1_nome_completo\"]}}\nemail: {{$node[\"Item Lists\"].json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"email\"][\"normalizedValue\"]}}"
        },
        "id": "f46ffdc3-2081-4e53-801a-7b43cfe25a3c",
        "name": "Stop And Error",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          900,
          2500
        ]
      },
      {
        "parameters": {},
        "id": "fc7c980b-945a-4734-91c2-ba3818a247f7",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          620,
          2500
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "= {{$node[\"Item Lists\"].json[\"submission\"][\"form\"][\"name\"]}}",
                "operation": "contains",
                "value2": "Triagem"
              }
            ]
          }
        },
        "id": "6d6550de-9cf3-4b84-829c-d6267764cc8d",
        "name": "Se é um formulário de triagem",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          420,
          2240
        ]
      },
      {
        "parameters": {
          "conditions": {
            "number": [
              {
                "value1": "={{$node[\"Item Lists\"].json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "2f410e09-664b-4aca-86c0-fad21d88361e",
        "name": "Se tem o user_id preenchido",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          640,
          2220
        ]
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Item Lists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "Formata - Triagem Pscologo 1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Triagem Jurídico 1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Triagem Juridico 2",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Triagem Psicológico 2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item Lists": {
        "main": [
          [
            {
              "node": "Se é um formulário de triagem",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Triagem Pscologo 1": {
        "main": [
          [
            {
              "node": "Criar novo ticket (triagem psi 1)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Triagem Jurídico 1": {
        "main": [
          [
            {
              "node": "Criar novo ticket (triagem jur 1)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Triagem Juridico 2": {
        "main": [
          [
            {
              "node": "Criar novo ticket (triagem jur 2)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Triagem Psicológico 2": {
        "main": [
          [
            {
              "node": "Criar novo ticket (triagem psi 2)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (triagem psi 2)": {
        "main": [
          [
            {
              "node": "Salvar Respostas3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (triagem jur 2)": {
        "main": [
          [
            {
              "node": "Salvar Respostas2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (triagem jur 1)": {
        "main": [
          [
            {
              "node": "Salvar Respostas1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (triagem psi 1)": {
        "main": [
          [
            {
              "node": "Salvar Respostas",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se é um formulário de triagem": {
        "main": [
          [
            {
              "node": "Se tem o user_id preenchido",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se tem o user_id preenchido": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {
      "Start": [
        {
          "json": {
            "headers": {
              "host": "n8n.bonde.org",
              "user-agent": "GuzzleHttp/7",
              "content-length": "11785",
              "content-type": "application/json",
              "webhook-signature": "2oi/c4ypZB2/m1QtOKlfcVzxdYke5rbExm/tlbh5fio=",
              "x-forwarded-for": "54.85.56.248",
              "x-forwarded-host": "n8n.bonde.org",
              "x-forwarded-port": "443",
              "x-forwarded-proto": "https",
              "x-forwarded-server": "be13ecc00da6",
              "x-origin-base-url": "https://mautic.nossas.org",
              "x-real-ip": "54.85.56.248",
              "accept-encoding": "gzip"
            },
            "params": {},
            "query": {},
            "body": {
              "mautic.form_on_submit": [
                {
                  "submission": {
                    "id": 7952,
                    "ipAddress": {
                      "ipAddress": "201.26.13.32",
                      "id": 60160,
                      "ipDetails": {
                        "city": "",
                        "region": "",
                        "zipcode": "",
                        "country": "",
                        "latitude": "",
                        "longitude": "",
                        "isp": "",
                        "organization": "",
                        "timezone": "",
                        "extra": ""
                      }
                    },
                    "form": {
                      "id": 2,
                      "name": "2.00. Instrumental de Atendimento 1: Advogadas",
                      "alias": "200__instr",
                      "category": null
                    },
                    "lead": {
                      "id": 167774,
                      "points": 0,
                      "color": null,
                      "fields": {
                        "core": {
                          "organization_id": {
                            "id": "61",
                            "label": "Zendesk Organization ID",
                            "alias": "organization_id",
                            "type": "text",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "firstname": {
                            "id": "2",
                            "label": "First Name",
                            "alias": "firstname",
                            "type": "text",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "1",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "data_de_inscricao_no_bond1": {
                            "id": "60",
                            "label": "Data de Inscrição no BONDE",
                            "alias": "data_de_inscricao_no_bond1",
                            "type": "date",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "lastname": {
                            "id": "3",
                            "label": "Last Name",
                            "alias": "lastname",
                            "type": "text",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "1",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "state1": {
                            "id": "58",
                            "label": "Estado",
                            "alias": "state1",
                            "type": "select",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "cor": {
                            "id": "59",
                            "label": "Cor",
                            "alias": "cor",
                            "type": "select",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "address": {
                            "id": "57",
                            "label": "Endereço",
                            "alias": "address",
                            "type": "text",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "user_id": {
                            "id": "55",
                            "label": "Zendesk User ID",
                            "alias": "user_id",
                            "type": "text",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "email": {
                            "id": "6",
                            "label": "Email",
                            "alias": "email",
                            "type": "email",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "1",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": "bruna@fernandareisadvogados.com",
                            "normalizedValue": "bruna@fernandareisadvogados.com"
                          },
                          "tipo_de_acolhimento": {
                            "id": "50",
                            "label": "Tipo de Acolhimento",
                            "alias": "tipo_de_acolhimento",
                            "type": "text",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "mobile": {
                            "id": "7",
                            "label": "Mobile",
                            "alias": "mobile",
                            "type": "tel",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "1",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "phone": {
                            "id": "8",
                            "label": "Phone",
                            "alias": "phone",
                            "type": "tel",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "1",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "website": {
                            "id": "22",
                            "label": "Website",
                            "alias": "website",
                            "type": "url",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "whatsapp": {
                            "id": "49",
                            "label": "Whatsapp",
                            "alias": "whatsapp",
                            "type": "text",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "f_condition": {
                            "id": "48",
                            "label": "Status da Mulher",
                            "alias": "f_condition",
                            "type": "select",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "",
                            "default_value": "desabilitada",
                            "value": "desabilitada",
                            "normalizedValue": "Desabilitada"
                          },
                          "city": {
                            "id": "13",
                            "label": "City",
                            "alias": "city",
                            "type": "text",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "1",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "country": {
                            "id": "16",
                            "label": "Country",
                            "alias": "country",
                            "type": "country",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "1",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "last_active": {
                            "id": "19",
                            "label": "Date Last Active",
                            "alias": "last_active",
                            "type": "datetime",
                            "group": "core",
                            "object": "lead",
                            "is_fixed": "1",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": "2023-05-15 17:33:33",
                            "normalizedValue": "2023-05-15 17:33:33"
                          }
                        },
                        "social": {
                          "facebook": {
                            "id": "23",
                            "label": "Facebook",
                            "alias": "facebook",
                            "type": "text",
                            "group": "social",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "foursquare": {
                            "id": "24",
                            "label": "Foursquare",
                            "alias": "foursquare",
                            "type": "text",
                            "group": "social",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "instagram": {
                            "id": "25",
                            "label": "Instagram",
                            "alias": "instagram",
                            "type": "text",
                            "group": "social",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "linkedin": {
                            "id": "26",
                            "label": "LinkedIn",
                            "alias": "linkedin",
                            "type": "text",
                            "group": "social",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "skype": {
                            "id": "27",
                            "label": "Skype",
                            "alias": "skype",
                            "type": "text",
                            "group": "social",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          },
                          "twitter": {
                            "id": "28",
                            "label": "Twitter",
                            "alias": "twitter",
                            "type": "text",
                            "group": "social",
                            "object": "lead",
                            "is_fixed": "0",
                            "properties": "a:0:{}",
                            "default_value": null,
                            "value": null,
                            "normalizedValue": null
                          }
                        },
                        "personal": [],
                        "professional": []
                      }
                    },
                    "trackingId": "f5rm2v1in5jxxnrg8ce4rbg",
                    "dateSubmitted": "2023-05-15T17:51:38+00:00",
                    "referer": "https://mautic.nossas.org/triagem-juridico-1",
                    "page": null,
                    "results": {
                      "1_nome_completo": "Bruna Fernanda Reis e Silva",
                      "2_email_de_cadastro1": "bruna@fernandareisadvogados.com",
                      "3_whatsapp": "11915906620",
                      "4_a_acolhida_e_maior_de_1": "Sim",
                      "5_a_acolhida_reside_no_br": "Sim",
                      "6_a_acolhida_e_brasileira": "Sim",
                      "7_a_acolhida_passou_ou_es": "Sim",
                      "8_quais_os_tipos_de_viole": "Física, Psicológica, Sexual",
                      "9_por_qual_periodo_de_tem": "Entre 6 meses e 1 ano",
                      "10_quem_e_oa_autora_da_vi": "Ex-marido/Ex-esposa/Ex-companheiro(a)",
                      "11_a_acolhida_esta_em_sit": "Sim",
                      "12_a_acolhida_esta_recebe": "Não",
                      "13_a_acolhida_esta_recebe": "Não",
                      "14_nome_da_acolhida": "Bruna Moreira de Sousa",
                      "15_data_de_nascimento": "1993-05-22",
                      "16_qual_o_regime_de_traba": "Informal",
                      "17_assinale_a_opcao_que_c": "De R$ 0,00 a R$ 3.030,00",
                      "18_a_acolhida_tem_indepen": "Não",
                      "19_a_acolhida_esta_inscri": "Não",
                      "20_atualmente_a_acolhida": "Não",
                      "21_a_acolhida_e_responsav": "Sim",
                      "22_caso_tenha_respondido": "Mãe, Pai",
                      "23_a_acolhida_tem_pessoas": "Sim",
                      "24_caso_tenha_respondido": "2",
                      "25_a_acolhida_recebe_pens": "Não",
                      "26_qual_a_situacao_de_mor": "Cedida ou “de favor”",
                      "27_caso_tenha_respondido": "Familiares",
                      "28_a_acolhida_reside_com": "Não",
                      "29_a_acolhida_se_sente_se": "Sim",
                      "30_a_acolhida_vive_em_sit": "Não",
                      "31_a_acolhida_conhece_a_r": "Sim",
                      "32_se_sim_assinale_qualqu": "Delegacia civil",
                      "33_a_acolhida_esta_em_ate": "Sim",
                      "34_se_sim_assinale_qualqu": "Delegacia civil",
                      "35_em_qualis_areas_do_dir": "Cível/Família, Criminal",
                      "36_descreva_resumidamente": "Acolhida narrou ter sofrido violência física, psicológica e sexual por parte do ex-companheiro. Algumas das narrativas incluíam pressões para deixar o trabalho, tapas no rosto, envolvimento dos filhos nas brigas do casal, ameaças, abuso de drogas e violação sexual durante discussão. A acolhida mora com os filhos e o ex-companheiro insiste em encontrá-los. Há medida protetiva em andamento para afastamento do ex-companheiro.",
                      "37_encaminhamentos_do_cas": "Orientações jurídicas, Entrada de ação/ações, Acompanhamento de processo já em curso, Articulação com o serviço público e continuidade de atendimento pelo projeto",
                      "38_caso_tenha_assinalado": "Delegacia especializada da Mulher, Delegacia civil"
                    }
                  },
                  "timestamp": "2023-05-15T17:51:38+00:00"
                }
              ]
            }
          }
        }
      ]
    },
    "versionId": "5dc0b083-0f52-4e4a-a632-2acb6c3a98dd",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-16T17:41:58.269Z",
        "updatedAt": "2024-01-16T17:41:58.269Z",
        "id": "E3Tnq8M430hgCQfP",
        "name": "Mapa do acolhimento"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T20:57:18.057Z",
    "updatedAt": "2024-01-24T02:06:20.000Z",
    "id": "5cQYXEWE3otdy39S",
    "name": "[Zendesk Integration] create match_survey STG",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "create-match-survey",
          "options": {}
        },
        "id": "47d8281b-0c2c-4d8d-a024-1477f2ffd60e",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -660,
          480
        ],
        "webhookId": "5baed586-5d62-4263-aa20-705eb344cd03",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT \n\tmatch_id, \n    '{{$json[\"survey_type\"]}}' AS survey_type\nFROM match.matches\nWHERE volunteer_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nLIMIT 1",
          "additionalFields": {}
        },
        "id": "b6985ae1-34b3-4131-97af-6b653d991816",
        "name": "Fetch match_id",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -220,
          480
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const status_lookup = {\n      \"atendimento_triagem_1\": \"triagem_1\",\n      \"atendimento_triagem_2\": \"triagem_2\",\n      \"atendimento_acompanhamento_1\": \"acompanhamento_1\",\n      \"atendimento_acompanhamento_2\": \"acompanhamento_2\"\n  }\n \n  const zendesk_ticket_id = item.json.body.id;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  \n  const survey_type = status_lookup[status_acolhimento]\n    \n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"survey_type\": survey_type\n  }\n  output.push(newItem)\n}\n\nreturn output;"
        },
        "id": "cd933525-caba-4b6e-98b3-36c145d751a2",
        "name": "Extracts zendesk_ticket_id and survey_type",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -440,
          480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=INSERT INTO match.match_surveys (match_id, survey_type, created_at, updated_at)\nVALUES ({{$node[\"Fetch match_id\"].json[\"match_id\"]}}, '{{$node[\"Fetch match_id\"].json[\"survey_type\"]}}', NOW(), NOW());",
          "additionalFields": {}
        },
        "id": "aeda161d-27b0-475f-a60a-80f4699690a6",
        "name": "Insert into match_surveys",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT\n   match_survey_id,\n   {{$json[\"match_id\"]}} AS match_id,\n   '{{$json[\"survey_type\"]}}' AS survey_type\nFROM match.match_surveys\nWHERE match_id = {{$json[\"match_id\"]}}\nAND survey_type = '{{$json[\"survey_type\"]}}'",
          "additionalFields": {}
        },
        "id": "b9d1ab65-e19c-4153-97ac-f54977be259a",
        "name": "Fetch past survey",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          0,
          480
        ],
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "number": [
              {
                "value1": "={{$json[\"match_survey_id\"]}}",
                "operation": "isEmpty"
              }
            ]
          }
        },
        "id": "43680d10-1bbb-44f2-8aaa-fe882246b327",
        "name": "Is it a new survey?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          240,
          480
        ]
      },
      {
        "parameters": {},
        "id": "a51be487-ba40-4141-b8f6-0dff02b2837b",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          460,
          720
        ]
      }
    ],
    "connections": {
      "Fetch match_id": {
        "main": [
          [
            {
              "node": "Fetch past survey",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extracts zendesk_ticket_id and survey_type": {
        "main": [
          [
            {
              "node": "Fetch match_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Extracts zendesk_ticket_id and survey_type",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch past survey": {
        "main": [
          [
            {
              "node": "Is it a new survey?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is it a new survey?": {
        "main": [
          [
            {
              "node": "Insert into match_surveys",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "d4486e8c-d89e-4eb2-b359-4175a7cf6400",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T20:57:56.373Z",
    "updatedAt": "2024-02-08T14:32:22.000Z",
    "id": "5ymPnQFGL4QrsBS5",
    "name": "[Zendesk Integration] create match_survey PROD",
    "active": true,
    "nodes": [
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "create-match-survey",
          "options": {}
        },
        "id": "10427598-c4fd-4e8e-9329-5be1320da48f",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -660,
          480
        ],
        "webhookId": "9d744de2-fa09-49fe-909e-a3a86e3154a1",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT \n\tmatch_id, \n    '{{$json[\"survey_type\"]}}' AS survey_type\nFROM match.matches\nWHERE volunteer_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nLIMIT 1",
          "additionalFields": {}
        },
        "id": "f9903f8c-4fe5-47c2-9c9e-cdf185b435b1",
        "name": "Fetch match_id",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -220,
          480
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const status_lookup = {\n      \"atendimento_triagem_1\": \"triagem_1\",\n      \"atendimento_triagem_2\": \"triagem_2\",\n      \"atendimento_acompanhamento_1\": \"acompanhamento_1\",\n      \"atendimento_acompanhamento_2\": \"acompanhamento_2\"\n  }\n \n  const zendesk_ticket_id = item.json.body.id;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  \n  const survey_type = status_lookup[status_acolhimento]\n    \n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"survey_type\": survey_type\n  }\n  output.push(newItem)\n}\n\nreturn output;"
        },
        "id": "e6992239-e83f-451d-b4d2-70e954e0a8ea",
        "name": "Extracts zendesk_ticket_id and survey_type",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -440,
          480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=INSERT INTO match.match_surveys (match_id, survey_type, created_at, updated_at)\nVALUES ({{$node[\"Fetch match_id\"].json[\"match_id\"]}}, '{{$node[\"Fetch match_id\"].json[\"survey_type\"]}}', NOW(), NOW());",
          "additionalFields": {}
        },
        "id": "5bd55e7e-1f17-41fd-b36d-3ad52d7307c3",
        "name": "Insert into match_surveys",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT\n   match_survey_id,\n   {{$json[\"match_id\"]}} AS match_id,\n   '{{$json[\"survey_type\"]}}' AS survey_type\nFROM match.match_surveys\nWHERE match_id = {{$json[\"match_id\"]}}\nAND survey_type = '{{$json[\"survey_type\"]}}'",
          "additionalFields": {}
        },
        "id": "772ee7c6-1bac-4110-96d2-473cf9228a83",
        "name": "Fetch past survey",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          0,
          480
        ],
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "number": [
              {
                "value1": "={{$json[\"match_survey_id\"]}}",
                "operation": "isEmpty"
              }
            ]
          }
        },
        "id": "5069a1a6-7995-40c5-939e-642b64651f34",
        "name": "Is it a new survey?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          240,
          480
        ]
      },
      {
        "parameters": {},
        "id": "230400dc-c0f2-4e7c-8b8d-9f6ca337d6a3",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          460,
          720
        ]
      }
    ],
    "connections": {
      "Fetch match_id": {
        "main": [
          [
            {
              "node": "Fetch past survey",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extracts zendesk_ticket_id and survey_type": {
        "main": [
          [
            {
              "node": "Fetch match_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Extracts zendesk_ticket_id and survey_type",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch past survey": {
        "main": [
          [
            {
              "node": "Is it a new survey?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is it a new survey?": {
        "main": [
          [
            {
              "node": "Insert into match_surveys",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "03a4964c-25ee-455c-acaf-b594f07f4b8d",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-01-24T20:23:21.291Z",
    "updatedAt": "2024-01-24T20:24:02.000Z",
    "id": "6DLZxIRQhO04qMcv",
    "name": "[Database pipeilne] match_status_history PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "5f2c5f97-a8c9-4e37-9602-b647ef552395",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          180,
          320
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   match_id,\n   status,\n   NOW() AS created_at\nFROM match.matches",
          "additionalFields": {}
        },
        "id": "63805aef-9431-4f2a-aa67-bc66082aa771",
        "name": "Fetch status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          400,
          320
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "schema": "match",
          "table": "match_status_history",
          "columns": "match_id, status, created_at",
          "additionalFields": {}
        },
        "id": "614c0aca-27f6-4acd-a6d8-c5a12a66da3a",
        "name": "Insert into match_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          620,
          320
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch status": {
        "main": [
          [
            {
              "node": "Insert into match_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "cab528b7-7048-4d93-98ff-1f8e2274d048",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-24T01:52:58.842Z",
    "updatedAt": "2024-02-21T14:11:46.000Z",
    "id": "7sAJUvibkGh0JAgD",
    "name": "[STG] Volunteer register integrations - Moodle / Zendesk / DB",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "moodle-zendesk-stg",
          "options": {}
        },
        "id": "ec03d47a-17bb-472a-bb03-b9875ef6650d",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -780,
          760
        ],
        "webhookId": "3e06675f-aa55-42cd-bfa1-be979b64b575"
      },
      {
        "parameters": {
          "errorMessage": "=Não achou a voluntária\nmoodle_id:  {{$node[\"Schedule Trigger\"].json[\"body\"][\"userid\"]}}"
        },
        "id": "e275a4f1-e50f-4a3d-ba86-d015d4324446",
        "name": "Stop And Error",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          200,
          1100
        ]
      },
      {
        "parameters": {
          "errorMessage": "=Não achou a voluntária\nvollunteer_id:  {{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
        },
        "id": "3f1e8542-fe25-4ed9-8869-89410347b7b8",
        "name": "Stop And Error1",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          860,
          500
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=select * from volunteers v\nleft join integrations_logs il on il.internal_id = v.id and il.form_type = v.occupation\nwhere\nil.integration = 'moodle'\nand il.\"type\" = 'matricular'\nand il.external_id = {{$node[\"Webhook\"].json[\"body\"][\n\"userid\"]}}",
          "additionalFields": {}
        },
        "id": "850b3099-d9a2-4e8e-8ff4-2c5ebaf9c6e0",
        "name": "Busca voluntária pelo moodle ID",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -340,
          760
        ],
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Busca voluntária pelo moodle ID\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "418c4bf0-8ccd-4a02-8ca3-ca9c6ff86193",
        "name": "Se retornou a voluntária",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -120,
          760
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "search",
          "limit": 30,
          "filters": {
            "query": "={{ $json.email }}"
          }
        },
        "id": "17a5aad0-69d2-4326-bd8f-b392c15dca4b",
        "name": "Busca voluntária pelo email",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          480,
          380
        ],
        "alwaysOutputData": true,
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  if (item.json.organization_id == 360269610652) {\n  \titem.json.subject =`[Advogada] ${item.json.name} - ${item.json.user_fields.registration_number}`;\n  } else {\n    item.json.subject =`[Psicóloga] ${item.json.name} - ${item.json.user_fields.registration_number}`;\n  }\n}\n\nreturn $input.all();"
        },
        "id": "3d85aed4-abf2-4d96-adf7-0a743cf7d95d",
        "name": "Monta o assunto do ticket de acordo com a organização da voluntária",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1320,
          640
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "=https://mapadoacolhimento.zendesk.com/api/v2/tickets/",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "zendeskApi",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n  \"ticket\": {\n\t\t\"requester_id\":{{$node[\"Atualiza status da voluntária no Zendesk\"].json[\"id\"]}},\n\t\t\"organization_id\": {{$node[\"Atualiza status da voluntária no Zendesk\"].json[\"organization_id\"]}},\n\t\t\"description\": \"Importado via N8N\",\n\t\t\"subject\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"subject\"] }}\",\n\t\t\"comment\": {\n\t\t\t\"body\": \"Cadastrada\",\n\t\t\t\"public\": false\n\t\t},\n\t\t\"status\": \"pending\",\n\t\t\"custom_fields\": [\n\t\t\t{\n\t\t\t\t\"id\": 360021879811, \n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"user_fields\"][\"city\"] }}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 360021812712, \n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"phone\"] }}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 360016631592, \n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"name\"] }}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 360021665652, \n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"user_fields\"][\"condition\"] }}\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 360021879791,\n\t\t\t\t\"value\": \"{{ $node[\"Monta o assunto do ticket de acordo com a organização da voluntária\"].json[\"user_fields\"][\"state\"] }}\"\n\t\t\t}\n\t\t]\n\t}\n}",
          "options": {}
        },
        "id": "5d2e5c0a-dec3-4ce3-8c83-5d3464e4b21a",
        "name": "Cria o ticket de entrada da voluntária pela API do Zendesk",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          2040,
          600
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "condition",
                "value": "aprovada"
              },
              {
                "name": "updated_at",
                "value": "={{$now}}"
              }
            ],
            "number": [
              {
                "name": "id",
                "value": "={{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
              },
              {
                "name": "zendesk_user_id",
                "value": "={{ $json[\"id\"] }}"
              }
            ]
          },
          "options": {}
        },
        "id": "0aba859e-8ebc-4fa1-a6b4-148073cf0fd5",
        "name": "Seta os campos para atualizar a voluntária no BD",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          1140,
          320
        ]
      },
      {
        "parameters": {
          "operation": "update",
          "table": "volunteers",
          "columns": "condition,updated_at",
          "additionalFields": {}
        },
        "id": "c6082349-906f-4332-8341-1759d1e6da15",
        "name": "Atualiza voluntária no BD1",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1320,
          320
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Mapa"
          }
        }
      },
      {
        "parameters": {
          "url": "=https://mapadoacolhimento.zendesk.com/api/v2/users/{{$node[\"Busca voluntária pelo email\"].json[\"id\"]}}/tickets/requested",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpBasicAuth",
          "options": {}
        },
        "id": "8728e726-facb-42f3-a4cd-8d03f70981eb",
        "name": "Busca os tickets da voluntária no Zendesk",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1520,
          320
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "fieldToSplitOut": "tickets",
          "include": "allOtherFields",
          "options": {}
        },
        "id": "c2084703-9aa1-4625-b36f-12c78938fc46",
        "name": "Separa os tickets do objeto retornado",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          1720,
          320
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Busca voluntária pelo email\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "40082f59-56dc-48dd-afaa-47405490c2b6",
        "name": "Se retornou a voluntária do Zendesk",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          660,
          340
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{ $json[\"id\"] }}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "capacitacao"
                }
              ]
            }
          }
        },
        "id": "77f841be-1883-451f-b6ae-cca58c5e7d4d",
        "name": "Atualiza status da voluntária no Zendesk",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          1140,
          680
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{ $json[\"id\"] }}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "aprovada"
                }
              ]
            }
          }
        },
        "id": "3641935c-baf2-48b6-b895-54a36305dcd9",
        "name": "Atualiza status da voluntária no Zendesk1",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          940,
          320
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "condition",
                "value": "capacitacao"
              },
              {
                "name": "updated_at",
                "value": "={{$now}}"
              }
            ],
            "number": [
              {
                "name": "id",
                "value": "={{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
              },
              {
                "name": "zendesk_user_id",
                "value": "={{$node[\"Atualiza status da voluntária no Zendesk\"].json[\"id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "0bbab4eb-681b-4fc8-930d-3b883e509083",
        "name": "Seta os campos para atualizar voluntária no BD",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          1540,
          620
        ]
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "status",
                "value": "capacitacao"
              },
              {
                "name": "created_at",
                "value": "={{$now}}"
              }
            ],
            "number": [
              {
                "name": "volunteer_id",
                "value": "={{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "ac580ab1-bbd2-495f-9cd3-62fa83ebf89d",
        "name": "Seta os campos para inserir na tabela volunteer_status_history",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          2260,
          600
        ]
      },
      {
        "parameters": {
          "table": "volunteer_status_history",
          "columns": "volunteer_id,status,created_at",
          "additionalFields": {}
        },
        "id": "48a9b852-f3ce-4445-863a-8ae70387ac51",
        "name": "Insere o novo status na tabela volunteer_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2500,
          680
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.tickets.custom_fields[6].value }}",
                "value2": "capacitcao"
              }
            ]
          }
        },
        "id": "5fedb180-78a5-4b6a-a6cb-fcbd11eb289e",
        "name": "Se o campo \"Status da Inscrição\" for igual a \"capacitacao\"",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1880,
          320
        ]
      },
      {
        "parameters": {
          "operation": "limit"
        },
        "id": "b17a5951-1a4d-4973-8941-31aadb50372b",
        "name": "Seleciona o ticket mais antigo",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          2100,
          300
        ]
      },
      {
        "parameters": {
          "operation": "update",
          "id": "={{ $json[\"tickets\"][\"id\"] }}",
          "updateFields": {
            "customFieldsUi": {
              "customFieldsValues": [
                {
                  "id": 360021665652,
                  "value": "aprovada"
                }
              ]
            }
          }
        },
        "id": "fb2d6dcc-43ad-4ccf-9575-5c00e6064e11",
        "name": "Atualiza o ticket para \"aprovada\"",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          2320,
          300
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "status",
                "value": "aprovada"
              },
              {
                "name": "created_at",
                "value": "={{ $now }} "
              }
            ],
            "number": [
              {
                "name": "volunteer_id",
                "value": "={{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "ace5280d-e1be-4abc-b7ee-bb6fc6f8ba4c",
        "name": "Seta os campos para inserir na tabela volunteer_status_history1",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          2520,
          300
        ]
      },
      {
        "parameters": {
          "table": "volunteer_status_history",
          "columns": "volunteer_id,status,created_at",
          "additionalFields": {}
        },
        "id": "05875b3e-6ac4-465f-aaa6-1f99c4a3bdba",
        "name": "Insere  o registro na volunteer_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2740,
          300
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE public.volunteers\nSET condition = '{{ $json[\"condition\"] }}', updated_at = NOW(), zendesk_user_id={{ $json[\"zendesk_user_id\"] }}\nWHERE id = {{ $json[\"id\"] }}",
          "options": {}
        },
        "id": "350b250c-54f2-4948-9968-b21b59f3ad36",
        "name": "Atualiza voluntária no BD",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1780,
          620
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Mapa"
          }
        }
      },
      {
        "parameters": {
          "dataType": "string",
          "value1": "={{$node[\"Webhook\"].json[\"body\"][\"eventname\"]}}",
          "rules": {
            "rules": [
              {
                "value2": "\\core\\event\\course_completed",
                "output": 1
              },
              {
                "value2": "\\mod_page\\event\\course_module_viewed",
                "output": 2
              }
            ]
          }
        },
        "id": "6f471765-5ba1-445a-8ad2-dec9fb295fc6",
        "name": "Determina o tipo de evento",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 1,
        "position": [
          320,
          680
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "id": "46733168-ab42-4f1d-be21-03d4f3d1b544",
                "leftValue": "={{ $json.body.eventname }}",
                "rightValue": "\\mod_page\\event\\course_module_viewed",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "0549c4e8-ec64-4fd5-8899-237c7c546ce3",
        "name": "É um evento de visualização de página?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          -480,
          1740
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "id": "cf155aa0-eb20-43dd-9f13-52caaddbe399",
                "leftValue": "={{ $json.body.objectid }}",
                "rightValue": "10",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "1c03ea88-032a-4c41-93ed-c09cb7970a78",
        "name": "É a última página do Módulo 1?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          -100,
          1720
        ]
      },
      {
        "parameters": {
          "resource": "mail",
          "fromEmail": "voluntaria@mapadoacolhimento.org",
          "fromName": "Equipe do Mapa do Acolhimento",
          "toEmail": "={{ $json.email }}",
          "dynamicTemplate": true,
          "templateId": "=d-4f40a08545264aa49991ca33141c8e95",
          "dynamicTemplateFields": {
            "fields": [
              {
                "key": "name",
                "value": "={{ $json.firstname }}"
              }
            ]
          },
          "additionalFields": {}
        },
        "id": "cf437306-ae55-44dd-8fc2-41cb7e29e0dd",
        "name": "SendGrid",
        "type": "n8n-nodes-base.sendGrid",
        "typeVersion": 1,
        "position": [
          360,
          1740
        ],
        "credentials": {
          "sendGridApi": {
            "id": "ewMQAncI0Om7E6AW",
            "name": "SendGrid account"
          }
        }
      },
      {
        "parameters": {
          "operation": "select",
          "schema": {
            "__rl": true,
            "value": "public",
            "mode": "name"
          },
          "table": {
            "__rl": true,
            "value": "mdl_user",
            "mode": "list",
            "cachedResultName": "mdl_user"
          },
          "limit": 1,
          "where": {
            "values": [
              {
                "column": "id",
                "value": "={{ $json.body.userid }}"
              }
            ]
          },
          "options": {
            "outputColumns": [
              "email",
              "firstname"
            ]
          }
        },
        "id": "47ee1f93-849f-4998-87db-7c4d6ddeecab",
        "name": "Busca e-mail e primeiro nome da voluntária",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          160,
          1740
        ],
        "credentials": {
          "postgres": {
            "id": "KHoy20BFgrBIpHYR",
            "name": "[PROD] Moodle"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "id": "b4c9bdc8-6d21-48ea-88c4-6fed9800ea33",
                "leftValue": "={{ $json[\"condition\"] }}",
                "rightValue": "cadastrada",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "0babbfd8-f692-41bd-9f15-c2835e78a40d",
        "name": "O atual status da mulher é cadastrada?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          500,
          880
        ]
      },
      {
        "parameters": {},
        "id": "c314ebd0-346c-4eac-b3db-e0aa08f61a30",
        "name": "No Operation, do nothing",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          840,
          1160
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "search",
          "limit": 30,
          "filters": {
            "query": "={{ $json.email }}"
          }
        },
        "id": "40b9c163-5bc0-40b2-b31b-6ef11f1bcbed",
        "name": "Busca voluntária pelo email1",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          760,
          760
        ],
        "alwaysOutputData": true,
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "errorMessage": "=Não achou a voluntária\nvollunteer_id:  {{$node[\"Busca voluntária pelo moodle ID\"].json[\"internal_id\"]}}"
        },
        "id": "9ed4e4f5-b0ed-4571-b736-4a0036faa0f8",
        "name": "Stop And Error2",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          1140,
          1180
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Busca voluntária pelo email1\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "2a265cae-9008-40fa-a656-79b53049023a",
        "name": "Se retornou a voluntária do Zendesk1",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          940,
          740
        ]
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Busca voluntária pelo moodle ID",
              "type": "main",
              "index": 0
            },
            {
              "node": "É um evento de visualização de página?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca voluntária pelo moodle ID": {
        "main": [
          [
            {
              "node": "Se retornou a voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se retornou a voluntária": {
        "main": [
          [
            {
              "node": "Determina o tipo de evento",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca voluntária pelo email": {
        "main": [
          [
            {
              "node": "Se retornou a voluntária do Zendesk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Monta o assunto do ticket de acordo com a organização da voluntária": {
        "main": [
          [
            {
              "node": "Seta os campos para atualizar voluntária no BD",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Cria o ticket de entrada da voluntária pela API do Zendesk": {
        "main": [
          [
            {
              "node": "Seta os campos para inserir na tabela volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seta os campos para atualizar a voluntária no BD": {
        "main": [
          [
            {
              "node": "Atualiza voluntária no BD1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza voluntária no BD1": {
        "main": [
          [
            {
              "node": "Busca os tickets da voluntária no Zendesk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca os tickets da voluntária no Zendesk": {
        "main": [
          [
            {
              "node": "Separa os tickets do objeto retornado",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Separa os tickets do objeto retornado": {
        "main": [
          [
            {
              "node": "Se o campo \"Status da Inscrição\" for igual a \"capacitacao\"",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se retornou a voluntária do Zendesk": {
        "main": [
          [
            {
              "node": "Atualiza status da voluntária no Zendesk1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza status da voluntária no Zendesk": {
        "main": [
          [
            {
              "node": "Monta o assunto do ticket de acordo com a organização da voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza status da voluntária no Zendesk1": {
        "main": [
          [
            {
              "node": "Seta os campos para atualizar a voluntária no BD",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seta os campos para atualizar voluntária no BD": {
        "main": [
          [
            {
              "node": "Atualiza voluntária no BD",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seta os campos para inserir na tabela volunteer_status_history": {
        "main": [
          [
            {
              "node": "Insere o novo status na tabela volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se o campo \"Status da Inscrição\" for igual a \"capacitacao\"": {
        "main": [
          [
            {
              "node": "Seleciona o ticket mais antigo",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seleciona o ticket mais antigo": {
        "main": [
          [
            {
              "node": "Atualiza o ticket para \"aprovada\"",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza o ticket para \"aprovada\"": {
        "main": [
          [
            {
              "node": "Seta os campos para inserir na tabela volunteer_status_history1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Seta os campos para inserir na tabela volunteer_status_history1": {
        "main": [
          [
            {
              "node": "Insere  o registro na volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza voluntária no BD": {
        "main": [
          [
            {
              "node": "Cria o ticket de entrada da voluntária pela API do Zendesk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Determina o tipo de evento": {
        "main": [
          [],
          [
            {
              "node": "Busca voluntária pelo email",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "O atual status da mulher é cadastrada?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "É um evento de visualização de página?": {
        "main": [
          [
            {
              "node": "É a última página do Módulo 1?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "É a última página do Módulo 1?": {
        "main": [
          [],
          [
            {
              "node": "Busca e-mail e primeiro nome da voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca e-mail e primeiro nome da voluntária": {
        "main": [
          [
            {
              "node": "SendGrid",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "O atual status da mulher é cadastrada?": {
        "main": [
          [
            {
              "node": "Busca voluntária pelo email1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "No Operation, do nothing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca voluntária pelo email1": {
        "main": [
          [
            {
              "node": "Se retornou a voluntária do Zendesk1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Se retornou a voluntária do Zendesk1": {
        "main": [
          [
            {
              "node": "Atualiza status da voluntária no Zendesk",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "05fb9da8-832a-411c-a3e4-14af5aafae89",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-24T01:51:54.592Z",
        "updatedAt": "2024-01-24T01:51:54.592Z",
        "id": "9qHi7Mg3P0urkBHm",
        "name": "volunteer"
      }
    ]
  },
  {
    "createdAt": "2024-01-28T19:28:55.278Z",
    "updatedAt": "2024-01-28T22:15:21.000Z",
    "id": "9aiyI0NN9sgHlK2y",
    "name": "[BUGFIX] Voluntárias não disponíveis recebendo matches",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "37d42e57-69fa-4060-94b5-69eef9a33afd",
        "name": "When clicking \"Test Workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          600,
          320
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "WITH previous_status AS (\n    SELECT \n        volunteer_id AS id,\n        condition,\n        h.status AS previous_status,\n        h.created_at,\n        ROW_NUMBER() OVER(PARTITION BY volunteer_id ORDER BY h.created_at) AS rn\n    FROM match.matches m\n    LEFT JOIN volunteers v ON id = volunteer_id\n    LEFT JOIN volunteer_status_history h USING (volunteer_id)\n    WHERE \n        match_stage = 'ideal'\n        AND volunteer_id NOT IN (21483, 18903, 27796 )\n        AND condition = 'indisponivel_sem_vagas'\n    ORDER BY h.volunteer_id, h.created_at DESC\n)\nSELECT * \nFROM previous_status\nWHERE rn = 1",
          "options": {}
        },
        "id": "18e235fd-eacb-4451-90ce-963cf6956af5",
        "name": "Busca voluntárias que se tornaram \"indisponivel_sem_vagas\"",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1000,
          200
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE volunteers\nSET condition = '{{ $json.previous_status }}'\nWHERE id = {{ $json.id }}",
          "options": {}
        },
        "id": "4ae0a2d1-b096-43c2-a757-9b4ee4e267d3",
        "name": "Volta status pro status anterior",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1280,
          -40
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "DELETE FROM volunteer_status_history\nWHERE volunteer_id = {{ $json.id }} AND status = 'indisponivel_sem_vagas'\n",
          "options": {}
        },
        "id": "317c1b55-9c43-4522-9ce0-1093a5f3edc5",
        "name": "Deleta 'indisponivel_sem_vagas' da tabela volunteer_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1280,
          160
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    msr_id,\n    zendesk_ticket_id,\n    support_type,\n    'open' AS status,\n    null AS support_expertise,\n    null AS priority,\n    null AS has_disability,\n    null AS requires_libras,\n    accepts_online_support,\n    lat,\n    lng,\n    city,\n    state\nFROM match.support_requests \nWHERE \n    support_request_id IN (57972, 57973, 57976, 57971, 57977, 57978, 57980, 57979, 57981, 57982, 57983, 57984, 57985, 57986, 57987, 57988, 57989, 57992, 57991, 57995, 57994, 57996, 57997, 57999, 57998)\n",
          "options": {}
        },
        "id": "0c0dc92a-171c-4cee-a91a-7634c74d0f87",
        "name": "Gera json para enviar para lambda e obter novos matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1000,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "DELETE FROM match.matches\nWHERE support_request_id IN (57972, 57973, 57976, 57971, 57977, 57978, 57980, 57979, 57981, 57982, 57983, 57984, 57985, 57986, 57987, 57988, 57989, 57992, 57991, 57995, 57994, 57996, 57997, 57999, 57998)",
          "options": {}
        },
        "id": "23db0a1c-a74c-4aba-a6f0-1ba38c543aca",
        "name": "Deleta matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1000,
          1040
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT \n  support_request_id\nFROM match.support_requests\nWHERE \n    support_request_id IN (57972, 57973, 57976, 57971, 57977, 57978, 57980, 57979, 57981, 57982, 57983, 57984, 57985, 57986, 57987, 57988, 57989, 57992, 57991, 57995, 57994, 57996, 57997, 57999, 57998)\n\n\n",
          "options": {}
        },
        "id": "38450e15-2024-47b7-bd2b-db8f496bbfe2",
        "name": "Busca support_requests errados",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1000,
          780
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE match.support_requests\nSET status = 'closed', updated_at = NOW()\nWHERE support_request_id = {{ $json.support_request_id }}\n\nINSERT INTO match.support_request_status_history (support_request_id, status, created_at)\nVALUES ({{ $json.support_request_id, 'closed', NOW() }})",
          "options": {}
        },
        "id": "d9a542a1-a1c7-4f6b-a624-a29113d98242",
        "name": "Atualiza status para 'closed'",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1220,
          780
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      }
    ],
    "connections": {
      "Busca voluntárias que se tornaram \"indisponivel_sem_vagas\"": {
        "main": [
          [
            {
              "node": "Volta status pro status anterior",
              "type": "main",
              "index": 0
            },
            {
              "node": "Deleta 'indisponivel_sem_vagas' da tabela volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca support_requests errados": {
        "main": [
          [
            {
              "node": "Atualiza status para 'closed'",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "959e1478-f83e-4570-9e06-5cbefcbe06ab",
    "triggerCount": 0,
    "tags": []
  },
  {
    "createdAt": "2024-01-16T20:49:50.001Z",
    "updatedAt": "2024-01-24T21:03:22.000Z",
    "id": "BDKJhldTcqLnqcCt",
    "name": "Fluxo de voluntárias ZendeskXANXBD",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "functionCode": "api_domain = \"https://actionnetwork.org/api/v2\";\n\npayload = {};\npayload_action = {};\nrequest = {};\n\npayload_action[\"id\"] = item.ticket_id;\npayload_action[\"title\"] = `Atendimento #${item.id} ${item.custom_fields[12].value} `;\npayload_action[\"description\"] = `Encaminhamento para a MSR: ${item.custom_fields[12].value}`;\npayload_action[\"origin_system\"] = \"MAPA\";\n\n\ngiven_name = item.name.substring(0, item.name.indexOf(\" \"));\nfamily_name = item.name.substring(item.name.indexOf(\" \") + 1);\n\nperson = {\n  given_name: given_name,\n  family_name: family_name,\n  email_addresses: [\n    {\n      address: item.email,\n    },\n  ],\n  languages_spoken: [\"pt-BR\"],\n};\npayload[\"person\"] = person;\npayload[\"add_tags\"] = [\"encaminhamento-realizado\"];\n\n\n\n// # CUSTOM FIELDS\ncustom_fields = {};\nif (item.user_fields.gender) {\n  custom_fields[\"gender\"] = item.user_fields.gender;\n}\nif (item.user_fields.cor) {\n  custom_fields[\"cor\"] = item.user_fields.cor;\n}\nif (item.user_fields.state) {\n  custom_fields[\"estado\"] = item.user_fields.state;\n}\nif (item.user_fields.city) {\n  custom_fields[\"cidade\"] = item.user_fields.city;\n}\n\n/*Encaminhamentos realizados [calculado], Atendimentos em andamento [calculado], Atendimentos concluídos [calculado] */\nif (item.user_fields.encaminhamentos_realizados_calculado_){\n  custom_fields[\"encaminhamentos_realizados_calculado\"] = item.user_fields.encaminhamentos_realizados_calculado_\n}\nif (item.user_fields.atendimentos_concludos_calculado_){\n  custom_fields[\"atendimentos_concluidos_calculado\"] = item.user_fields.atendimentos_concludos_calculado_\n}\nif (item.user_fields.atendimentos_em_andamento_calculado_){\n  custom_fields[\"atendimentos_em_andamento_calculado\"] = item.user_fields.atendimentos_em_andamento_calculado_\n}\n\nmatch_number = ''\nswitch(item.user_fields.encaminhamentos_realizados_calculado_) {\n  case 2:\n    match_number = '2'\n    break;\n  case 3:\n    match_number = '3'\n    break;\n  default:\n    match_number = '1'\n}\ncustom_fields[\"m\"+match_number +\"-nome-msr\"] = item.custom_fields[12].value\ncustom_fields[\"m\"+match_number +\"-data-encaminhamento\"] = item.created_at\n\n//{\"ADVOGADA\":\"360269610652\",\"MSR\":\"360273031591\",\"PSICOLOGA\":\"360282119532\"}\nif (item.organization_id = 360269610652) {\n  custom_fields[\"oab\"] = item.user_fields.registration_number\n  } else {\n    if (item.organization_id = 360282119532) {\n    custom_fields[\"crp\"] = item.user_fields.registration_number\n  }\n  }\ncustom_fields[\"m\"+match_number +\"-link\"] = item.custom_fields[4].value\ncustom_fields[\"m\"+match_number +\"-status-atendimento\"] = item.custom_fields[8].value\ncustom_fields[\"status-voluntaria\"] = item.user_fields.condition\n // `https://mapadoacolhimento.zendesk.com/agent/tickets/${item.id}`\n\n\npayload[\"person\"][\"custom_fields\"] = custom_fields;\n\nrequest = {\n  path: `${api_domain}/forms/`,\n  an_resource_name: \"submissions\",\n  headers: {\n    \"OSDI-API-Token\": \"22338da900df9848af38babe24aba9cc\",\n    \"Content-Type\": \"application/json\",\n  },\n};\n\nreturn {\n  payload,\n  payload_action,\n  request,\n};\n"
        },
        "id": "f267323f-d631-482b-a78d-fe1018b2813f",
        "name": "Preparar Inserção AN",
        "type": "n8n-nodes-base.functionItem",
        "typeVersion": 1,
        "position": [
          1320,
          780
        ]
      },
      {
        "parameters": {
          "operation": "get",
          "id": "={{ $json[\"body\"][\"ticket\"][\"id\"] }}"
        },
        "id": "5890ebfe-42e4-4584-b98d-dced07a50099",
        "name": "Zendesk",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          420,
          820
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "get",
          "id": "={{ $json[\"requester_id\"] }}"
        },
        "id": "6d849488-7d2f-480e-ba39-278f84824e48",
        "name": "Zendesk1",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          840,
          600
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "id",
                "field2": "requester_id"
              }
            ]
          },
          "options": {}
        },
        "id": "02315ab0-f664-4a5f-9965-57d3b6926996",
        "name": "Merge",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1080,
          780
        ]
      },
      {
        "parameters": {},
        "id": "c9fb5cf3-bbe9-4b17-849f-e87cdddd3af2",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          1060,
          1420
        ]
      },
      {
        "parameters": {
          "requestMethod": "POST",
          "url": "={{ $json[\"_links\"][\"osdi:submissions\"][\"href\"] }}",
          "jsonParameters": true,
          "options": {},
          "bodyParametersJson": "={{ $node[\"Preparar Inserção AN\"].json[\"payload\"] }}",
          "headerParametersJson": "={{ $node[\"Preparar Inserção AN\"].json[\"request\"][\"headers\"] }}"
        },
        "id": "e7925ebc-688e-4691-9ec3-52586217ad05",
        "name": "Criar ação de ativista AN1",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 2,
        "position": [
          1740,
          780
        ]
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "zendesk-an",
          "options": {}
        },
        "id": "5604f4fb-a59b-43f8-916d-b516cd3c79ed",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          140,
          820
        ],
        "webhookId": "d7dcf5d2-dbe4-4386-b75d-2027eab1f488"
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json[\"fields\"][\"4\"][\"value\"] }}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "b7fd84fe-f319-4212-9ecd-306270527bbf",
        "name": "IF se tem a info de link do match",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          660,
          820
        ]
      },
      {
        "parameters": {
          "requestMethod": "POST",
          "url": "= {{ $json[\"request\"][\"path\"] }}",
          "jsonParameters": true,
          "options": {},
          "bodyParametersJson": "={{ $json[\"payload_action\"] }}",
          "headerParametersJson": "={{ $json[\"request\"][\"headers\"] }}"
        },
        "id": "a7617f97-e333-4687-a7e0-64547d4a5846",
        "name": "Criar ação de match AN",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 2,
        "position": [
          1540,
          780
        ],
        "continueOnFail": true
      },
      {
        "parameters": {
          "content": "## Atulização de cadastro\nSempre que for um ticket de voluntária: \nbuscar a voluntária na AN verifcar a iformações, condition e os campos relacionados a endereço, pegar as infos extras da inscrição no mautic. ",
          "height": 236.55636567582724,
          "width": 297.7117218171622
        },
        "id": "6582d852-59b4-496a-a4bb-9a891c85209a",
        "name": "Note",
        "type": "n8n-nodes-base.stickyNote",
        "typeVersion": 1,
        "position": [
          340,
          1120
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "get",
          "id": "={{ $json[\"requester_id\"] }}"
        },
        "id": "a3389d32-a4ac-4a87-99a6-b14793b4bdff",
        "name": "Zendesk2",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          1060,
          1160
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "api_domain = \"https://actionnetwork.org/api/v2\";\n\npayload = {};\npayload_action = {};\nrequest = {};\naddress = {};\n\ngiven_name = item.name.substring(0, item.name.indexOf(\" \"));\nfamily_name = item.name.substring(item.name.indexOf(\" \") + 1);\n\nperson = {\n  given_name: given_name,\n  family_name: family_name,\n  email_addresses: [\n    {\n      address: item.email,\n    },\n  ],\n  address,\n  languages_spoken: [\"pt-BR\"],\n};\npayload[\"person\"] = person;\n\npayload[\"add_tags\"] = item.tags; //[\"indisponível_outros_motivos\"]\n\n\n\n// # CUSTOM FIELDS\ncustom_fields = {};\nif (item.user_fields.gender) {\n  custom_fields[\"gender\"] = item.user_fields.gender;\n}\nif (item.user_fields.cor) {\n  custom_fields[\"cor\"] = item.user_fields.cor;\n}\nif (item.user_fields.state) {\n  custom_fields[\"estado\"] = item.user_fields.state;\n}\nif (item.user_fields.city) {\n  custom_fields[\"cidade\"] = item.user_fields.city;\n}\n\nif (item.user_fields.birth_date) {\n  custom_fields[\"birth_date\"] = item.user_fields.birth_date;\n}\n\nif (item.user_fields.libras) {\n  custom_fields[\"libras\"] = item.user_fields.libras;\n}\n\nif (item.user_fields.years_of_experience) {\n  custom_fields[\"years_of_experience\"] = item.user_fields.years_of_experience;\n}          \n   \nif (item.user_fields.approach) {\n  custom_fields[\"approach\"] = item.user_fields.approach;\n}        \n\nif (item.user_fields.modality) {\n  custom_fields[\"modality\"] = item.user_fields.modality;\n}            \n \nif (item.user_fields.fields_of_work) {\n  custom_fields[\"fields_of_work\"] = item.user_fields.fields_of_work;\n}         \n\naddress['country'] = 'BR'\n\n//{\"ADVOGADA\":\"360269610652\",\"MSR\":\"360273031591\",\"PSICOLOGA\":\"360282119532\"}\nif (item.organization_id = 360269610652) {\n  custom_fields[\"oab\"] = item.user_fields.registration_number\n  } else {\n    if (item.organization_id = 360282119532) {\n    custom_fields[\"crp\"] = item.user_fields.registration_number\n  }\n  }\n\ncustom_fields[\"status-voluntaria\"] = item.user_fields.condition\n // `https://mapadoacolhimento.zendesk.com/agent/tickets/${item.id}`\n\n\npayload[\"person\"][\"custom_fields\"] = custom_fields;\n\nrequest = {\n  path: `${api_domain}/forms/`,\n  an_resource_name: \"submissions\",\n  headers: {\n    \"OSDI-API-Token\": \"13e153fdaad7ef46cf087216c88b1284\",\n    \"Content-Type\": \"application/json\",\n  },\n};\n\nreturn {\n  payload,\n  request,\n};\n"
        },
        "id": "fd62d854-35a3-45f4-8385-6115dab63c68",
        "name": "Preparar Atualização AN",
        "type": "n8n-nodes-base.functionItem",
        "typeVersion": 1,
        "position": [
          1280,
          1160
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "id",
                "field2": "requester_id"
              }
            ]
          },
          "options": {}
        },
        "id": "5450ce9b-371f-4460-84fc-4243de38ff0f",
        "name": "Merge1",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          340,
          1540
        ]
      },
      {
        "parameters": {
          "rule": {
            "interval": [
              {
                "field": "seconds"
              }
            ]
          }
        },
        "id": "f60afffb-ccb9-45eb-81e2-2ebff968ccc3",
        "name": "Schedule Trigger",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1,
        "position": [
          240,
          960
        ]
      },
      {
        "parameters": {
          "requestMethod": "POST",
          "url": "https://actionnetwork.org/api/v2/forms/8f1f013a-7c42-4971-b82f-077dd34e5996/submissions",
          "jsonParameters": true,
          "options": {},
          "bodyParametersJson": "={{$node[\"Preparar Atualização AN\"].json[\"payload\"]}}",
          "headerParametersJson": "={{ $node[\"Preparar Atualização AN\"].json[\"request\"][\"headers\"] }}"
        },
        "id": "dd2a4e7d-42c6-4017-a46a-1f72344e1849",
        "name": "Criar ação de ativista AN",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 2,
        "position": [
          1540,
          1160
        ]
      },
      {
        "parameters": {
          "content": "## LEMBRAR ANTES DE ATIVAR O FLUXO\n**ATULAIZAR** \n- CHAVES DOS GRUPOS\n- AÇÃO DE ATUALIZAÇÃO\n- BANCO DE DADOS\n**ATIAVAR**\n- GATILHO NO ZENDESK ",
          "height": 236.86127041454168,
          "width": 274.68874645288037
        },
        "id": "9829fccd-f9e6-4381-a0ba-fed0cae43a6b",
        "name": "Note1",
        "type": "n8n-nodes-base.stickyNote",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "conditions": {
            "number": [
              {
                "value1": "={{ $json[\"organization_id\"] }}",
                "operation": "equal",
                "value2": 360269610652
              },
              {
                "value1": "={{ $json[\"organization_id\"] }}",
                "operation": "equal",
                "value2": 360282119532
              }
            ]
          },
          "combineOperation": "any"
        },
        "id": "b7085b73-e327-409c-a971-717cedd298be",
        "name": "IF organização do ticket for psicologa ou advogada",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          800,
          1180
        ]
      },
      {
        "parameters": {
          "schema": "mapa_do_acolhimento",
          "table": "logs_an",
          "columns": "user_id:int,email:text,organization_id:int8,an_response:jsonb",
          "additionalFields": {}
        },
        "id": "8f84b27a-546f-4b87-84e8-312e3fa0f942",
        "name": "Postgres",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1980,
          1160
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "number": [
              {
                "name": "user_id",
                "value": "={{$node[\"Zendesk2\"].json[\"external_id\"]}}"
              },
              {
                "name": "organization_id",
                "value": "={{$node[\"Zendesk2\"].json[\"organization_id\"]}}"
              }
            ],
            "string": [
              {
                "name": "email",
                "value": "={{$node[\"Zendesk2\"].json[\"email\"]}}"
              },
              {
                "name": "an_response",
                "value": "={{$node[\"Criar ação de ativista AN\"].json}}"
              }
            ]
          },
          "options": {}
        },
        "id": "8fba70aa-f9b3-498c-85fc-cd54048d2637",
        "name": "Set",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          1780,
          1160
        ]
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "number": [
              {
                "name": "user_id",
                "value": "={{$node[\"Zendesk1\"].json[\"external_id\"]}}"
              },
              {
                "name": "organization_id",
                "value": "={{$node[\"Zendesk1\"].json[\"organization_id\"]}}"
              }
            ],
            "string": [
              {
                "name": "email",
                "value": "={{$node[\"Zendesk1\"].json[\"email\"]}}"
              },
              {
                "name": "an_response",
                "value": "={{$node[\"Criar ação de ativista AN1\"].json}}"
              }
            ]
          },
          "options": {}
        },
        "id": "02ecb6a1-f575-4567-983e-6206d264ac7c",
        "name": "Set1",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          1940,
          780
        ]
      },
      {
        "parameters": {
          "schema": "mapa_do_acolhimento",
          "table": "logs_an",
          "columns": "user_id:int,email:text,organization_id:int8,an_response:jsonb",
          "additionalFields": {}
        },
        "id": "1acf697b-5376-4311-b253-6836afe4cbe3",
        "name": "Postgres1",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2160,
          780
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=select * from volunteers where email = '{{$node[\"Zendesk2\"].json[\"email\"]}}'",
          "additionalFields": {}
        },
        "id": "8a24bafc-22ff-4e7b-9b3d-d1b1d9b45c84",
        "name": "Postgres3",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1260,
          1360
        ],
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Postgres3\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "c0a652c1-d114-47ca-8cc4-5d70daf51078",
        "name": "IF",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1480,
          1360
        ]
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "condition",
                "value": "={{ $node[\"Zendesk2\"].json[\"user_fields\"][\"condition\"] }}"
              },
              {
                "name": "color",
                "value": "={{ $node[\"Zendesk2\"].json[\"user_fields\"][\"cor\"] }}"
              },
              {
                "name": "state",
                "value": "={{ $node[\"Zendesk2\"].json[\"user_fields\"][\"state\"] }}"
              },
              {
                "name": "id",
                "value": "={{ $json[\"id\"] }}"
              }
            ]
          },
          "options": {}
        },
        "id": "448e53ea-f2a9-421e-9ac2-f8b806f7394d",
        "name": "Set2",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          1700,
          1340
        ]
      },
      {
        "parameters": {
          "operation": "update",
          "table": "volunteers",
          "columns": "condition:text,color:text,state:text",
          "additionalFields": {}
        },
        "id": "77ce4653-3e37-4fef-9638-7d3d77f1b28c",
        "name": "Postgres4",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1900,
          1340
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde"
          }
        }
      }
    ],
    "connections": {
      "Preparar Inserção AN": {
        "main": [
          [
            {
              "node": "Criar ação de match AN",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Zendesk": {
        "main": [
          [
            {
              "node": "IF se tem a info de link do match",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Zendesk1": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Preparar Inserção AN",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF se tem a info de link do match": {
        "main": [
          [
            {
              "node": "Zendesk1",
              "type": "main",
              "index": 0
            },
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ],
          [
            {
              "node": "IF organização do ticket for psicologa ou advogada",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar ação de match AN": {
        "main": [
          [
            {
              "node": "Criar ação de ativista AN1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Zendesk2": {
        "main": [
          [
            {
              "node": "Preparar Atualização AN",
              "type": "main",
              "index": 0
            },
            {
              "node": "Postgres3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Preparar Atualização AN": {
        "main": [
          [
            {
              "node": "Criar ação de ativista AN",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF organização do ticket for psicologa ou advogada": {
        "main": [
          [
            {
              "node": "Zendesk2",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar ação de ativista AN": {
        "main": [
          [
            {
              "node": "Set",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set": {
        "main": [
          [
            {
              "node": "Postgres",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar ação de ativista AN1": {
        "main": [
          [
            {
              "node": "Set1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set1": {
        "main": [
          [
            {
              "node": "Postgres1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Zendesk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Postgres3": {
        "main": [
          [
            {
              "node": "IF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF": {
        "main": [
          [
            {
              "node": "Set2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set2": {
        "main": [
          [
            {
              "node": "Postgres4",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": {
      "node:Schedule Trigger": {
        "recurrencyRules": []
      }
    },
    "meta": null,
    "pinData": {
      "Schedule Trigger": [
        {
          "json": {
            "headers": {
              "host": "n8n.bonde.org",
              "user-agent": "Zendesk Webhook",
              "content-length": "456",
              "accept-encoding": "gzip",
              "authorization": "Basic ZW5yaWNhQG5vc3Nhcy5vcmcvdG9rZW46OEp6MHlhY0J1d0JYNTY5VXVhYjdGbnRxMmRSdGVySkQzTTd0YlQ1Yw==",
              "content-type": "application/json; charset=utf-8",
              "x-forwarded-for": "216.198.2.195",
              "x-forwarded-host": "n8n.bonde.org",
              "x-forwarded-port": "443",
              "x-forwarded-proto": "https",
              "x-forwarded-server": "06fdcd1c7d5d",
              "x-real-ip": "216.198.2.195",
              "x-request-id": "2c350b53-ef85-416f-b5e8-0d86a9d446c5",
              "x-zendesk-account-id": "9040899",
              "x-zendesk-webhook-id": "01HA2WTAQMRR61M7TC40EJ4MFW",
              "x-zendesk-webhook-invocation-id": "01HDKH4APSHXDPJR5YFBQPX40P",
              "x-zendesk-webhook-signature": "/pvd2xgJkeslz1fmpUEOvx7wVdM4xQVSrwAetppyisM=",
              "x-zendesk-webhook-signature-timestamp": "2023-10-25T13:42:05Z"
            },
            "params": {},
            "query": {},
            "body": {
              "ticket": {
                "id": "23307",
                "priority": "",
                "status": "Pendente",
                "subject": "",
                "description": "---------------------------------------------- Atualizado por: teste teste, 1 de jul. de 2020, 13:44 -",
                "fields": "",
                "requester_id": "",
                "organization_id": "",
                "tags": "3 5_ou_mais branca indigena reprovada_-_diretrizes_do_mapa reprovada_diretrizes_do_mapa reprovada_estudo_de_caso rn sp"
              }
            }
          }
        }
      ]
    },
    "versionId": "a2277bfa-59b5-4849-8532-eaae4d6d14cf",
    "triggerCount": 2,
    "tags": [
      {
        "createdAt": "2024-01-16T17:41:58.269Z",
        "updatedAt": "2024-01-16T17:41:58.269Z",
        "id": "E3Tnq8M430hgCQfP",
        "name": "Mapa do acolhimento"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:26:50.318Z",
    "updatedAt": "2024-01-16T21:44:26.000Z",
    "id": "BZDbnG6BWaw8pZ2y",
    "name": "[Database Pipeline] - support_requests PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "a107581e-6958-4d37-8616-0e66d143997b",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -1020,
          1480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT city_value, state\nFROM public.cities",
          "additionalFields": {}
        },
        "id": "21c5d097-011d-44b9-864a-68cd25c9d60b",
        "name": "Fetch cities",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -300,
          1160
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "city",
                "field2": "city_value"
              },
              {
                "field1": "state",
                "field2": "state"
              }
            ]
          },
          "options": {}
        },
        "id": "99ecab45-58b2-4656-bd47-2b06ec48eb9d",
        "name": "MSRs with valid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          460,
          780
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "city",
                "field2": "city_value"
              },
              {
                "field1": "state",
                "field2": "state"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "18787188-b054-4a93-aa97-5578aa76a9d3",
        "name": "MSRs with invalid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          460,
          1120
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    item.json.zipcode = \"not_found\";\n  }\n  \n}\n\nreturn $input.all();"
        },
        "id": "f9b98b30-07b7-49df-a1dd-d23d1a84d073",
        "name": "Normalize city and zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          840,
          780
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    output.push(\n      {\n        msr_id: item.json.msr_id,\n        zipcode: \"not_found\",\n        city: \"not_found\",\n        state: \"not_found\"\n      }\n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "171e9dd5-ea9d-43b1-b9fb-9c3cbd023cfd",
        "name": "MSRs with invalid zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          860,
          1120
        ]
      },
      {
        "parameters": {},
        "id": "19783308-dc25-49af-9511-cfa40d715db6",
        "name": "MSRs with correct city + MSRs with invalid zipcode",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1600,
          760
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNotNull = item.json.zipcode;\n  const zipcodeHasCorrectLength = item.json.zipcode ? item.json.zipcode.length === 8 : false;\n  const zipcodeIsANumber = !isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNotNull && zipcodeHasCorrectLength && zipcodeIsANumber){\n    output.push(\n      {\n        msr_id: item.json.msr_id,\n        zipcode: item.json.zipcode\n      }\n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "143d5673-9e9c-445a-ba75-22d382078ca4",
        "name": "MSRs with valid zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          860,
          1400
        ]
      },
      {
        "parameters": {
          "jsCode": "const output = [];\n\nfor (const item of $input.all()) {\n\n  if(item.json.city){\n    \n    const normalizedName = item.json.city\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \") \n    .replace(/ *\\([^)]*\\) */g, \"\")\n    .toUpperCase();\n  \n    output.push(\n      {\n        zipcode: item.json.cep,\n        city: normalizedName,\n        state: item.json.state\n      } \n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "213a9d94-9cc2-44ca-a2ef-769b8f8a40ae",
        "name": "Standardize found cities",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1540,
          1700
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  if(item.json.city === \"IPIABAS\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"SAO JOSE DO TURVO\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"CAETE-ACU\" && item.json.state === \"BA\"){\n    item.json.city = \"PALMEIRAS\";\n  }\n  if(item.json.city === \"MORAES ALMEIDA\" && item.json.state === \"PA\"){\n    item.json.city = \"ITAITUBA\";\n  }\n  \n}\n\n\nreturn $input.all();"
        },
        "id": "8d00b05d-73a4-41ce-bfbd-2202b0f4cdf7",
        "name": "Handle corner cases",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1740,
          1700
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const newItem = {\n    zipcode: item.json.zipcode\n  }\n  \n  if(!output.includes(newItem)){\n    output.push(newItem)   \n  }\n}\n\nreturn output;"
        },
        "id": "ad6932d5-0035-4fe2-a3e2-dd279629af0d",
        "name": "Select distinct zipcodes",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1120,
          1700
        ]
      },
      {
        "parameters": {
          "url": "=https://brasilapi.com.br/api/cep/v1/{{$json[\"zipcode\"]}}",
          "options": {
            "batching": {
              "batch": {
                "batchSize": 20
              }
            },
            "response": {
              "response": {
                "neverError": true
              }
            }
          }
        },
        "id": "2cc083df-8b45-4ddc-b36a-be9791f4c385",
        "name": "Fetch city from zipcode",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1340,
          1700
        ],
        "executeOnce": false
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.city = \"not_found\";\n  item.json.state = \"not_found\";\n}\n\nreturn $input.all();"
        },
        "id": "ae99e598-3ca7-454f-87d3-623b2f10d434",
        "name": "Add NOT_FOUND city and state",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          2380,
          1680
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zipcode",
                "field2": "zipcode"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "bdac61c9-03f7-4ae7-99e6-c9d8878f2cf8",
        "name": "MSRs with new cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2160,
          1420
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zipcode",
                "field2": "zipcode"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "26a7355c-babf-4660-ba5d-0629ba79e400",
        "name": "MSRs with not found cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2140,
          1680
        ]
      },
      {
        "parameters": {},
        "id": "376f8e7f-8c11-43e2-ae2e-8a09301446c9",
        "name": "MSRs after Brasil API",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2640,
          1440
        ]
      },
      {
        "parameters": {},
        "id": "aa0ff184-4274-433e-91c8-a4d61157cb64",
        "name": "All MSRs with correct cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3200,
          1040
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    user_id AS msr_id,\n    latitude AS lat,\n    longitude AS lng \nFROM public.solidarity_users \nWHERE \n    organization_id = 360273031591\n",
          "additionalFields": {}
        },
        "id": "639f653d-e399-4c7b-b000-f8ad184fe922",
        "name": "Fetches lat long",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -280,
          2500
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde postgres"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  \n  if(!item.json.lat || !item.json.lng)\n  {\n    item.json.lat = null;\n    item.json.lng = null;\n  }\n  else {\n    \n    const isLatitudeNotANumber = isNaN(item.json.lat);\n    const isLongitudeNotANumber = isNaN(item.json.lng);\n\n    if(isLatitudeNotANumber || isLongitudeNotANumber)\n    {\n      item.json.lat = null;\n      item.json.lng = null;\n    }\n    else {\n      \n      const isLatitudeNotInRange = item.json.lat < -90 \n      || item.json.lat > 90;\n    const isLongitudeNotInRange = item.json.lng < -180 \n      || item.json.lng > 180;\n\n      if(isLatitudeNotInRange || isLongitudeNotInRange)\n      {\n        item.json.lat = null;\n        item.json.lng = null;\n      }\n      else {\n        \n        item.json.lat = parseFloat(item.json.lat);\n        item.json.lng = parseFloat(item.json.lng);\n      }\n      \n    }\n  }\n}\n\nreturn $input.all();"
        },
        "id": "ad7878d7-319e-419d-b798-6c9f893a1282",
        "name": "Handle invalid lat long",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -40,
          2500
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_id",
                "field2": "msr_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "4765626d-83e9-4ff5-86a9-63257ddcccb4",
        "name": "MSRs with lat long",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3680,
          2480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   user_id AS msr_id,\n   REGEXP_REPLACE(cep, '-', '', 'g') AS zipcode,\n   BTRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(city), 'À|Á|Â|Ã|Ä|Å', 'A', 'g'), 'È|É|Ê|Ë', 'E', 'g'), 'Í|Ì|Î|Ĩ|Ï ', 'I', 'g'), 'Ò|Ó|Ô|Õ|Ö', 'O', 'g'),'Ù|Ú|Û|Ü', 'U', 'g'), 'Ç', 'C', 'g')) AS city,\n   BTRIM(UPPER(state)) AS state\nFROM public.solidarity_users\nWHERE organization_id = 360273031591\n\n\n",
          "additionalFields": {}
        },
        "id": "31f0fcb7-7017-4357-bbb4-13dbf0e86c9e",
        "name": "Fetch MSRs with zipcode, city and state",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -300,
          740
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde postgres"
          }
        }
      },
      {
        "parameters": {
          "schema": "match",
          "table": "support_requests",
          "columns": "msr_id, zendesk_ticket_id, support_type, support_expertise, priority, has_disability, requires_libras, accepts_online_support, status, city, state, lat, lng, created_at, updated_at",
          "additionalFields": {}
        },
        "id": "204ed732-3700-40ae-88d0-0f8bc034d16b",
        "name": "Insert into support_requests",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          4740,
          3080
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "WITH msr_tickets AS (\n    SELECT \n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        requester_id AS msr_id,\n        CASE \n            WHEN SUBSTRING(raw_subject, '\\[(.+)\\]') = 'Psicológico' THEN 'psychological'\n            ELSE 'legal'\n        END AS support_type,\n        'not_found' AS support_expertise,\n        null AS priority,\n        null AS has_disability,\n        null AS requires_libras,\n        TRUE AS accepts_online_support,\n        COALESCE(updated_at, NOW()) AS updated_at,\n        COALESCE(created_at, NOW()) AS created_at\n    FROM public.solidarity_tickets\n    WHERE \n        organization_id = 360273031591 \n        AND SUBSTRING(raw_subject, '\\[(.+)\\]') IN ('Psicológico', 'Jurídico') \n        AND raw_subject NOT LIKE '%Re:%'\n        AND tags::text NOT LIKE '%msr-fora-do-perfil%'\n),\nvolunteer_tickets AS (\n    SELECT \n        requester_id AS volunteer_zendesk_user_id,\n        ticket_id::TEXT AS volunteer_zendesk_ticket_id,\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS msr_zendesk_ticket_id\n    FROM public.solidarity_tickets\n    WHERE organization_id IN (360269610652, 360282119532)\n),\ntickets_solicitacao_repetida AS (\n    SELECT \n        'duplicated' AS status_support_request,\n        *\n    FROM msr_tickets\n    WHERE \n        status_acolhimento = 'solicitação_repetida'\n        OR tags::text LIKE '%closed_by_merge%'\n),\nrn_duplicated_tickets AS (\n    SELECT\n        a.*,\n        ROW_NUMBER() OVER(PARTITION BY a.requester_id, SUBSTRING(a.raw_subject, '\\[(.+)\\]') ORDER BY a.updated_at DESC) AS rn\n    FROM msr_tickets a\n    LEFT JOIN tickets_solicitacao_repetida USING (id) \n    WHERE status_support_request IS NULL\n),\nduplicated_tickets AS (\n    SELECT\n        'duplicated' AS status_support_request,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM rn_duplicated_tickets\n    WHERE \n        rn > 1\n),\nall_duplicated_tickets AS (\n    SELECT * FROM tickets_solicitacao_repetida\n    UNION\n    SELECT * FROM duplicated_tickets\n),\nnon_duplicated_tickets AS (\n    SELECT a.* \n    FROM msr_tickets a\n    LEFT JOIN all_duplicated_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\npublic_service_tickets AS (\n    SELECT \n        'public_service' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'encaminhamento__realizado_para_serviço_público'\n),\nsolicitacao_recebida_tickets AS (\n    SELECT \n        CASE \n            WHEN status = 'closed' THEN 'closed'\n            WHEN status != 'closed' AND tags::TEXT LIKE '%nova-voluntaria-com-prioridade%' THEN 'special_case'\n            ELSE 'open'\n        END AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'solicitação_recebida'\n),\ninvalid_status_tickets AS (\n    SELECT \n        'closed' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento IS NULL OR status_acolhimento IN ('', 'encaminhamento__antigo', 'encaminhamento__confirmou_disponibilidade', 'encaminhamento__negado')\n),\nnon_match_tickets AS (\n    SELECT * FROM all_duplicated_tickets\n    UNION\n    SELECT * FROM public_service_tickets\n    UNION \n    SELECT * FROM solicitacao_recebida_tickets\n    UNION \n    SELECT * FROM invalid_status_tickets\n),\nshould_have_match_tickets AS (\n    SELECT a.*\n    FROM non_duplicated_tickets a\n    LEFT JOIN non_match_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\nshould_have_match_with_id_from_link_match AS (\n    SELECT\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS volunteer_zendesk_ticket_id,\n        *\n    FROM should_have_match_tickets\n),\nmatched_through_msr_link_match AS (\n    SELECT \n        a.volunteer_zendesk_ticket_id::bigint AS volunteer_zendesk_ticket_id,\n        b.volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM should_have_match_with_id_from_link_match a\n    INNER JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n),\ndidnt_match_through_msr_link_match AS (\n    SELECT \n        a.*,\n        b.volunteer_zendesk_user_id\n    FROM should_have_match_with_id_from_link_match a\n    LEFT JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n    WHERE b.volunteer_zendesk_user_id IS NULL\n),\nrn_solidarity_matches AS (\n    SELECT \n        ROW_NUMBER() OVER (PARTITION BY individuals_ticket_id ORDER BY created_at DESC) AS rn,\n        individuals_ticket_id,\n        volunteers_user_id,\n        volunteers_ticket_id\n    FROM public.solidarity_matches\n),\ndedup_solidarity_matches AS (\n    SELECT *\n    FROM rn_solidarity_matches \n    WHERE rn = 1\n),\nmatched_through_solidarity_matches AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    INNER JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n),\nall_matched AS (\n    SELECT * FROM matched_through_msr_link_match\n    UNION\n    SELECT * FROM matched_through_solidarity_matches\n),\nall_not_matched AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    LEFT JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n    WHERE b.individuals_ticket_id IS NULL\n),\nall_should_have_been_matched AS (\n    SELECT * FROM all_matched\n    UNION\n    SELECT * FROM all_not_matched\n),\nall_matched_with_real_status_acolhimento AS (\n    SELECT \n        a.*,\n        CASE\n            WHEN \n                a.status_acolhimento = 'encaminhamento__realizado' \n                AND a.status_acolhimento != b.status_acolhimento \n                AND b.status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento_interrompido')\n            THEN b.status_acolhimento\n            ELSE a.status_acolhimento\n       END AS real_status_acolhimento\n    FROM all_should_have_been_matched a\n    INNER JOIN public.solidarity_tickets b ON a.volunteer_zendesk_ticket_id::bigint = b.ticket_id\n),\nall_matched_with_status AS (\n    SELECT \n        CASE \n            WHEN real_status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento__aguardando_confirmação', 'encaminhamento__realizado', 'encaminhamento_interrompido') THEN 'matched'\n            ELSE null\n        END AS status_support_request,\n        CASE \n            WHEN real_status_acolhimento = 'atendimento__concluído' THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status = 'closed' THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status IN ('open', 'pending') THEN 'in_contact'\n            WHEN real_status_acolhimento = 'atendimento__interrompido' THEN 'interrupted_after_support'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status = 'closed' THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status != 'closed' THEN 'waiting_contact'\n            WHEN real_status_acolhimento = 'encaminhamento_interrompido' THEN 'interrupted_before_support'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status = 'closed' THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) < (CURRENT_DATE - 30)  THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) >= (CURRENT_DATE - 30) THEN 'waiting_contact'\n            ELSE null\n        END AS status_match,\n        *\n    FROM all_matched_with_real_status_acolhimento\n),\nall_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM all_matched_with_status\n),\nall_non_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM non_match_tickets\n),\nsupport_requests AS (\n    SELECT * FROM all_matched_support_request\n    UNION\n    SELECT * FROM all_non_matched_support_request\n),\nmatches AS (\n    SELECT \n    msr_id,\n    ticket_id AS msr_zendesk_ticket_id,\n    volunteer_zendesk_user_id,\n    volunteer_zendesk_ticket_id,\n    support_type,\n    'old' AS match_type,\n    'old' AS match_stage,\n    status_match AS status,\n    updated_at,\n    COALESCE(TO_TIMESTAMP(data_encaminhamento, 'YYYY-MM-DD'), created_at) AS created_at\n    FROM all_matched_with_status\n\n),\nvolunteer_match_tickets AS (\n    SELECT \n        volunteer_zendesk_ticket_id, \n        msr_zendesk_ticket_id\n    FROM matches\n    WHERE volunteer_zendesk_ticket_id IS NOT NULL\n),\nvolunteer_match_tickets_with_status AS (\n    SELECT \n        msr_zendesk_ticket_id,\n        SPLIT_PART(status_acolhimento, 'atendimento_', 2) AS survey_type,\n        updated_at,\n        updated_at AS created_at\n    FROM volunteer_match_tickets\n    INNER JOIN public.solidarity_tickets ON volunteer_zendesk_ticket_id::bigint = ticket_id\n    WHERE \n        organization_id IN (360269610652, 360282119532)\n        AND status_acolhimento IN ('atendimento_triagem_1', 'atendimento_triagem_2', 'atendimento_acompanhamento_1', 'atendimento_acompanhamento_2')\n\n)\nSELECT *\nFROM support_requests",
          "additionalFields": {}
        },
        "id": "811c6890-d203-46d7-bcbe-6ce009b79501",
        "name": "Fetch support_requests",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -300,
          3020
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde postgres"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_id",
                "field2": "msr_id"
              }
            ]
          },
          "options": {}
        },
        "id": "fdb78141-7414-4a63-9c7c-7565988bfc29",
        "name": "Support_request with MSR info",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4020,
          3060
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"state\"]}}",
                "value2": "INT"
              },
              {
                "value1": "={{$json[\"city\"]}}",
                "value2": "INTERNACIONAL"
              }
            ]
          }
        },
        "id": "e985e93d-fe92-430b-9545-70ab7d1cdad7",
        "name": "Is international?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          20,
          740
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.zipcode = \"not_found\";\n  \n}\n\nreturn $input.all();"
        },
        "id": "d5a4aa27-46ae-426b-88de-e53cb2063aba",
        "name": "Adds zipcode not_found",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {},
        "id": "24693d9b-397a-45bc-ae47-2999f8a84d6f",
        "name": "Volunteers with international city + volunteers with valid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1240,
          500
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    zendesk_user_id AS msr_id,\n    latitude AS lat,\n    longitude AS lng,\n    city,\n    state\nFROM public.volunteers\n",
          "additionalFields": {}
        },
        "id": "5743c9da-354f-4ce9-b161-caa15b86e2d7",
        "name": "Fetches volunteers with lat long",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -300,
          3320
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_id",
                "field2": "msr_id"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "74d28fe6-329f-4576-b31e-1431abb96cf8",
        "name": "Support_request with no MSR info",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4020,
          3300
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_id",
                "field2": "msr_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "f9661d2c-8507-4054-9faf-02214061fdef",
        "name": "Support_requests from volunteers",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4240,
          3500
        ]
      },
      {
        "parameters": {},
        "id": "95403155-eee5-410a-9ffb-662f65f7aaad",
        "name": "All support_requests",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4480,
          3080
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch support_requests",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch cities",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch MSRs with zipcode, city and state",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetches lat long",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetches volunteers with lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch cities": {
        "main": [
          [
            {
              "node": "MSRs with valid city",
              "type": "main",
              "index": 1
            },
            {
              "node": "MSRs with invalid city",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Normalize city and zipcode": {
        "main": [
          [
            {
              "node": "Volunteers with international city + volunteers with valid city",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "MSRs with valid city": {
        "main": [
          [
            {
              "node": "Normalize city and zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with invalid city": {
        "main": [
          [
            {
              "node": "MSRs with invalid zipcode",
              "type": "main",
              "index": 0
            },
            {
              "node": "MSRs with valid zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with invalid zipcode": {
        "main": [
          [
            {
              "node": "MSRs with correct city + MSRs with invalid zipcode",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Standardize found cities": {
        "main": [
          [
            {
              "node": "Handle corner cases",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle corner cases": {
        "main": [
          [
            {
              "node": "MSRs with new cities",
              "type": "main",
              "index": 1
            },
            {
              "node": "MSRs with not found cities",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Select distinct zipcodes": {
        "main": [
          [
            {
              "node": "Fetch city from zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch city from zipcode": {
        "main": [
          [
            {
              "node": "Standardize found cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add NOT_FOUND city and state": {
        "main": [
          [
            {
              "node": "MSRs after Brasil API",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "MSRs with valid zipcode": {
        "main": [
          [
            {
              "node": "Select distinct zipcodes",
              "type": "main",
              "index": 0
            },
            {
              "node": "MSRs with new cities",
              "type": "main",
              "index": 0
            },
            {
              "node": "MSRs with not found cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with new cities": {
        "main": [
          [
            {
              "node": "MSRs after Brasil API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with not found cities": {
        "main": [
          [
            {
              "node": "Add NOT_FOUND city and state",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with correct city + MSRs with invalid zipcode": {
        "main": [
          [
            {
              "node": "All MSRs with correct cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs after Brasil API": {
        "main": [
          [
            {
              "node": "All MSRs with correct cities",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Fetches lat long": {
        "main": [
          [
            {
              "node": "Handle invalid lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "All MSRs with correct cities": {
        "main": [
          [
            {
              "node": "MSRs with lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle invalid lat long": {
        "main": [
          [
            {
              "node": "MSRs with lat long",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "MSRs with lat long": {
        "main": [
          [
            {
              "node": "Support_request with MSR info",
              "type": "main",
              "index": 1
            },
            {
              "node": "Support_request with no MSR info",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Fetch MSRs with zipcode, city and state": {
        "main": [
          [
            {
              "node": "Is international?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch support_requests": {
        "main": [
          [
            {
              "node": "Support_request with MSR info",
              "type": "main",
              "index": 0
            },
            {
              "node": "Support_request with no MSR info",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is international?": {
        "main": [
          [
            {
              "node": "Adds zipcode not_found",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "MSRs with valid city",
              "type": "main",
              "index": 0
            },
            {
              "node": "MSRs with invalid city",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adds zipcode not_found": {
        "main": [
          [
            {
              "node": "Volunteers with international city + volunteers with valid city",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with international city + volunteers with valid city": {
        "main": [
          [
            {
              "node": "MSRs with correct city + MSRs with invalid zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Support_request with no MSR info": {
        "main": [
          [
            {
              "node": "Support_requests from volunteers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetches volunteers with lat long": {
        "main": [
          [
            {
              "node": "Support_requests from volunteers",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Support_request with MSR info": {
        "main": [
          [
            {
              "node": "All support_requests",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Support_requests from volunteers": {
        "main": [
          [
            {
              "node": "All support_requests",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "All support_requests": {
        "main": [
          [
            {
              "node": "Insert into support_requests",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "bb7908fc-7c27-4c54-8cc3-7e7f8ccdbec1",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T20:59:43.188Z",
    "updatedAt": "2024-01-24T02:06:21.000Z",
    "id": "Bw91NpjH2Vw5p427",
    "name": "[Zendesk Integration] update match STG",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "update-match",
          "options": {}
        },
        "id": "a4d1f8d7-23f5-4359-b24b-484ed9afd6c7",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -1240,
          840
        ],
        "webhookId": "8d21e22f-a2b9-4cdc-be05-719b68c861b7",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const status_lookup = {\n      \"encaminhamento__realizado\": \"waiting_contact\",\n      \"encaminhamento_interrompido\": \"interrupted_before_support\",\n      \"encaminhamento__expirado\": \"expired\",\n      \"atendimento__iniciado\": \"in_contact\",\n      \"atendimento__concluído\": \"completed\",\n      \"atendimento__interrompido\": \"interrupted_after_support\" \n  }\n \n  const zendesk_ticket_id = item.json.body.id;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  \n  const status = status_lookup[status_acolhimento]\n    \n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"status\": status\n  }\n  output.push(newItem)\n}\n\nreturn output;"
        },
        "id": "33a84e80-e3dc-4dc5-bb9a-f37470220beb",
        "name": "Extracts zendesk_ticket_id and support_request_status",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -1000,
          840
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"current_status\"]}}",
                "operation": "notEqual",
                "value2": "={{$json[\"new_status\"]}}"
              }
            ]
          }
        },
        "id": "2c32da00-3b7a-4cac-b9a6-61a16a5ea862",
        "name": "Is it a new status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -560,
          840
        ]
      },
      {
        "parameters": {},
        "id": "0390aa58-d137-4880-9416-630edff3f914",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          -260,
          1060
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT \n\tmatch_id, \n\tstatus AS current_status,\n    '{{$json[\"status\"]}}' AS new_status,\n    volunteer_id \nFROM match.matches\nWHERE volunteer_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nLIMIT 1",
          "additionalFields": {}
        },
        "id": "473f01ac-b0eb-4351-93b5-37db0cfc5116",
        "name": "Fetch match_id and status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -780,
          840
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE match.matches\nSET status = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE match_id = {{$json[\"match_id\"]}};\n\nINSERT INTO match.match_status_history (match_id, status, created_at)\nVALUES ({{$json[\"match_id\"]}}, '{{$json[\"new_status\"]}}', NOW());",
          "additionalFields": {}
        },
        "id": "44acab9d-b7ac-4f4c-989b-8c64fa3de349",
        "name": "Update match status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          0,
          900
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"condition\"]}}",
                "value2": "indisponivel_sem_vagas"
              }
            ]
          }
        },
        "id": "3afff3b9-893e-4229-aaef-86ba381897c5",
        "name": "Should update volunteer status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          220,
          680
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT\n   volunteer_id,\n   zendesk_user_id, \n   current_matches,\n    max_matches,  \n   is_available,\n   condition\nFROM public.volunteer_availability\nLEFT JOIN public.volunteers ON volunteer_id = id\nWHERE volunteer_id = \t{{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "6c021324-9b2e-481d-8c33-09f570172b2c",
        "name": "Fetch previous volunteer_availability and volunteer_status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          0,
          680
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteers\nSET condition = 'disponivel', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'disponivel', NOW());\n\nUPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), is_available = TRUE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "6d8d6e8f-ad33-433c-92dd-c7933954cc7b",
        "name": "Update volunteer_availability and volunteer status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          660
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "0ea0fb86-afcf-4b1f-9186-d45fec5eb0d7",
        "name": "Update current_matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          900
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{$json[\"zendesk_user_id\"]}}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "Disponível"
                }
              ]
            }
          }
        },
        "id": "bc6da394-1e4a-4c9e-ad90-e60ef8000459",
        "name": "Update zendesk Status da Mulher",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"new_status\"]}}",
                "value2": "interrupted_before_support"
              },
              {
                "value1": "={{$json[\"new_status\"]}}",
                "value2": "interrupted_after_support"
              },
              {
                "value1": "={{$json[\"new_status\"]}}",
                "value2": "completed"
              },
              {
                "value1": "={{$json[\"new_status\"]}}",
                "value2": "expired"
              }
            ]
          },
          "combineOperation": "any"
        },
        "id": "1f466d16-9548-4915-89d0-31ec6845d10f",
        "name": "Is match interrupted, expired or completed?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -280,
          760
        ]
      }
    ],
    "connections": {
      "Extracts zendesk_ticket_id and support_request_status": {
        "main": [
          [
            {
              "node": "Fetch match_id and status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is it a new status?": {
        "main": [
          [
            {
              "node": "Is match interrupted, expired or completed?",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Extracts zendesk_ticket_id and support_request_status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch match_id and status": {
        "main": [
          [
            {
              "node": "Is it a new status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch previous volunteer_availability and volunteer_status": {
        "main": [
          [
            {
              "node": "Should update volunteer status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should update volunteer status?": {
        "main": [
          [
            {
              "node": "Update volunteer_availability and volunteer status",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update zendesk Status da Mulher",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Update current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is match interrupted, expired or completed?": {
        "main": [
          [
            {
              "node": "Fetch previous volunteer_availability and volunteer_status",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Update match status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "4ca8d0f5-c303-4c74-92c7-793dc4ad2a14",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-01-24T20:25:54.987Z",
    "updatedAt": "2024-01-24T20:26:24.000Z",
    "id": "GxgOVELp8hpE0ka8",
    "name": "[Database pipeline] - match_surveys PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "761474c7-f717-4ed3-9897-f76ac0607d3c",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          160,
          600
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "WITH msr_tickets AS (\n    SELECT \n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        requester_id AS msr_id,\n        CASE \n            WHEN SUBSTRING(raw_subject, '\\[(.+)\\]') = 'Psicológico' THEN 'psychological'\n            ELSE 'legal'\n        END AS support_type,\n        'not_found' AS support_expertise,\n        null AS priority,\n        null AS has_disability,\n        null AS requires_libras,\n        TRUE AS accepts_online_support,\n        COALESCE(updated_at, NOW()) AS updated_at,\n        COALESCE(created_at, NOW()) AS created_at\n    FROM public.solidarity_tickets\n    WHERE \n        organization_id = 360273031591 \n        AND SUBSTRING(raw_subject, '\\[(.+)\\]') IN ('Psicológico', 'Jurídico') \n        AND raw_subject NOT LIKE '%Re:%'\n        AND tags::text NOT LIKE '%msr-fora-do-perfil%'\n),\nvolunteer_tickets AS (\n    SELECT \n        requester_id AS volunteer_zendesk_user_id,\n        ticket_id::TEXT AS volunteer_zendesk_ticket_id,\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS msr_zendesk_ticket_id\n    FROM public.solidarity_tickets\n    WHERE organization_id IN (360269610652, 360282119532)\n),\ntickets_solicitacao_repetida AS (\n    SELECT \n        'duplicated' AS status_support_request,\n        *\n    FROM msr_tickets\n    WHERE \n        status_acolhimento = 'solicitação_repetida'\n        OR tags::text LIKE '%closed_by_merge%'\n),\nrn_duplicated_tickets AS (\n    SELECT\n        a.*,\n        ROW_NUMBER() OVER(PARTITION BY a.requester_id, SUBSTRING(a.raw_subject, '\\[(.+)\\]') ORDER BY a.updated_at DESC) AS rn\n    FROM msr_tickets a\n    LEFT JOIN tickets_solicitacao_repetida USING (id) \n    WHERE status_support_request IS NULL\n),\nduplicated_tickets AS (\n    SELECT\n        'duplicated' AS status_support_request,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM rn_duplicated_tickets\n    WHERE \n        rn > 1\n),\nall_duplicated_tickets AS (\n    SELECT * FROM tickets_solicitacao_repetida\n    UNION\n    SELECT * FROM duplicated_tickets\n),\nnon_duplicated_tickets AS (\n    SELECT a.* \n    FROM msr_tickets a\n    LEFT JOIN all_duplicated_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\npublic_service_tickets AS (\n    SELECT \n        'public_service' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'encaminhamento__realizado_para_serviço_público'\n),\nsolicitacao_recebida_tickets AS (\n    SELECT \n        CASE \n            WHEN status = 'closed' THEN 'closed'\n            WHEN status != 'closed' AND tags::TEXT LIKE '%nova-voluntaria-com-prioridade%' THEN 'special_case'\n            ELSE 'open'\n        END AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'solicitação_recebida'\n),\ninvalid_status_tickets AS (\n    SELECT \n        'closed' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento IS NULL OR status_acolhimento IN ('', 'encaminhamento__antigo', 'encaminhamento__confirmou_disponibilidade', 'encaminhamento__negado')\n),\nnon_match_tickets AS (\n    SELECT * FROM all_duplicated_tickets\n    UNION\n    SELECT * FROM public_service_tickets\n    UNION \n    SELECT * FROM solicitacao_recebida_tickets\n    UNION \n    SELECT * FROM invalid_status_tickets\n),\nshould_have_match_tickets AS (\n    SELECT a.*\n    FROM non_duplicated_tickets a\n    LEFT JOIN non_match_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\nshould_have_match_with_id_from_link_match AS (\n    SELECT\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS volunteer_zendesk_ticket_id,\n        *\n    FROM should_have_match_tickets\n),\nmatched_through_msr_link_match AS (\n    SELECT \n        a.volunteer_zendesk_ticket_id::bigint AS volunteer_zendesk_ticket_id,\n        b.volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM should_have_match_with_id_from_link_match a\n    INNER JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n),\ndidnt_match_through_msr_link_match AS (\n    SELECT \n        a.*,\n        b.volunteer_zendesk_user_id\n    FROM should_have_match_with_id_from_link_match a\n    LEFT JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n    WHERE b.volunteer_zendesk_user_id IS NULL\n),\nrn_solidarity_matches AS (\n    SELECT \n        ROW_NUMBER() OVER (PARTITION BY individuals_ticket_id ORDER BY created_at DESC) AS rn,\n        individuals_ticket_id,\n        volunteers_user_id,\n        volunteers_ticket_id\n    FROM public.solidarity_matches\n),\ndedup_solidarity_matches AS (\n    SELECT *\n    FROM rn_solidarity_matches \n    WHERE rn = 1\n),\nmatched_through_solidarity_matches AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    INNER JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n),\nall_matched AS (\n    SELECT * FROM matched_through_msr_link_match\n    UNION\n    SELECT * FROM matched_through_solidarity_matches\n\n),\nall_not_matched AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    LEFT JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n    WHERE b.individuals_ticket_id IS NULL\n),\nall_should_have_been_matched AS (\n    SELECT * FROM all_matched\n    UNION\n    SELECT * FROM all_not_matched\n),\nall_matched_with_status AS (\n    SELECT \n        CASE \n            WHEN status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento__aguardando_confirmação', 'encaminhamento__realizado', 'encaminhamento_interrompido') THEN 'matched'\n            ELSE null\n        END AS status_support_request,\n        CASE \n            WHEN status_acolhimento = 'atendimento__concluído' THEN 'completed'\n            WHEN status_acolhimento = 'atendimento__iniciado' AND status = 'closed' THEN 'completed'\n            WHEN status_acolhimento = 'atendimento__iniciado' AND status IN ('open', 'pending') THEN 'in_contact'\n            WHEN status_acolhimento = 'atendimento__interrompido' THEN 'interrupted_after_support'\n            WHEN status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status = 'closed' THEN 'expired'\n            WHEN status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status != 'closed' THEN 'waiting_contact'\n            WHEN status_acolhimento = 'encaminhamento_interrompido' THEN 'interrupted_before_support'\n            WHEN status_acolhimento = 'encaminhamento__realizado' AND status = 'closed' THEN 'expired'\n            WHEN status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) < (CURRENT_DATE - 30)  THEN 'expired'\n            WHEN status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) >= (CURRENT_DATE - 30) THEN 'waiting_contact'\n            ELSE null\n        END AS status_match,\n        *\n    FROM all_should_have_been_matched\n),\nall_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM all_matched_with_status\n),\nall_non_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM non_match_tickets\n),\nsupport_requests AS (\n    SELECT * FROM all_matched_support_request\n    UNION\n    SELECT * FROM all_non_matched_support_request\n),\nmatches AS (\n    SELECT \n    msr_id,\n    ticket_id AS msr_zendesk_ticket_id,\n    volunteer_zendesk_user_id,\n    volunteer_zendesk_ticket_id,\n    support_type,\n    'old' AS match_type,\n    'old' AS match_stage,\n    status_match AS status,\n    updated_at,\n    created_at\n    FROM all_matched_with_status\n\n),\nvolunteer_match_tickets AS (\n    SELECT \n        volunteer_zendesk_ticket_id, \n        msr_zendesk_ticket_id\n    FROM matches\n    WHERE volunteer_zendesk_ticket_id IS NOT NULL\n),\nvolunteer_match_tickets_with_status AS (\n    SELECT \n        msr_zendesk_ticket_id,\n        SPLIT_PART(status_acolhimento, 'atendimento_', 2) AS survey_type,\n        updated_at,\n        updated_at AS created_at\n    FROM volunteer_match_tickets\n    INNER JOIN public.solidarity_tickets ON volunteer_zendesk_ticket_id::bigint = ticket_id\n    WHERE \n        organization_id IN (360269610652, 360282119532)\n        AND status_acolhimento IN ('atendimento_triagem_1', 'atendimento_triagem_2', 'atendimento_acompanhamento_1', 'atendimento_acompanhamento_2')\n\n)\nSELECT\n   *\nFROM volunteer_match_tickets_with_status\n\n\n",
          "additionalFields": {}
        },
        "id": "ebf2301c-28a8-4af6-b254-5a73e1715877",
        "name": "Fetch match surveys",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   match_id,\n   msr_zendesk_ticket_id\nFROM match.matches",
          "additionalFields": {}
        },
        "id": "76c5e13d-725d-4819-b512-49d3e0b01c2d",
        "name": "Fetch matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          780
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_zendesk_ticket_id",
                "field2": "msr_zendesk_ticket_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "97a0de19-fc57-4ff9-a89a-a2bd60061048",
        "name": "Match surveys with match_id",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          720,
          620
        ]
      },
      {
        "parameters": {
          "schema": "match",
          "table": "match_surveys",
          "columns": "match_id, survey_type, created_at, updated_at",
          "additionalFields": {}
        },
        "id": "5308c4ee-58cc-4c3d-9d93-6a59324dd642",
        "name": "Insert into match_surveys",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          940,
          620
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch match surveys",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch match surveys": {
        "main": [
          [
            {
              "node": "Match surveys with match_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch matches": {
        "main": [
          [
            {
              "node": "Match surveys with match_id",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Match surveys with match_id": {
        "main": [
          [
            {
              "node": "Insert into match_surveys",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "b143393e-4578-4f4c-94d0-bc8495da03f4",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-02-05T20:19:05.420Z",
    "updatedAt": "2024-02-22T17:05:38.000Z",
    "id": "HYstwqyTrzYsvJ2P",
    "name": "Monitoramento de erros via Slack",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "name": "Error Trigger",
        "type": "n8n-nodes-base.errorTrigger",
        "position": [
          260,
          640
        ],
        "executeOnce": false,
        "retryOnFail": false,
        "typeVersion": 1,
        "alwaysOutputData": true,
        "id": "e23fce2c-9bb8-4d4b-9f10-e937a6b2461b"
      },
      {
        "parameters": {
          "authentication": "oAuth2",
          "channel": "alertas-n8n",
          "text": "=ERROR: {{$node[\"Error Trigger\"].json[\"execution\"][\"error\"][\"message\"]}}\n- Workflow: {{$node[\"Error Trigger\"].json[\"workflow\"][\"name\"]}} ID: {{$node[\"Error Trigger\"].json[\"workflow\"][\"id\"]}}\n{{$node[\"Error Trigger\"].json[\"execution\"][\"url\"]}}",
          "otherOptions": {},
          "attachments": []
        },
        "name": "Slack",
        "type": "n8n-nodes-base.slack",
        "typeVersion": 1,
        "position": [
          480,
          640
        ],
        "id": "d1504acd-70e2-4a7d-9c5a-35f0aac6800e",
        "credentials": {
          "slackOAuth2Api": {
            "id": "01G85hUbLT4VlY92",
            "name": "Slack account"
          }
        }
      }
    ],
    "connections": {
      "Error Trigger": {
        "main": [
          [
            {
              "node": "Slack",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "8cf94756-779f-469f-a77e-1b77600cff9c",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T17:41:58.269Z",
        "updatedAt": "2024-01-16T17:41:58.269Z",
        "id": "E3Tnq8M430hgCQfP",
        "name": "Mapa do acolhimento"
      }
    ]
  },
  {
    "createdAt": "2024-02-19T21:11:07.754Z",
    "updatedAt": "2024-02-21T14:10:43.000Z",
    "id": "Kk2v3w34QdNvwZ0P",
    "name": "[BUGFIX] Voluntárias sem telefone",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "9d6cfb1c-46f2-4be5-b0e2-35489b53ab9e",
        "name": "When clicking \"Test Workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          780,
          340
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT \n  id,\n  zendesk_user_id\nFROM volunteers\nWHERE \n  phone = 'not_found' \n  AND condition IN ('disponivel', 'indisponivel_sem_vagas')",
          "options": {}
        },
        "id": "f47385eb-d903-4ede-8095-78b78edd9368",
        "name": "Busca voluntárias sem telefone",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          960,
          340
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE volunteers\nSET condition = 'dados_incompletos_telefone', updated_at = NOW()\nWHERE id = {{ $json.id }};\n\nINSERT INTO volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{ $json.id }}, 'dados_incompletos_telefone', NOW());\n\nUPDATE volunteer_availability\nSET is_available = FALSE, updated_at = NOW()\nWHERE volunteer_id = {{ $json.id }}\n",
          "options": {}
        },
        "id": "ab33fda2-7bde-4f92-99d8-e16dd2242976",
        "name": "Atualiza status no banco",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1460,
          520
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{ $json.id }}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "dados_incompletos_telefone"
                }
              ]
            }
          }
        },
        "id": "9ba68fa3-b6a8-423a-a4a7-af570fda9f4e",
        "name": "Atualiza usuário no Zendesk",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          1440,
          240
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        },
        "onError": "continueRegularOutput"
      }
    ],
    "connections": {
      "When clicking \"Test Workflow\"": {
        "main": [
          [
            {
              "node": "Busca voluntárias sem telefone",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca voluntárias sem telefone": {
        "main": [
          [
            {
              "node": "Atualiza usuário no Zendesk",
              "type": "main",
              "index": 0
            },
            {
              "node": "Atualiza status no banco",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "152b68ee-c083-4f98-a697-4185f6a76cd3",
    "triggerCount": 0,
    "tags": []
  },
  {
    "createdAt": "2024-01-16T21:00:07.996Z",
    "updatedAt": "2024-02-21T13:38:12.000Z",
    "id": "N9erW1W29zBVl6eT",
    "name": "[Zendesk Integration] update match PROD",
    "active": true,
    "nodes": [
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "update-match",
          "options": {}
        },
        "id": "52c6a69a-ad31-4fd5-93d5-e8e9b7218b35",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -1240,
          840
        ],
        "webhookId": "2e8d877f-e88c-4856-a866-639812e65d01",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const status_lookup = {\n      \"encaminhamento__realizado\": \"waiting_contact\",\n      \"encaminhamento_interrompido\": \"interrupted_before_support\",\n      \"encaminhamento__expirado\": \"expired\",\n      \"atendimento__iniciado\": \"in_contact\",\n      \"atendimento__concluído\": \"completed\",\n      \"atendimento__interrompido\": \"interrupted_after_support\" \n  }\n \n  const zendesk_ticket_id = item.json.body.id;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  \n  const status = status_lookup[status_acolhimento]\n    \n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"status\": status\n  }\n  output.push(newItem)\n}\n\nreturn output;"
        },
        "id": "427e4edd-0a0f-46ba-9f6d-6c06a5a99c79",
        "name": "Extracts zendesk_ticket_id and support_request_status",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -1000,
          840
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"current_status\"]}}",
                "operation": "notEqual",
                "value2": "={{$json[\"new_status\"]}}"
              }
            ]
          }
        },
        "id": "619c47c2-57ee-44d7-bada-32593793c716",
        "name": "Is it a new status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -560,
          840
        ]
      },
      {
        "parameters": {},
        "id": "16249317-3fdd-406d-bdaa-f1a2587bfd95",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          -400,
          1080
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE match.matches\nSET status = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE match_id = {{$json[\"match_id\"]}};\n\nINSERT INTO match.match_status_history (match_id, status, created_at)\nVALUES ({{$json[\"match_id\"]}}, '{{$json[\"new_status\"]}}', NOW());\n\n\n",
          "additionalFields": {}
        },
        "id": "6207944b-45a8-4bcb-a1a6-3bdee61f890a",
        "name": "Update match status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -280,
          240
        ],
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"condition\"]}}",
                "value2": "indisponivel_sem_vagas"
              }
            ]
          }
        },
        "id": "2476585f-69ed-406b-bea7-5c376bcbda3d",
        "name": "Should update volunteer status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          220,
          740
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT\n   volunteer_id,\n   zendesk_user_id, \n   current_matches,\n    max_matches,  \n   is_available,\n   condition\nFROM public.volunteer_availability\nLEFT JOIN public.volunteers ON volunteer_id = id\nWHERE volunteer_id = \t{{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "364896f1-63a5-4a6d-8348-dfa728985791",
        "name": "Fetch previous volunteer_availability and volunteer_status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          0,
          740
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteers\nSET condition = 'disponivel', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'disponivel', NOW());\n\nUPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), is_available = TRUE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "0e0417fd-f203-471d-bf54-4115124bd418",
        "name": "Update volunteer_availability and volunteer status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          660
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{$json[\"zendesk_user_id\"]}}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "Disponível"
                }
              ]
            }
          }
        },
        "id": "7840e763-80f1-47aa-bee9-080b2d6c9f08",
        "name": "Update zendesk Status da Mulher",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"new_status\"]}}",
                "value2": "interrupted_before_support"
              },
              {
                "value1": "={{$json[\"new_status\"]}}",
                "value2": "interrupted_after_support"
              },
              {
                "value1": "={{$json[\"new_status\"]}}",
                "value2": "completed"
              },
              {
                "value1": "={{$json[\"new_status\"]}}",
                "value2": "expired"
              }
            ]
          },
          "combineOperation": "any"
        },
        "id": "5fb70447-71a1-4a85-a300-c81bce946d20",
        "name": "Is match interrupted, expired or completed?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -280,
          760
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "907ec0ae-cd3b-4d6f-867c-4f0660c15811",
        "name": "Update current_matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          900
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    volunteer_id,\n    current_matches,\n    max_matches,\n    condition,\n    COUNT(*) AS calculated_current_matches\nFROM match.matches m \nLEFT JOIN volunteer_availability a USING (volunteer_id)\nLEFT JOIN volunteers v ON v.id = a.volunteer_id\nWHERE \n    volunteer_id = {{ $json.volunteer_id }}\n    AND status IN ('waiting_contact', 'in_contact')\nGROUP BY volunteer_id, current_matches, max_matches, condition",
          "options": {}
        },
        "id": "5165fb15-a387-4531-ab23-27ae62bdb113",
        "name": "Check current_matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          100,
          1160
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "loose"
            },
            "conditions": [
              {
                "id": "40361bb8-ee27-4874-8c13-bbaa181aaece",
                "leftValue": "={{ $json.current_matches }}",
                "rightValue": "={{ $json.calculated_current_matches }}",
                "operator": {
                  "type": "number",
                  "operation": "notEquals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {
            "looseTypeValidation": true
          }
        },
        "id": "954aad5b-5cde-4550-9357-6b6bc54f6ca5",
        "name": "Should update current_matches?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          340,
          1160
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE volunteer_availability\nSET current_matches = {{ $json.calculated_current_matches }}, updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
          "options": {}
        },
        "id": "dfdcacaf-f783-4908-b650-fe729dc2f4cc",
        "name": "Update current_matches1",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          840,
          1000
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "loose"
            },
            "conditions": [
              {
                "id": "53a6dfc0-564c-46c6-ba31-a373e2b718ac",
                "leftValue": "={{ $json.calculated_current_matches }}",
                "rightValue": "={{ $json.max_matches }}",
                "operator": {
                  "type": "number",
                  "operation": "gte"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {
            "looseTypeValidation": true
          }
        },
        "id": "00c39ed4-dd09-4e2d-81d1-a3d67ad646a4",
        "name": "Should update is_available?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          840,
          1220
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE volunteer_availability\nSET is_available = FALSE\nWHERE volunteer_id = {{ $json.volunteer_id }}",
          "options": {}
        },
        "id": "a3c265bd-8c67-4125-b78c-f4daab46c5fa",
        "name": "Update is_available",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1180,
          1200
        ],
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "id": "fa143aea-49de-479a-9acd-2a188df0b168",
                "leftValue": "={{ $json.condition }}",
                "rightValue": "disponivel",
                "operator": {
                  "type": "string",
                  "operation": "equals",
                  "name": "filter.operator.equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "87e506d9-4a2b-42d6-8e03-b0b8adf750f9",
        "name": "Should update volunteer condition?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          1460,
          1460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "UPDATE volunteers\nSET condition = 'indisponivel_sem_vagas', updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}\n",
          "options": {}
        },
        "id": "3674b53a-2997-49a4-b451-c4f363a8d9bc",
        "name": "Update volunteer condition",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1960,
          1280
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "INSERT INTO volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{ $json.volunteer_id }}, 'indisponivel_sem_vagas', NOW())",
          "options": {}
        },
        "id": "13e8223c-2df3-4169-bb5b-45ccc566504d",
        "name": "Insert into volunteer_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1940,
          1480
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT \n\tmatch_id, \n\tstatus AS current_status,\n    '{{$json[\"status\"]}}' AS new_status,\n    volunteer_id \nFROM match.matches\nWHERE volunteer_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT \nOR msr_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nORDER BY created_at DESC\nLIMIT 1",
          "options": {}
        },
        "id": "36d74f8c-1016-47e9-9a0d-c3d9c08c132b",
        "name": "Fetch match_id and status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          -780,
          840
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      }
    ],
    "connections": {
      "Extracts zendesk_ticket_id and support_request_status": {
        "main": [
          [
            {
              "node": "Fetch match_id and status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is it a new status?": {
        "main": [
          [
            {
              "node": "Is match interrupted, expired or completed?",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update match status",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Extracts zendesk_ticket_id and support_request_status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch previous volunteer_availability and volunteer_status": {
        "main": [
          [
            {
              "node": "Should update volunteer status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should update volunteer status?": {
        "main": [
          [
            {
              "node": "Update volunteer_availability and volunteer status",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update zendesk Status da Mulher",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Update current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is match interrupted, expired or completed?": {
        "main": [
          [
            {
              "node": "Fetch previous volunteer_availability and volunteer_status",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Check current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check current_matches": {
        "main": [
          [
            {
              "node": "Should update current_matches?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should update current_matches?": {
        "main": [
          [
            {
              "node": "Update current_matches1",
              "type": "main",
              "index": 0
            },
            {
              "node": "Should update is_available?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should update is_available?": {
        "main": [
          [
            {
              "node": "Update is_available",
              "type": "main",
              "index": 0
            },
            {
              "node": "Should update volunteer condition?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should update volunteer condition?": {
        "main": [
          [
            {
              "node": "Update volunteer condition",
              "type": "main",
              "index": 0
            },
            {
              "node": "Insert into volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update is_available": {
        "main": [
          [
            {
              "node": "Should update volunteer condition?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch match_id and status": {
        "main": [
          [
            {
              "node": "Is it a new status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {
      "Webhook": [
        {
          "json": {
            "headers": {
              "host": "mapadoacolhimento.app.n8n.cloud",
              "x-request-id": "e8bf0c55-f984-45b4-a26a-14e1ce367e68",
              "x-real-ip": "216.198.2.158",
              "x-forwarded-for": "216.198.2.158",
              "x-forwarded-host": "mapadoacolhimento.app.n8n.cloud",
              "x-forwarded-port": "443",
              "x-forwarded-proto": "https",
              "x-forwarded-scheme": "https",
              "x-scheme": "https",
              "content-length": "67",
              "user-agent": "Zendesk Webhook",
              "authorization": "Basic ZGV2QG1hcGEub3JnLmJyL3Rva2VuOkxWMHJoR2hxYzd1UTB2OGwzbTFtUFhwdmVZVFNMWG93UU4xbEJLZFk=",
              "content-type": "application/json; charset=utf-8",
              "x-zendesk-account-id": "9040899",
              "x-zendesk-webhook-id": "01HJ1X20PK0J3MMT5X9TZQTA5D",
              "x-zendesk-webhook-invocation-id": "01HNJW1GMCYBYS7JZXRZFEVDWN",
              "x-zendesk-webhook-signature": "K0nsRNwqrPWI/z8mGlVwmZQT9Ot7wSofm5vrmcqxyis=",
              "x-zendesk-webhook-signature-timestamp": "2024-02-01T17:39:08Z"
            },
            "params": {},
            "query": {},
            "body": {
              "id": "80365",
              "status_acolhimento": "atendimento__iniciado"
            }
          }
        }
      ]
    },
    "versionId": "7bb7e714-cd04-4218-ab6e-6480a76b37bb",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-02-05T20:14:29.082Z",
    "updatedAt": "2024-02-08T14:29:36.000Z",
    "id": "NuGzW1eYp2vMR1ax",
    "name": "[MauticxZendesk] Formularios de Conclusão e Interrupção",
    "active": true,
    "nodes": [
      {
        "parameters": {},
        "id": "0c049128-36fb-4de0-8dbb-af7e9903304e",
        "name": "Start",
        "type": "n8n-nodes-base.start",
        "typeVersion": 1,
        "position": [
          -320,
          580
        ]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "=mda-form-conclusao",
          "options": {}
        },
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -380,
          800
        ],
        "webhookId": "a3fe4491-fda9-4537-ac2e-6d3ba4d9a86c",
        "id": "aa78d743-4636-49a9-b0d0-597cd3ed0b3e"
      },
      {
        "parameters": {
          "value1": "={{$node[\"Item Lists\"].json[\"submission\"][\"form\"][\"id\"]}}",
          "rules": {
            "rules": [
              {
                "operation": "equal",
                "value2": 29
              },
              {
                "operation": "equal",
                "value2": 30,
                "output": 1
              },
              {
                "operation": "equal",
                "value2": 32,
                "output": 2
              },
              {
                "operation": "equal",
                "value2": 31,
                "output": 3
              }
            ]
          }
        },
        "name": "Switch",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 1,
        "position": [
          80,
          800
        ],
        "id": "1ebf085b-51c0-4fa7-a432-3cd89b30c2c6"
      },
      {
        "parameters": {
          "fieldToSplitOut": "[\"body\"][\"mautic.form_on_submit\"]",
          "options": {}
        },
        "name": "Item Lists",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          -160,
          800
        ],
        "id": "8570c639-f88b-4f02-82e3-c7567978e104"
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\ninsert_mda_forms_answers(objects: {answers: $answers, form: \"conclusao-psicologico\", msr_name: \"{{$node[\"Formata - Conclusão Psicológico\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (conclusao psicologico)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Conclusão Psicológico\"].json[\"answers\"][\"dados_voluntaria\"][\"email_cadastro\"]}}\",organization_id:360282119532, form_id:{{$node[\"Webhook\"].json[\"body\"][\"mautic.form_on_submit\"][0][\"submission\"][\"form\"][\"id\"]}}\n}) {\naffected_rows\n}\n}",
          "variables": "={\n\"answers\": {{$node[\"Formata - Conclusão Psicológico\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          900,
          700
        ],
        "id": "84730c65-8595-45db-8f49-c05afb138f5f",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\ninsert_mda_forms_answers(objects: {answers: $answers, form: \"conclusao-juridico\", msr_name: \"{{$node[\"Formata - Conclusão Jurídico\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (conclusao juridico)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Conclusão Jurídico\"].json[\"answers\"][\"dados_voluntaria\"][\"email_cadastro\"]}}\",organization_id:360269610652, form_id:{{$node[\"Webhook\"].json[\"body\"][\"mautic.form_on_submit\"][0][\"submission\"][\"form\"][\"id\"]}}\n}) {\naffected_rows\n}\n}",
          "variables": "={\n\"answers\":{{$node[\"Formata - Conclusão Jurídico\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas2",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          900,
          460
        ],
        "id": "f35e5ba0-7651-4282-81c6-a2df3de317d5",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "let risco = 'nenhum';\nlet priority = 'low';\nfor (item of items) {\n\n  const results =  item.json.submission.results; \n\n\tlet dados_voluntaria = {\n\t\tnome:\tresults[\"1_nome_completo\"], //\"Teste 2022\",\n\t\temail_cadastro: results[\"2_email_de_cadastro\"] //\"teste@teste.br\",\n\t}\n\t\n\tlet dados_acolhida = {\n\t\tnome: results[\"3_nome_da_acolhida\"] //\"Acholhida teste\",\n\t}\n\t\n\tlet atendimento = {\n\t\tdata_encerramento: results[\"4_data_de_encerramento_do\"], //11/11/2022\n\t\tatraves_do_atendimento: results[\"5_atraves_do_atendimento\"],\n\t\tprocessos_acolhida: results[\"7_caso_se_aplique_existem\"],\n\t\tstatus_processo: results[\"61_selecione_o_status_dos\"],\n\t\tdescricao_processo_juridico: results[\"7_descreva_sucintamente_o\"]\n\t}\n\n\tlet experiencia_voluntaria = {\n\t\tdescricao_experiencia: results[\"8_se_desejar_descreva_sua\"],\n\t\taprendizagens: results[\"9_quais_aprendizagens_est\"],\n\t\tdesafios: results[\"10_e_quais_os_desafios\"],\n\t\tsolicitou_ajuda_mapa: results[\"11_voce_solicitou_ajuda_d\"],\n\t\tse_sentiu_orientada_mapa: results[\"111_sentiuse_orientada\"],\n\t\tse_sentiu_acolhida_mapa: results[\"112_sentiuse_acolhida_pel\"],\n\t\tsolicitou_ajuda_voluntaria: results[\"12_voce_solicitou_ajuda_d\"],\n\t\tse_sentiu_orientada_volutaria: results[\"121_sentiuse_orientada\"],\n\t\tse_sentiu_acolhida_volutaria: results[\"122_sentiuse_acolhida_pel\"]\n\t}\n\n\tlet melhorias = {\n\t\tmelhorias: results[\"13_se_desejar_deixe_suges1\"]\n\t}\n\n\n\tlet answers = {dados_voluntaria, dados_acolhida, atendimento, experiencia_voluntaria, melhorias, risco}\n\tconst user_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]\n\t\n\tlet data = new Date(atendimento.data_encerramento)\n  let body_ticket = 'RISCO: ' + risco.toUpperCase() + '\\\\n\\\\nDADOS DA VOLUNTÁRIA\\\\nNome: ' + dados_voluntaria.nome + '\\\\nEmail: ' + dados_voluntaria.email_cadastro +\n\t'\\\\n\\\\nDADOS DA ACOLHIDA\\\\nNome: ' + dados_acolhida.nome + \n\t//atendimento\n\n\t'\\\\n\\\\nSOBRE O ATENDIMENTO\\\\nData de encerramento: ' + ((data.getDate() )) + \"/\" + ((data.getMonth() + 1)) + \"/\" + data.getFullYear() +\n\t'\\\\nAtravés do atendimento, a acolhida: ' + atendimento.atraves_do_atendimento +\n\t(atendimento.processos_acolhida ? '\\\\nA voluntária atuou em algum processo: ' + atendimento.processos_acolhida : '') +\n\t(atendimento.status_processo ? '\\\\nStatus do processo: ' + atendimento.status_processo : '') +\n\t'\\\\nDescrição do desfecho do processo: ' + atendimento.descricao_processo_juridico +\n\t//experiência como voluntária\n\t'\\\\n\\\\nEXPERIÊNCIA COMO VOLUNTÁRIA' +\n\t//TODO\n\t(experiencia_voluntaria.descricao_experiencia ? '\\\\nDescrição da experiência como voluntária: ' + experiencia_voluntaria.descricao_experiencia : '') +\n\t'\\\\nAprendizagens: ' + experiencia_voluntaria.aprendizagens +\n\t'\\\\nDesafios: ' + experiencia_voluntaria.desafios +\n\t'\\\\nSolicitou ajuda da equipe do mapa: ' + experiencia_voluntaria.solicitou_ajuda_mapa +\n\t(experiencia_voluntaria.solicitou_ajuda_mapa === 'Sim'?\n\t\t(experiencia_voluntaria.se_sentiu_orientada_mapa ? '\\\\nSe sentiu orientada pela equipe: ' + experiencia_voluntaria.se_sentiu_orientada_mapa : '') +\n\t(experiencia_voluntaria.se_sentiu_acolhida_mapa ? '\\\\nSe sentiu acolhida pela equipe: ' + experiencia_voluntaria.se_sentiu_acolhida_mapa : '') : ''\t\n\t) +\n\t'\\\\nSolicitou ajuda de uma colega voluntária: ' + experiencia_voluntaria.solicitou_ajuda_voluntaria +\n\t(experiencia_voluntaria.solicitou_ajuda_voluntaria === 'Sim' ?\n\t\t(experiencia_voluntaria.se_sentiu_orientada_volutaria ? '\\\\nSe sentiu orientada pela voluntária: ' + experiencia_voluntaria.se_sentiu_orientada_volutaria : '') +\n\t(experiencia_voluntaria.se_sentiu_acolhida_volutaria ? '\\\\nSe sentiu acolhida pela voluntária: ' + experiencia_voluntaria.se_sentiu_acolhida_volutaria : '') : ''\n\t) +\n\t'\\\\n\\\\nMELHORIAS' +\n\t(melhorias.melhorias ? '\\\\nMelhorias: ' + melhorias.melhorias : '')\n\n\tlet answers_txt = JSON.stringify(answers).replaceAll('Sim',true).replaceAll('Não',false)\n\tanswers_txt = answers_txt.replaceAll('false quis informar','Não quis informar').replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n\titem.json= {\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\tuser_id,\n              answers,\n\t\t\t\t\t\t\tbody_ticket,\t\n\t\t\t\t\t\t\tanswers_txt\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\n}\n\nreturn items; "
        },
        "name": "Formata - Conclusão Jurídico",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "id": "295840e3-6fbd-48c1-843b-4b1fb0cec851"
      },
      {
        "parameters": {
          "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nlet risco = 'nenhum';\nlet priority = 'low';\nfor (item of items) {\n\n  const results =  item.json.submission.results; \n  dados_voluntaria = {\n\t\tnome: results[\"1_nome_completo\"],\n\t\temail_cadastro: results[\"2_email_de_cadastro\"]\n\t}\n\tlet dados_acolhida = {\n\t\tnome: results[\"3_nome_da_acolhida\"],\n\t}\n\n\tlet sobre_o_atendimento = {\n\t\tdata_do_encerramento: results[\"4_data_de_encerramento_do\"],\n\t\tseguirao_em_atendimento: results[\"5_voce_e_a_acolhida_segui\"],\n\t\tatraves_do_atendimento: results['5_atraves_do_atendimento'],\n\t\timpactos_sofrendo_acolhida_moderado: results[\"7_quais_impactos_a_acolhi\"],\n\t\timpactos_sofrendo_acolhida_grave: results[\"8_quais_impactos_a_acolhi\"],\n\t\timpactos_superados: results[\"9_quais_impactos_em_decor\"],\n\t\tdesfecho_psicoterapia: results[\"10_descreva_sucintamente\"]\n\t}\n\n\tlet experiencia_voluntaria = {\n\t\texperiencia_psicologa: results[\"11_se_desejar_descreva_su\"], \n\t\taprendizagens: results[\"12_quais_aprendizagens_es\"],\n\t\tdesafios: results[\"13_e_os_desafios\"],\n\t\tsolicitou_ajuda_mapa: results[\"14_voce_solicitou_ajuda_d\"],\n\t\tse_sentiu_orientada_mapa: results[\"141_sentiuse_orientada\"],\n\t\tse_sentiu_acolhida_mapa: results[\"142_sentiuse_acolhida_pel\"],\n\t\tsolicitou_ajuda_voluntaria: results[\"15_voce_solicitou_ajuda_d\"],\n\t\tse_sentiu_orientada_voluntaria: results[\"151_sentiuse_orientada\"],\n\t\tse_sentiu_acolhida_voluntaria: results[\"152_sentiuse_acolhida_pel\"]\n\t}\n\t\n\tlet melhorias = {\n\t\tmelhorias: results[\"16_se_desejar_deixe_suges\"],\n\t}\t\n\n\tif(sobre_o_atendimento.impactos_sofrendo_acolhida_moderado !== 'A acolhida não está sofrendo nenhum dos impactos citados acima') {\n\t\tpriority = 'normal'\n\t\trisco = 'moderado'\n\t}\n\n\tif(sobre_o_atendimento.impactos_sofrendo_acolhida_grave !== 'A acolhida não está sofrendo nenhum dos impactos citados acima') {\n\t\tpriority = 'high'\n\t\trisco = 'grave'\t\n\t}\n\n\tlet answers = {dados_voluntaria, dados_acolhida, sobre_o_atendimento, experiencia_voluntaria, melhorias, risco: risco}\n\tconst user_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"] \n\n\tlet data = new Date(sobre_o_atendimento.data_do_encerramento)\n  let body_ticket = 'RISCO: ' + risco.toUpperCase() + '\\\\n\\\\nDADOS DA VOLUNTÁRIA:\\\\nNome: ' + dados_voluntaria.nome +'\\\\nEmail: ' + dados_voluntaria.email_cadastro +\n\t'\\\\n\\\\nDADOS DA ACOLHIDA\\\\nNome:' + dados_acolhida.nome + \n\n\t'\\\\n\\\\nSOBRE O ATENDIMENTO\\\\nData de encerramento do atendimento: ' +  ((data.getDate() )) + \"/\" + ((data.getMonth() + 1)) + \"/\" + data.getFullYear() +\n\t'\\\\nVoluntária e acolhida seguirão em atendimento: ' + sobre_o_atendimento.seguirao_em_atendimento +\n\t'\\\\nAtravés do atendimento, resultados da acolhida: ' + sobre_o_atendimento.atraves_do_atendimento +\n\t'\\\\nImpactos moderados que a acolhida ainda está sofrendo: ' + sobre_o_atendimento.impactos_sofrendo_acolhida_moderado +\n\t'\\\\nImpactos graves que a acolhida ainda está sofrendo: ' + sobre_o_atendimento.impactos_sofrendo_acolhida_grave +\n\t'\\\\nImpactos superados: ' + sobre_o_atendimento.impactos_superados +\n\t'\\\\nDesfecho do processo psicoterapêutico: ' + sobre_o_atendimento.desfecho_psicoterapia\n\n\t'\\\\n\\\\nSOBRE A EXPERIÊNCIA DA VOLUNTÁRIA' +\n\t(experiencia_voluntaria.experiencia_psicologa ? '\\\\nDescrição da experiência: ' + experiencia_voluntaria.experiencia_psicologa : '') +\n\t'\\\\nAprendizagens da psicóloga: ' + experiencia_voluntaria.aprendizagens +\n\t'\\\\nDesafios da psicóloga: ' + experiencia_voluntaria.desafios +\n\t'\\\\nSolicitou ajuda do mapa: ' + experiencia_voluntaria.solicitou_ajuda_mapa + \n\t(experiencia_voluntaria.solicitou_ajuda_mapa === 'Sim' ? \n\t'\\\\nSentiu-se orientada: ' + experiencia_voluntaria.se_sentiu_orientada_mapa +\n\t'\\\\nSentiu-se acolhida: ' + experiencia_voluntaria.se_sentiu_acolhida_mapa : ''\n\t) +\n\t'\\\\nSolicitou ajuda voluntária: ' + experiencia_voluntaria.solicitou_ajuda_voluntaria +\n\t(experiencia_voluntaria.solicitou_ajuda_voluntaria === 'Sim' ?\n\t'\\\\nSentiu-se orientada: ' + experiencia_voluntaria.se_sentiu_orientada_voluntaria +\n\t'\\\\nSentiu-se acolhida: ' + experiencia_voluntaria.se_sentiu_acolhida_voluntaria : ''\n\t) +\n\n\t(melhorias.melhorias ? '\\\\n\\\\MELHORIAS E SUGESTÕES\\\\nSugestões de melhoridas: ' + melhorias.melhorias : '')\n\n\tlet answers_txt = JSON.stringify(answers).replaceAll('Sim',true).replaceAll('Não',false)\n\tanswers_txt = answers_txt.replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n\titem.json= {\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\tuser_id,\n              answers,\n\t\t\t\t\t\t\tbody_ticket,\t\n\t\t\t\t\t\t\tanswers_txt\t\t\t\t\t\n\t\t\t\t\t\t}\n\titem.json.answers.risco =item.json.answers.risco.toUpperCase();\n}\n\nreturn items[items.length - 1]; "
        },
        "name": "Formata - Conclusão Psicológico",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          440,
          700
        ],
        "id": "1acd0ba4-e376-4cdc-9dc0-8def6617bb09"
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Conclusão Jurídico\"].json[\"user_id\"]}},\n \t\t\"organization_id\": 360282119532,\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"conclusao\"], \n \t\t\"status\": \"new\",\n   \t\t\"priority\": \"{{$node[\"Formata - Conclusão Jurídico\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Conclusão] {{$node[\"Formata - Conclusão Jurídico\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\t\"body\": \"{{$node[\"Formata - Conclusão Jurídico\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (conclusao juridico)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          680,
          460
        ],
        "id": "8564933e-93ac-478c-a0b9-1f2abb782698",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Conclusão Psicológico\"].json[\"user_id\"]}},\n \t\t\"organization_id\": 360269610652,\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"conclusao\"], \n \t\t\"status\": \"new\",\n   \t\t\"priority\": \"{{$node[\"Formata - Conclusão Psicológico\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Conclusão] {{$node[\"Formata - Conclusão Psicológico\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\t\"body\": \"{{$node[\"Formata - Conclusão Psicológico\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (conclusao psicologico)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          680,
          700
        ],
        "id": "811cceb1-a1a0-4091-9dac-fb923a06b60c",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "let risco = 'nenhum';\nlet priority = 'low';\nfor (item of items) {\n\n  const results =  item.json.submission.results; \n\n\tlet dados_voluntaria = {\n\t\tnome:\tresults[\"1_seu_nome_completo\"], //\"Teste 2022\",\n\t\temail_cadastro: results[\"2_seu_email_de_cadastro\"] //\"teste@teste.br\",\n\t}\n\t\n\tlet dados_acolhida = {\n\t\tnome: results[\"3_nome_da_acolhida\"] //\"Acholhida teste\",\n\t}\n\t\n\tlet atendimento = {\n\t\tdata_inicio_atendimento: results[\"4_data_de_inicio_do_atend\"],\n\t\tdata_encerramento: results[\"5_data_de_interrupcao_do\"], //11/11/2022\n\t\tdemanda_atendimento: results[\"6_qual_a_demanda_da_acolh\"],\n\t\tmotivo_interrupcao: results[\"7_qual_o_motivo_da_interr\"],\n\t\tprofissionais_reencaminhamento: results[\"8_caso_o_motivo_da_interr\"],\n\t\tequipes_servico_publico: results[\"9_caso_o_motivo_da_interr\"],\n\t\tatendimento_fora_do_projeto: results[\"10_voce_e_a_acolhida_segu\"]\n\t}\n\n\t\tlet disponibilidade = {\n\t\tcontinuara_disponivel: results[\"11_voce_continuara_dispon\"],\n\t\tvoce_deseja: results[\"111_voce_deseja\"],\n\t\tcategoria_suspensao_cadastro: results[\"112_caso_deseje_suspender\"]\n\t}\n\n\tlet experiencia_voluntaria = {\t\n\t\tsolicitou_ajuda_mapa: results[\"12_voce_solicitou_ajuda_d\"],\n\t\tse_sentiu_orientada: results[\"121_sentiuse_orientada\"],\n\t\tse_sentiu_acolhida: results[\"122_sentiuse_acolhida_pel\"],\n\t\taprendizagens: results[\"13_quais_aprendizagens_es\"],\n\t\tdesafios: results[\"14_quais_desafios_voce_en\"],\n\t\tdescricao_experiencia: results[\"15_se_desejar_descreva_su\"]\n\t}\n\n\n\tlet answers = {dados_voluntaria, dados_acolhida, atendimento, disponibilidade, experiencia_voluntaria, risco}\n\tconst user_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]\n\tconst organization_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"organization_id\"][\"value\"]\n\tlet data_inicio = new Date(atendimento.data_inicio_atendimento)\n\tlet data_encerramento = new Date(atendimento.data_encerramento)\n\n  let body_ticket = 'RISCO: ' + risco.toUpperCase() + '\\\\n\\\\nDADOS DA VOLUNTÁRIA\\\\nNome: ' + dados_voluntaria.nome + '\\\\nEmail: ' + dados_voluntaria.email_cadastro +\n\t'\\\\n\\\\nDADOS DA ACOLHIDA\\\\nNome: ' + dados_acolhida.nome + \n\t//atendimento\n\t'\\\\n\\\\nSOBRE O ATENDIMENTO\\\\nData do início: ' + ((data_inicio.getDate() )) + \"/\" + ((data_inicio.getMonth() + 1)) + \"/\" + data_inicio.getFullYear() +\n\t'\\\\nData do encerramento: ' + ((data_encerramento.getDate() )) + \"/\" + ((data_encerramento.getMonth() + 1)) + \"/\" + data_encerramento.getFullYear() +\n\t'\\\\nDemanda da acolhida: ' + atendimento.demanda_atendimento +\n\t'\\\\nMotivo da interrupção: ' + atendimento.motivo_interrupcao +\n\t(atendimento.profissionais_reencaminhamento ? '\\\\nÁrea de profissionais para reencaminhamento da acolhida: ' + atendimento.profissionais_reencaminhamento : '') +\n\t(atendimento.equipes_servico_publico ? '\\\\nServiços públicos para reencaminhamento da acolhida: ' + atendimento.equipes_servico_publico : '') +\n\t'\\\\nVoluntária e acolhida seguirão em atendimento fora do projeto: ' + atendimento.atendimento_fora_do_projeto +\n\n\t//Disponibilidade\n\t'\\\\n\\\\nSOBRE A DISPONIBILIDADE\\\\nVoluntária continuará disponível: ' + disponibilidade.continuara_disponivel +\n\t(disponibilidade.continuara_disponivel === 'Não' ?\n\t(disponibilidade.voce_deseja ? '\\\\nVocê deseja: ' + disponibilidade.voce_deseja : '') +\n\t(disponibilidade.categoria_suspensao_cadastro ? '\\\\nCategoria da suspensão: ' + disponibilidade.categoria_suspensao_cadastro : '')\n\t: '')\t+\n\n\t//Experiência como voluntária\n\t'\\\\n\\\\nEXPERIÊNCIA COMO VOLUNTÁRIA\\\\nSolicitou ajuda da equipe do mapa: ' + experiencia_voluntaria.solicitou_ajuda_mapa +\n\t(experiencia_voluntaria.solicitou_ajuda_mapa === 'Sim'?\n\t(experiencia_voluntaria.se_sentiu_orientada ? '\\\\nSentiu-se orientada: ' + experiencia_voluntaria.se_sentiu_orientada : '')+\n\t(experiencia_voluntaria.se_sentiu_acolhida ? '\\\\nSentiu-se acolhida: ' + experiencia_voluntaria.se_sentiu_acolhida : '')\n\t: '') +\n\t'\\\\nAprendizagens do atendimento: ' + experiencia_voluntaria.aprendizagens +\n\t'\\\\nDesafios do atendimento: ' + experiencia_voluntaria.desafios +\n\t(experiencia_voluntaria.descricao_experiencia ? '\\\\nDescrição da experiência como voluntária: ' + experiencia_voluntaria.descricao_experiencia : '')\t\n\n\tlet answers_txt = JSON.stringify(answers).replaceAll('Sim',true).replaceAll('Não',false)\n\tanswers_txt = answers_txt.replaceAll('false quis informar','Não quis informar').replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n\titem.json= {\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\tuser_id,\n\t\t\t\t\t\t\torganization_id,\n              answers,\n\t\t\t\t\t\t\tbody_ticket,\t\n\t\t\t\t\t\t\tanswers_txt\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\n}\n\nreturn items; "
        },
        "name": "Formata - Interrupção Atendimento",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          440,
          940
        ],
        "id": "0e7b8d8b-6848-49e4-8b24-09e93ab1c99e"
      },
      {
        "parameters": {
          "functionCode": "let risco = 'nenhum';\nlet priority = 'low';\nfor (item of items) {\n\n  const results =  item.json.submission.results; \n\n\tlet dados_voluntaria = {\n\t\tnome:\tresults[\"1_nome_completo\"], //\"Teste 2022\",\n\t\temail_cadastro: results[\"2_email_de_cadastro\"] //\"teste@teste.br\",\n\t}\n\t\n\tlet dados_acolhida = {\n\t\tnome: results[\"3_nome_da_acolhida\"] //\"Acholhida teste\",\n\t}\n\t\n\tlet encaminhamento = {\n\t\tacolhida_estabeleceu_contato: results[\"4_a_acolhida_chegou_a_est\"],\n\t\tdata_primeiro_contato: results[\"41_qual_foi_a_data_do_pri\"],\n\t\tteve_conhecimento_demanda: results[\"5_voce_teve_conhecimento\"],\n\t\tdemanda: results[\"51_qual_a_demanda_da_acol\"],\n\t\tdata_interrupcao: results[\"6_data_da_interrupcao_do\"], //11/11/2022\n\t\tmotivo_interrupcao: results[\"7_qual_o_motivo_da_interr\"],\n\t\tprofissionais_reencaminhamento: results[\"8_caso_a_area_de_atuacao\"],\n\t\tequipes_servico_publico: results[\"9_caso_o_motivo_da_interr\"],\n\t}\n\n\t\tlet disponibilidade = {\n\t\tcontinuara_disponivel: results[\"10_voce_continuara_dispon\"],\n\t\tvoce_deseja: results[\"101_voce_deseja\"],\n\t\tcategoria_suspensao_cadastro: results[\"11_caso_deseje_suspender\"]\n\t}\n\n\tlet answers = {dados_voluntaria, dados_acolhida, encaminhamento, disponibilidade, risco}\n\tconst user_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]\n\tconst organization_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"organization_id\"][\"value\"]\n\tlet data_contato = new Date(encaminhamento.data_primeiro_contato)\n\tlet data_interrupcao = new Date(encaminhamento.data_interrupcao)\n\n  let body_ticket = 'RISCO: ' + risco.toUpperCase() + '\\\\n\\\\nDADOS DA VOLUNTÁRIA\\\\nNome: ' + dados_voluntaria.nome + '\\\\nEmail: ' + dados_voluntaria.email_cadastro +\n\t'\\\\n\\\\nDADOS DA ACOLHIDA\\\\nNome: ' + dados_acolhida.nome + \n\t//atendimento\n\t'\\\\n\\\\nSOBRE O ENCAMINHAMENTO\\\\nAcolhida estabeleu contato: ' + encaminhamento.acolhida_estabeleceu_contato +\n\t(encaminhamento.acolhida_estabeleceu_contato === 'Sim' ?\n\t(encaminhamento.data_primeiro_contato ? '\\\\nData do primeiro contato: ' + ((data_contato.getDate() )) + \"/\" + ((data_contato.getMonth() + 1)) + \"/\" + data_contato.getFullYear()  : '')\n\t: '')\t+\n\t'\\\\nTeve conhecimento da demanda da acolhida: ' + encaminhamento.teve_conhecimento_demanda +\n\t(encaminhamento.teve_conhecimento_demanda === 'Sim'?\n\t(encaminhamento.demanda ? '\\\\nDemanda da acolhida: ' + encaminhamento.demanda : '')\n\t: '') +\t\n\t'\\\\nData de interrupção: ' + \t((data_interrupcao.getDate() )) + \"/\" + ((data_interrupcao.getMonth() + 1)) + \"/\" + data_interrupcao.getFullYear() +\t\n\t'\\\\nMotivo da interrupção: ' + encaminhamento.motivo_interrupcao +\n\t(encaminhamento.profissionais_reencaminhamento ? '\\\\nÁrea de profissionais para reencaminhamento da acolhida: ' + encaminhamento.profissionais_reencaminhamento : '') +\n\t(encaminhamento.equipes_servico_publico ? \t'\\\\nServiços públicos para reencaminhamento da acolhida: ' + encaminhamento.equipes_servico_publico : '') +\n\n\t//Disponibilidade\n\t'\\\\n\\\\nSOBRE A DISPONIBILIDADE\\\\nVoluntária continuará disponível: ' + disponibilidade.continuara_disponivel +\n\t(disponibilidade.continuara_disponivel === 'Não' ?\n\t(disponibilidade.voce_deseja ? '\\\\nVocê deseja: ' + disponibilidade.voce_deseja : '') \n\t: '')\t+\n\t(disponibilidade.categoria_suspensao_cadastro ? '\\\\nCategoria da suspensão: ' + disponibilidade.categoria_suspensao_cadastro : '')\n\n\tlet answers_txt = JSON.stringify(answers).replaceAll('Sim',true).replaceAll('Não',false)\n\tanswers_txt = answers_txt.replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n\titem.json= {\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\tuser_id,\n\t\t\t\t\t\t\torganization_id,\n              answers,\n\t\t\t\t\t\t\tbody_ticket,\t\n\t\t\t\t\t\t\tanswers_txt\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\n}\n\nreturn items; "
        },
        "name": "Formata - Interrupção Encaminhamento",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          440,
          1180
        ],
        "id": "e6a6cddd-afd8-4a32-add5-1824359c352a"
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Interrupção Encaminhamento\"].json[\"user_id\"]}},\n \t\t\"organization_id\": {{$node[\"Formata - Interrupção Encaminhamento\"].json[\"organization_id\"]}},\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"encaminhamento-interrupção\"], \n \t\t\"status\": \"new\",\n   \t\t\"priority\": \"{{$node[\"Formata - Interrupção Encaminhamento\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Enc. Interrupção] {{$node[\"Formata - Interrupção Encaminhamento\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\t\"body\": \"{{$node[\"Formata - Interrupção Encaminhamento\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (interrupcao encaminhamento)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          680,
          1180
        ],
        "id": "f516d6f9-8f0c-499c-908b-bb968dc2aaaa",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={\n\"ticket\":{\n\"requester_id\":{{$node[\"Formata - Interrupção Atendimento\"].json[\"user_id\"]}},\n\"organization_id\": {{$node[\"Formata - Interrupção Atendimento\"].json[\"organization_id\"]}},\n\"description\": \"Importado via N8N\",\n\"tags\": [\"atendimento-interrupção\"],\n\"status\": \"new\",\n\"priority\": \"{{$node[\"Formata - Interrupção Atendimento\"].json[\"priority\"]}}\",\n\"subject\": \"[Atend. Interrupção] {{$node[\"Formata - Interrupção Atendimento\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n\"comment\": {\n\"body\": \"{{$node[\"Formata - Interrupção Atendimento\"].json[\"body_ticket\"]}}\",\n\"public\": false\n}\n}\n}"
        },
        "name": "Criar novo ticket (interrupcao atendimento)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          680,
          940
        ],
        "id": "c3f86fea-d62b-4490-aaf7-052981bc78f7",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\ninsert_mda_forms_answers(objects: {answers: $answers, form: \"interrupcao-encaminhamento\", msr_name: \"{{$node[\"Formata - Interrupção Encaminhamento\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (interrupcao encaminhamento)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Interrupção Encaminhamento\"].json[\"answers\"][\"dados_voluntaria\"][\"email_cadastro\"]}}\",organization_id:{{$node[\"Formata - Interrupção Encaminhamento\"].json[\"organization_id\"]}}, form_id:{{$node[\"Webhook\"].json[\"body\"][\"mautic.form_on_submit\"][0][\"submission\"][\"form\"][\"id\"]}}\n}) {\naffected_rows\n}\n}",
          "variables": "={\n\"answers\": {{$node[\"Formata - Interrupção Encaminhamento\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas1",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          900,
          1180
        ],
        "id": "2ce1240b-c924-465f-8c10-d735f4578ee1",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\ninsert_mda_forms_answers(objects: {answers: $answers, form: \"interrupcao-atendimento\", msr_name: \"{{$node[\"Formata - Interrupção Atendimento\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (interrupcao atendimento)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Interrupção Atendimento\"].json[\"answers\"][\"dados_voluntaria\"][\"email_cadastro\"]}}\",organization_id:{{$node[\"Formata - Interrupção Atendimento\"].json[\"organization_id\"]}}, form_id:{{$node[\"Webhook\"].json[\"body\"][\"mautic.form_on_submit\"][0][\"submission\"][\"form\"][\"id\"]}}\n}) {\naffected_rows\n}\n}",
          "variables": "={\n\"answers\":{{$node[\"Formata - Interrupção Atendimento\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas3",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          900,
          940
        ],
        "id": "0087fbbe-8d38-437c-9400-18eb7684a68c",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Item Lists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "Formata - Conclusão Jurídico",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Conclusão Psicológico",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Interrupção Atendimento",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Interrupção Encaminhamento",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item Lists": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Conclusão Jurídico": {
        "main": [
          [
            {
              "node": "Criar novo ticket (conclusao juridico)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Conclusão Psicológico": {
        "main": [
          [
            {
              "node": "Criar novo ticket (conclusao psicologico)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (conclusao juridico)": {
        "main": [
          [
            {
              "node": "Salvar Respostas2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (conclusao psicologico)": {
        "main": [
          [
            {
              "node": "Salvar Respostas",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Interrupção Atendimento": {
        "main": [
          [
            {
              "node": "Criar novo ticket (interrupcao atendimento)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Interrupção Encaminhamento": {
        "main": [
          [
            {
              "node": "Criar novo ticket (interrupcao encaminhamento)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (interrupcao encaminhamento)": {
        "main": [
          [
            {
              "node": "Salvar Respostas1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (interrupcao atendimento)": {
        "main": [
          [
            {
              "node": "Salvar Respostas3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "d7cd4f54-f098-49f8-a7f6-502536126502",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-16T17:41:58.269Z",
        "updatedAt": "2024-01-16T17:41:58.269Z",
        "id": "E3Tnq8M430hgCQfP",
        "name": "Mapa do acolhimento"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:45:00.597Z",
    "updatedAt": "2024-01-16T21:45:17.000Z",
    "id": "P0e1hKG4YYdXQ19v",
    "name": "[Database pipeline] volunteer_status_history PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "b83a43db-67a7-4543-a790-4e3fbb4cbee6",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT \n   id AS volunteer_id,\n   NOW() AS created_at,\n   condition AS status\nFROM public.volunteers",
          "additionalFields": {}
        },
        "id": "3897d0ed-b51e-47c0-807f-41fc7719e059",
        "name": "Fetch current volunteers status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          680,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "table": "volunteer_status_history",
          "columns": "volunteer_id, status, created_at",
          "additionalFields": {}
        },
        "id": "ece9975d-1f30-4f77-a5b6-b980e35a895b",
        "name": "Insert into volunteer_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          900,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch current volunteers status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch current volunteers status": {
        "main": [
          [
            {
              "node": "Insert into volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "147f96c6-0c3a-4bc4-a2d2-8c6854d5bcd5",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:38:40.224Z",
    "updatedAt": "2024-01-28T18:45:52.000Z",
    "id": "Pc6TF5fN84Xt44e4",
    "name": "[Database Pipeline] - volunteer_availability PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "49b972a4-0d03-439e-8d06-7dbba6e6cbef",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          140,
          680
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n\tid AS volunteer_id,\n        zendesk_user_id,\n\tavailability AS max_matches,\n\tCASE\n\t\tWHEN occupation = 'lawyer' THEN 'legal'\n\t\tELSE 'psychological'\n\tEND AS support_type,\n\t'not_found' AS support_expertise,\n\tCASE\n\t\tWHEN modality = 'online' OR modality = 'both' THEN TRUE\n\t\tELSE FALSE\n\tEND AS offers_online_support,\n\toffers_libras_support,\n\tlatitude AS lat,\n\tlongitude AS lng,\n\tcity,\n\tstate,\n\tcreated_at,\n\tupdated_at,\n        CASE\n\t\tWHEN \n\t\t\tcondition = 'disponivel'\n\t\t\tAND first_name IS NOT NULL\n\t\t\tAND first_name != 'not_found'\n\t\t\tAND register_number != 'not_found'\n\t\t\tAND phone != 'not_found'\t\t\n\t\tTHEN TRUE\n\t\tELSE FALSE\n\tEND AS previous_is_available,\n  condition\nFROM public.volunteers",
          "additionalFields": {}
        },
        "id": "bd157bb4-f2ce-4e31-9f8e-f60e4e88f8c2",
        "name": "Fetch volunteers",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   volunteer_id,\n   COUNT(*) AS current_matches\nFROM match.matches\nWHERE status IN ('waiting_contact', 'in_contact')\nAND volunteer_id IS NOT NULL\nGROUP BY volunteer_id",
          "additionalFields": {}
        },
        "id": "e991fca5-0359-472c-a8f1-42e5b3d69e70",
        "name": "Fetch current_matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          480,
          860
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "volunteer_id",
                "field2": "volunteer_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "05fc4261-d0f8-4d06-9b70-32316f0c3726",
        "name": "Volunteers with current_matches",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          900,
          480
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "volunteer_id",
                "field2": "volunteer_id"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "b2c5c7fb-7fca-49c5-a146-c1335b7a36fb",
        "name": "Volunteers without current_matches",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          900,
          840
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.current_matches = 0;\n}\n\nreturn $input.all();"
        },
        "id": "f557da9b-3874-4fb1-ad10-81f6d829ed7c",
        "name": "Adds 0 current_matches",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1120,
          840
        ]
      },
      {
        "parameters": {},
        "id": "3036eed0-29d4-4f46-a151-1ba32b659f58",
        "name": "All volunteers with current_matches",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1400,
          500
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  if(item.json.previous_is_available === true && item.json.current_matches < item.json.max_matches){\n    item.json.is_available = true;\n  }\n  else {\n    item.json.is_available = false;\n  }\n}\n\nreturn $input.all();"
        },
        "id": "07d88dac-c576-43d3-9697-96bbfa69a376",
        "name": "Add is_available",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1660,
          500
        ]
      },
      {
        "parameters": {
          "table": "volunteer_availability",
          "columns": "volunteer_id, max_matches, support_type, support_expertise, offers_online_support, offers_libras_support, lat, lng, city, state, created_at, updated_at, current_matches, is_available",
          "additionalFields": {}
        },
        "id": "130756fa-d77a-4932-90cd-9f5ba3a3edc7",
        "name": "Insert into volunteer_availability",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1900,
          500
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "id": "b88caf1a-5f1d-4208-847c-c0e1d78f2ad1",
                "leftValue": "={{ $json.condition }}",
                "rightValue": "disponivel",
                "operator": {
                  "type": "string",
                  "operation": "notEquals"
                }
              },
              {
                "id": "1fdc6865-5dc7-44e6-8361-afa93f682acf",
                "leftValue": "={{ $json.is_available }}",
                "rightValue": "",
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "b2cfe8cd-ac03-4346-999f-29f04c3f4771",
        "name": "If",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          1900,
          340
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch volunteers",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch volunteers": {
        "main": [
          [
            {
              "node": "Volunteers with current_matches",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers without current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch current_matches": {
        "main": [
          [
            {
              "node": "Volunteers with current_matches",
              "type": "main",
              "index": 1
            },
            {
              "node": "Volunteers without current_matches",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers without current_matches": {
        "main": [
          [
            {
              "node": "Adds 0 current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adds 0 current_matches": {
        "main": [
          [
            {
              "node": "All volunteers with current_matches",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers with current_matches": {
        "main": [
          [
            {
              "node": "All volunteers with current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "All volunteers with current_matches": {
        "main": [
          [
            {
              "node": "Add is_available",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add is_available": {
        "main": [
          [
            {
              "node": "Insert into volunteer_availability",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "46e85dff-1e79-4571-abbb-28cde8bda695",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T20:42:41.628Z",
    "updatedAt": "2024-01-16T20:46:23.000Z",
    "id": "UUpbXKmCbVY9rmAH",
    "name": "(Mapa do Acolhimento) Moodle-Zendesk",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "moodle-zendesk",
          "options": {}
        },
        "id": "86897462-c74b-48c7-b52b-92b8e9a9688a",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -2200,
          940
        ],
        "webhookId": "7477db0f-9d0b-4dd6-9ca4-c254c74e81d2"
      },
      {
        "parameters": {
          "rule": {
            "interval": [
              {}
            ]
          }
        },
        "id": "eb931df2-2323-42b6-90df-58035ed75e4a",
        "name": "Schedule Trigger",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1,
        "position": [
          -1320,
          1580
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=select * from volunteers v\nleft join integrations_logs il on il.internal_id = v.id and il.form_type = v.occupation\nwhere\nil.integration = 'moodle'\nand il.\"type\" = 'matricular'\nand il.external_id = {{$node[\"Webhook\"].json[\"body\"][\"userid\"]}}",
          "additionalFields": {}
        },
        "id": "d3aec0ba-e95c-4e90-9f14-e20b737245ce",
        "name": "Busca voluntária",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -1980,
          940
        ],
        "alwaysOutputData": true,
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Busca voluntária\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "814e1e30-3350-4d5f-8c86-cdc37c7818a6",
        "name": "IF",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -1760,
          940
        ]
      },
      {
        "parameters": {
          "errorMessage": "=Não achou a voluntária\nmoodle_id:  {{$node[\"Schedule Trigger\"].json[\"body\"][\"userid\"]}}"
        },
        "id": "f09ef5ed-afe5-4b96-9ab0-0d87d26cc488",
        "name": "Stop And Error",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          -1460,
          1200
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$node[\"Busca User\"].json}}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "e5b64f99-bddb-424e-8f73-9797562f53ba",
        "name": "IF1",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -1380,
          920
        ]
      },
      {
        "parameters": {
          "errorMessage": "=Não achou a voluntária\nvollunteer_id:  {{$node[\"Busca voluntária\"].json[\"internal_id\"]}}"
        },
        "id": "54f3994b-42c8-4b99-8d47-a92512eca70b",
        "name": "Stop And Error1",
        "type": "n8n-nodes-base.stopAndError",
        "typeVersion": 1,
        "position": [
          -1220,
          1160
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "search",
          "limit": 30,
          "filters": {
            "external_id": "={{$node[\"Busca voluntária\"].json[\"internal_id\"]}}"
          }
        },
        "id": "6f38a5a2-f655-4136-b9ee-fea21f75c48e",
        "name": "Busca User",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          -1540,
          920
        ],
        "alwaysOutputData": true,
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{ $json[\"id\"] }}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "Aprovada"
                }
              ]
            }
          }
        },
        "id": "d19dd9a5-7cd2-4031-82a6-6903a65fe4dd",
        "name": "Atualiza User",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          -1020,
          980
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "condition",
                "value": "Aprovada"
              }
            ],
            "number": [
              {
                "name": "id",
                "value": "={{$node[\"Busca voluntária\"].json[\"internal_id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "788dacc9-4b1c-47a4-aaf3-5000bf86fa19",
        "name": "Set",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          -820,
          980
        ]
      },
      {
        "parameters": {
          "operation": "update",
          "table": "volunteers",
          "columns": "condition",
          "additionalFields": {}
        },
        "id": "37fe8415-2b31-414f-be4b-18b50f7d7f9f",
        "name": "Atualiza voluntária",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -640,
          980
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "url": "=https://mapadoacolhimento.zendesk.com/api/v2/users/{{$node[\"Busca User\"].json[\"id\"]}}/tickets/requested",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpBasicAuth",
          "options": {}
        },
        "id": "bef1d056-f6c5-4fb1-8d13-d048ca7f7956",
        "name": "HTTP Request",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          -440,
          980
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "fieldToSplitOut": "tickets",
          "include": "allOtherFields",
          "options": {}
        },
        "id": "9853827f-b0ed-4472-b620-87584bd8ce82",
        "name": "Item Lists",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          -240,
          980
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json[\"tickets\"][\"status\"] }}",
                "value2": "pending"
              }
            ]
          }
        },
        "id": "043330dc-f1b0-474f-a635-b5041d9ae571",
        "name": "IF2",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -80,
          980
        ]
      },
      {
        "parameters": {
          "operation": "limit"
        },
        "id": "5c5dff3c-f627-4e15-a537-55384c6c572b",
        "name": "Item Lists1",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          140,
          960
        ]
      },
      {
        "parameters": {
          "operation": "update",
          "id": "={{ $json[\"tickets\"][\"id\"] }}",
          "jsonParameters": true,
          "updateFieldsJson": "{\n\"tags\": \"capacitacao-inicio\"\n}"
        },
        "id": "7789eefd-a090-408d-9c9f-982257ffce2d",
        "name": "Zendesk1",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          360,
          960
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "content": "## Pontos de atenção\n- Está pegando o tcket mais antigo pra atualização atualizar o fluxo quando definirmos uma forma de idetificar o ticket de cadastro pra além do assunto\n- ",
          "height": 268.08252427184465,
          "width": 371.7718446601941
        },
        "id": "6910c06e-5249-4ff3-8674-cd2140b1bd6a",
        "name": "Note",
        "type": "n8n-nodes-base.stickyNote",
        "typeVersion": 1,
        "position": [
          -2000,
          1160
        ]
      },
      {
        "parameters": {
          "dataType": "string",
          "value1": "={{$node[\"Webhook\"].json[\"body\"][\"eventname\"]}}",
          "rules": {
            "rules": [
              {
                "value2": "\\core\\event\\user_password_updated"
              },
              {
                "value2": "\\core\\event\\course_completed",
                "output": 1
              }
            ]
          }
        },
        "id": "6419f3fd-2144-45a7-bbc4-b681e22bca5a",
        "name": "Switch",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 1,
        "position": [
          -1200,
          820
        ]
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "=423092711812",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "Capacitação"
                }
              ]
            }
          }
        },
        "id": "bd926f07-5347-4414-88f4-172973195caa",
        "name": "Atualiza User1",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          -1100,
          1540
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "condition",
                "value": "capacitacao"
              }
            ],
            "number": [
              {
                "name": "id",
                "value": 131785
              }
            ]
          },
          "options": {}
        },
        "id": "b8c6ceb8-7d8f-4a77-aafc-5d87737f3943",
        "name": "Set1",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          -1860,
          1580
        ]
      },
      {
        "parameters": {
          "operation": "update",
          "table": "volunteers",
          "columns": "condition",
          "additionalFields": {}
        },
        "id": "bc971243-d943-481e-9b6b-48d11a9fbf65",
        "name": "Atualiza voluntária1",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -440,
          640
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "url": "=https://mapadoacolhimento.zendesk.com/api/v2/users/{{$node[\"Atualiza voluntária\"].json[\"zendesk_user_id\"]}}/tickets/requested",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpBasicAuth",
          "options": {}
        },
        "id": "a11aebaa-efa6-44dd-982e-cbb9b1b65303",
        "name": "HTTP Request1",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          -260,
          640
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "fieldToSplitOut": "tickets",
          "include": "allOtherFields",
          "options": {}
        },
        "id": "0d68bbc6-b036-414d-867c-eb11d8e74b41",
        "name": "Item Lists2",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          80,
          480
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json[\"tickets\"][\"status\"] }}",
                "value2": "pending"
              }
            ]
          }
        },
        "id": "85801fa3-61b5-498d-ae61-1f0d088ceeda",
        "name": "IF4",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          240,
          480
        ]
      },
      {
        "parameters": {
          "operation": "limit"
        },
        "id": "a16e2453-b031-4535-8831-2f71991b90ed",
        "name": "Item Lists3",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "operation": "update",
          "id": "={{ $json[\"tickets\"][\"id\"] }}",
          "jsonParameters": true,
          "updateFieldsJson": "{\n\"tags\": \"capacitacao-fim\"\n}"
        },
        "id": "3d46881e-6d3e-47d7-a110-9f918a1083a7",
        "name": "Zendesk",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          620,
          460
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json[\"tickets\"] }}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "42e6ca72-3f4c-4d53-8a98-782c72fb21b1",
        "name": "IF3",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -80,
          620
        ]
      },
      {
        "parameters": {
          "url": "=https://mapadoacolhimento.zendesk.com/api/v2/users/{{$node[\"Busca User\"].json[\"id\"]}}/tickets/requested",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpBasicAuth",
          "options": {}
        },
        "id": "02c18cca-8e19-41aa-9d52-944acfb0ff93",
        "name": "HTTP Request2",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          -1580,
          1640
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  if (item.json.organization_id == 360269610652){\n  item.json.subjetc =`[Advogada] ${item.json.name} - ${item.json.user_fields.registration_number}`;\n  } else {\n    item.json.subjetc =`[Psicóloga] ${item.json.name} - ${item.json.user_fields.registration_number}`;\n  }\n}\n\nreturn $input.all();"
        },
        "id": "708fc120-11a8-49e2-8116-7bfde7c7650b",
        "name": "Code",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -780,
          640
        ]
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "condition",
                "value": "capacitacao"
              }
            ],
            "number": [
              {
                "name": "id",
                "value": "={{$node[\"Busca voluntária\"].json[\"internal_id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "1d9f0bc3-f0a9-48ca-881e-9014572a13e3",
        "name": "Set2",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          -600,
          640
        ]
      },
      {
        "parameters": {
          "description": "-",
          "additionalFields": {
            "customFieldsUi": {
              "customFieldsValues": [
                {
                  "id": 360021879811,
                  "value": "={{ $node[\"Code\"].json[\"user_fields\"][\"city\"] }}"
                },
                {
                  "id": 360021812712,
                  "value": "={{ $node[\"Code\"].json[\"phone\"] }}"
                },
                {
                  "id": 360016631592,
                  "value": "={{ $node[\"Code\"].json[\"name\"] }}"
                },
                {
                  "id": 360021665652,
                  "value": "={{ $node[\"Code\"].json[\"user_fields\"][\"condition\"] }}"
                }
              ]
            },
            "externalId": "={{ $node[\"Code\"].json[\"external_id\"] }}",
            "status": "pending",
            "subject": "={{ $node[\"Code\"].json[\"subjetc\"] }}"
          }
        },
        "id": "92736c78-d849-4dde-a1ba-1c2956cdc462",
        "name": "Cria novo ticket",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          220,
          660
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{ $json[\"id\"] }}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "Capacitação"
                }
              ]
            }
          }
        },
        "id": "7afe7e53-2e8f-4e40-afee-03e8f8267efa",
        "name": "Atualiza User3",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          -960,
          640
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "status",
                "value": "capacitacao"
              }
            ],
            "number": [
              {
                "name": "volunteer_id",
                "value": "={{$node[\"Busca voluntária\"].json[\"internal_id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "bd361163-8170-4553-9a2f-52b5fdbfd317",
        "name": "Set3",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          640,
          700
        ]
      },
      {
        "parameters": {
          "table": "volunteer_status_history",
          "columns": "volunteer_id,status",
          "additionalFields": {}
        },
        "id": "5dd84228-6f8c-45a6-ade0-db2d2dc0ed8e",
        "name": "Insere  histŕorico da voluntária",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          820,
          700
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "string": [
              {
                "name": "status",
                "value": "aprovada"
              }
            ],
            "number": [
              {
                "name": "volunteer_id",
                "value": "={{$node[\"Busca voluntária\"].json[\"internal_id\"]}}"
              }
            ]
          },
          "options": {}
        },
        "id": "cd7fafae-52c4-41bc-b95b-13031b1abdc6",
        "name": "Set4",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          560,
          960
        ]
      },
      {
        "parameters": {
          "table": "volunteer_status_history",
          "columns": "volunteer_id,status",
          "additionalFields": {}
        },
        "id": "c9e30f12-1338-4d68-a7c5-7e383cfd692a",
        "name": "Insere  histŕorico da voluntária1",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          780,
          960
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      }
    ],
    "connections": {
      "Busca voluntária": {
        "main": [
          [
            {
              "node": "IF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF": {
        "main": [
          [
            {
              "node": "Busca User",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF1": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Stop And Error1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca User": {
        "main": [
          [
            {
              "node": "IF1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza User": {
        "main": [
          [
            {
              "node": "Set",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set": {
        "main": [
          [
            {
              "node": "Atualiza voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request": {
        "main": [
          [
            {
              "node": "Item Lists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item Lists": {
        "main": [
          [
            {
              "node": "IF2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF2": {
        "main": [
          [
            {
              "node": "Item Lists1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item Lists1": {
        "main": [
          [
            {
              "node": "Zendesk1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza voluntária": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Busca voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "Atualiza User3",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Atualiza User",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza voluntária1": {
        "main": [
          [
            {
              "node": "HTTP Request1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request1": {
        "main": [
          [
            {
              "node": "IF3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item Lists2": {
        "main": [
          [
            {
              "node": "IF4",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF4": {
        "main": [
          [
            {
              "node": "Item Lists3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item Lists3": {
        "main": [
          [
            {
              "node": "Zendesk",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF3": {
        "main": [
          [
            {
              "node": "Item Lists2",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Cria novo ticket",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code": {
        "main": [
          [
            {
              "node": "Set2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set2": {
        "main": [
          [
            {
              "node": "Atualiza voluntária1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Atualiza User3": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set3": {
        "main": [
          [
            {
              "node": "Insere  histŕorico da voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Cria novo ticket": {
        "main": [
          [
            {
              "node": "Set3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Zendesk1": {
        "main": [
          [
            {
              "node": "Set4",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Zendesk": {
        "main": [
          [
            {
              "node": "Set3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set4": {
        "main": [
          [
            {
              "node": "Insere  histŕorico da voluntária1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {
      "Schedule Trigger": [
        {
          "json": {
            "headers": {
              "host": "n8n.bonde.org",
              "user-agent": "MoodleBot/4.1 (+https://moodle.staging.bonde.org)",
              "content-length": "414",
              "accept": "*/*",
              "accept-encoding": "deflate, gzip, br",
              "content-type": "application/json",
              "x-forwarded-for": "3.236.72.237",
              "x-forwarded-host": "n8n.bonde.org",
              "x-forwarded-port": "443",
              "x-forwarded-proto": "https",
              "x-forwarded-server": "06fdcd1c7d5d",
              "x-real-ip": "3.236.72.237"
            },
            "params": {},
            "query": {},
            "body": {
              "eventname": "\\core\\event\\course_completed",
              "component": "core",
              "action": "completed",
              "target": "course",
              "objecttable": "course_completions",
              "objectid": "24",
              "crud": "u",
              "edulevel": 2,
              "contextid": 130,
              "contextlevel": 50,
              "contextinstanceid": "3",
              "userid": "33",
              "courseid": "3",
              "relateduserid": "14",
              "anonymous": 0,
              "other": {
                "relateduserid": "14"
              },
              "timecreated": 1698780262,
              "host": "moodle.staging.bonde.org",
              "token": "",
              "extra": ""
            }
          }
        }
      ]
    },
    "versionId": "2da3c715-5c7e-4586-8191-00e02fed2ca5",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T17:41:58.269Z",
        "updatedAt": "2024-01-16T17:41:58.269Z",
        "id": "E3Tnq8M430hgCQfP",
        "name": "Mapa do acolhimento"
      }
    ]
  },
  {
    "createdAt": "2024-02-09T14:21:32.324Z",
    "updatedAt": "2024-02-23T15:03:47.000Z",
    "id": "VZ5E8nqAVVIrTOTv",
    "name": "[WIP] FLUXO DE BKP",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "position": [
          360,
          460
        ],
        "typeVersion": 1,
        "id": "fb848085-9fa5-4493-a10a-63504bd44399"
      },
      {
        "parameters": {
          "functionCode": "const newItems = [];\nfor (item of items) {\n  str = item.json.name.replaceAll(\" \",\"_\")\n  str = str.replaceAll(/[ÀÁÂÃÄÅ]/g,\"A\");\n  str = str.replaceAll(/[àáâãäå]/g,\"a\");\n  str = str.replaceAll(/[ÈÉÊË]/g,\"E\");\n  str = str.replaceAll(\"/\",\"\");\n  item.json.file_name = str;\n  newItems.push({json: item});\n}\nreturn newItems;"
        },
        "name": "dataArray",
        "type": "n8n-nodes-base.function",
        "position": [
          800,
          560
        ],
        "typeVersion": 1,
        "id": "46f15b6b-cad9-48ca-aaba-4563b06e8619"
      },
      {
        "parameters": {
          "resource": "file",
          "operation": "get",
          "owner": "={{$node[\"Globals\"].json[\"repo\"][\"owner\"]}}",
          "repository": "={{$node[\"Globals\"].json[\"repo\"][\"name\"]}}",
          "filePath": "={{$node[\"Globals\"].json[\"repo\"][\"path\"]}}{{ $json[\"json\"][\"file_name\"] }}.json",
          "asBinaryProperty": false,
          "additionalParameters": {}
        },
        "name": "GitHub",
        "type": "n8n-nodes-base.github",
        "position": [
          1440,
          300
        ],
        "typeVersion": 1,
        "alwaysOutputData": true,
        "id": "1893464c-0af4-475e-b1ff-7ff995c27d01",
        "credentials": {
          "githubApi": {
            "id": "enJuvcF6JzQBryLg",
            "name": "GitHub account [viviane]"
          }
        },
        "continueOnFail": true
      },
      {
        "parameters": {},
        "name": "Merge",
        "type": "n8n-nodes-base.merge",
        "position": [
          1360,
          610
        ],
        "typeVersion": 1,
        "id": "ea8f3bb1-23f9-42da-bb75-1a094f64ae38"
      },
      {
        "parameters": {
          "dataType": "string",
          "value1": "={{$json[\"github_status\"]}}",
          "rules": {
            "rules": [
              {
                "value2": "same"
              },
              {
                "value2": "different",
                "output": 1
              },
              {
                "value2": "new",
                "output": 2
              }
            ]
          }
        },
        "name": "github_status",
        "type": "n8n-nodes-base.switch",
        "position": [
          1660,
          610
        ],
        "typeVersion": 1,
        "id": "3e06aa80-0546-41a9-ac0a-7f2738c3441c"
      },
      {
        "parameters": {},
        "name": "same",
        "type": "n8n-nodes-base.noOp",
        "position": [
          1860,
          440
        ],
        "typeVersion": 1,
        "id": "6ccc99e4-852a-438b-a3d1-b5c3a3eb38dd"
      },
      {
        "parameters": {},
        "name": "different",
        "type": "n8n-nodes-base.noOp",
        "position": [
          1860,
          600
        ],
        "typeVersion": 1,
        "id": "e14cc5af-7402-47d1-a502-b237c3bf4bea"
      },
      {
        "parameters": {},
        "name": "new",
        "type": "n8n-nodes-base.noOp",
        "position": [
          1860,
          770
        ],
        "typeVersion": 1,
        "id": "ff40e2f4-775f-4c2c-85ad-d3baeaee800d"
      },
      {
        "parameters": {
          "resource": "file",
          "operation": "edit",
          "owner": {
            "__rl": true,
            "value": "={{$node[\"Globals\"].json[\"repo\"][\"owner\"]}}",
            "mode": "name"
          },
          "repository": {
            "__rl": true,
            "value": "=[ERROR: no data, execute \"Globals\" node first]",
            "mode": "name"
          },
          "filePath": "={{$node[\"Globals\"].json[\"repo\"][\"path\"]}}{{ $('n8n').item.json.name }}.json",
          "fileContent": "={{$node[\"isDiffOrNew\"].json[\"n8n_data_stringy\"]}}",
          "commitMessage": "=[N8N Backup] {{$node[\"N8N Workflow Detail\"].json[\"data\"][\"name\"]}}.json ({{$json[\"github_status\"]}})"
        },
        "name": "GitHub Edit",
        "type": "n8n-nodes-base.github",
        "position": [
          2060,
          320
        ],
        "typeVersion": 1,
        "id": "528d8903-9e19-4541-8128-9e34c454165e",
        "credentials": {
          "githubApi": {
            "id": "enJuvcF6JzQBryLg",
            "name": "GitHub account [viviane]"
          }
        }
      },
      {
        "parameters": {
          "resource": "file",
          "owner": {
            "__rl": true,
            "value": "={{$node[\"Globals\"].json[\"repo\"][\"owner\"]}}",
            "mode": "name"
          },
          "repository": {
            "__rl": true,
            "value": "={{$node[\"Globals\"].json[\"repo\"][\"name\"]}}",
            "mode": "name"
          },
          "filePath": "={{$node[\"Globals\"].json[\"repo\"][\"path\"]}}{{ $('dataArray').item.json[\"json\"][\"file_name\"] }}.json",
          "fileContent": "={{$node[\"isDiffOrNew\"].json[\"n8n_data_stringy\"]}}",
          "commitMessage": "=[N8N Backup] .json ({{$json[\"github_status\"]}}) {{ $('n8n').item.json.name }}"
        },
        "name": "GitHub Create",
        "type": "n8n-nodes-base.github",
        "position": [
          1920,
          1080
        ],
        "typeVersion": 1,
        "id": "688c2c30-0e94-4469-89ea-2f48b3b75e5d",
        "credentials": {
          "githubApi": {
            "id": "enJuvcF6JzQBryLg",
            "name": "GitHub account [viviane]"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "// File Returned with Content\nif (Object.keys(items[0].json).includes(\"content\")) {\n  // Get JSON Objects\n  var origWorkflow = eval(\"(\"+Buffer.from(items[0].json.content, 'base64').toString()+\")\");\n  var n8nWorkflow = (items[1].json.data);\n  \n  // Order JSON Objects\n  var orderedOriginal = items[0].json.content\n  var orderedActual = Buffer.from(JSON.stringify(orderedActual, null, 2)).toString('base64');\n  \n  /*Object.keys(origWorkflow).sort().forEach(function(key) {\n    orderedOriginal[key] = origWorkflow[key];\n  });\n  \n  Object.keys(n8nWorkflow).sort().forEach(function(key) {\n    orderedActual[key] = n8nWorkflow[key];\n  });*/\n  \n  // Determine Difference\n  if ( orderedOriginal === orderedActual ) {\n    items[0].json.github_status = \"same\";\n    items[0].json.content_decoded = orderedOriginal;\n  } else {\n    items[0].json.github_status = \"different\";\n    items[0].json.content_decoded = orderedOriginal;\n    items[0].json.n8n_data_stringy = Buffer.from(JSON.stringify(orderedActual, null, 2)).toString('base64');\n  }\n// No File Returned / New Workflow\n} else {\n \n  // Order JSON Object\n  var n8nWorkflow = (items[1].json.data);\n  var orderedActual = {}\n  Object.keys(n8nWorkflow).sort().forEach(function(key) {\n    orderedActual[key] = n8nWorkflow[key];\n  });\n  \n  // Proper Formatting\n  items[0].json.github_status = \"new\";\n  items[0].json.n8n_data_stringy = Buffer.from(JSON.stringify(orderedActual, null, 2)).toString('base64');\n}\n\n// Return Items\nreturn items;"
        },
        "name": "isDiffOrNew",
        "type": "n8n-nodes-base.function",
        "position": [
          1510,
          610
        ],
        "typeVersion": 1,
        "id": "ff021ac3-9ee9-4bdd-9f8d-04c605cc9ef8"
      },
      {
        "parameters": {
          "triggerTimes": {
            "item": [
              {
                "hour": 11,
                "minute": 13
              }
            ]
          }
        },
        "name": "Daily @ 20:00",
        "type": "n8n-nodes-base.cron",
        "position": [
          360,
          760
        ],
        "typeVersion": 1,
        "id": "be95095b-8489-4b37-81fa-f0eae1c2416a"
      },
      {
        "parameters": {
          "batchSize": 1,
          "options": {}
        },
        "name": "OneAtATime",
        "type": "n8n-nodes-base.splitInBatches",
        "position": [
          980,
          560
        ],
        "typeVersion": 1,
        "id": "efc3c6ba-ad7b-41f8-956d-0840cf85c292"
      },
      {
        "parameters": {
          "values": {
            "string": [
              {
                "name": "repo.owner",
                "value": "mapadoacolhimento"
              },
              {
                "name": "repo.name",
                "value": "n8n-workflows"
              },
              {
                "name": "repo.path",
                "value": "https://api.github.com/repos/mapadoacolhimento/n8n-workflows/contents/"
              }
            ]
          },
          "options": {}
        },
        "name": "Globals",
        "type": "n8n-nodes-base.set",
        "position": [
          510,
          610
        ],
        "typeVersion": 1,
        "id": "1d42d9fd-1dc5-4bce-9252-6be21c81cd8e"
      },
      {
        "parameters": {
          "filters": {}
        },
        "id": "5b47fab2-4a08-48dd-a2db-dc3a31acd07e",
        "name": "n8n",
        "type": "n8n-nodes-base.n8n",
        "typeVersion": 1,
        "position": [
          660,
          620
        ],
        "credentials": {
          "n8nApi": {
            "id": "7BqUjv3Vc4V09x0u",
            "name": "n8n account"
          }
        }
      },
      {
        "parameters": {
          "operation": "get",
          "workflowId": {
            "__rl": true,
            "value": "={{$json[\"id\"]}}",
            "mode": "id"
          }
        },
        "id": "042469cc-73a8-47ba-8578-f69be561462d",
        "name": "n8n1",
        "type": "n8n-nodes-base.n8n",
        "typeVersion": 1,
        "position": [
          1180,
          700
        ],
        "credentials": {
          "n8nApi": {
            "id": "7BqUjv3Vc4V09x0u",
            "name": "n8n account"
          }
        }
      },
      {
        "parameters": {
          "method": "PUT",
          "url": "={{ $('Globals').item.json[\"repo\"][\"path\"] }}{{ $('dataArray').item.json[\"json\"][\"file_name\"] }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "githubApi",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Accept",
                "value": "application/vnd.github+json"
              },
              {
                "name": "X-GitHub-Api-Version",
                "value": "2022-11-28"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n    \"path\": \"{{ $('dataArray').item.json[\"json\"][\"file_name\"] }}.json\",\n    \"message\": \"[N8N Backup] .json ({{$json[\"github_status\"]}}) {{ $('n8n').item.json.name }}\",\n    \"committer\": {\n        \"name\": \"Adriele Alvarenga Secundino\",\n        \"email\": \"dri.leela@gmail.com\"\n    },\n    \"content\": \"{{ $('new').item.json[\"n8n_data_stringy\"] }}\",\n    \"branch\": \"main\"\n}",
          "options": {}
        },
        "id": "6aafeb1d-c3ae-4fd3-9692-a8c8fa9b359a",
        "name": "HTTP Request",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          2080,
          760
        ],
        "credentials": {
          "githubApi": {
            "id": "enJuvcF6JzQBryLg",
            "name": "GitHub account [viviane]"
          }
        }
      },
      {
        "parameters": {
          "method": "PUT",
          "url": "={{ $('Globals').item.json[\"repo\"][\"path\"] }}{{ $('dataArray').item.json[\"json\"][\"file_name\"] }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "githubApi",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Accept",
                "value": "application/vnd.github+json"
              },
              {
                "name": "X-GitHub-Api-Version",
                "value": "2022-11-28"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={\n    \"path\": \"{{ $('dataArray').item.json[\"json\"][\"file_name\"] }}.json\",\n    \"message\": \"[N8N Backup] .json ({{$json[\"github_status\"]}}) {{ $('n8n').item.json.name }}\",\n    \"committer\": {\n        \"name\": \"Adriele Alvarenga Secundino\",\n        \"email\": \"dri.leela@gmail.com\"\n    },\n    \"content\": \"{{ $('different').item.json[\"n8n_data_stringy\"] }}\",\n    \"branch\": \"main\",\n    \"sha\": \"{{ $('Buscar o arquivo do fluxo no repositorio').item.json[\"sha\"] }}\"\n}",
          "options": {}
        },
        "id": "9ad44108-a9d3-4ffb-805c-843d7a56f45a",
        "name": "HTTP Request1",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          2080,
          580
        ],
        "credentials": {
          "githubApi": {
            "id": "enJuvcF6JzQBryLg",
            "name": "GitHub account [viviane]"
          }
        }
      },
      {
        "parameters": {
          "url": "={{ $('Globals').item.json[\"repo\"][\"path\"] }}{{ $('dataArray').item.json[\"json\"][\"file_name\"] }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "githubApi",
          "sendHeaders": true,
          "headerParameters": {
            "parameters": [
              {
                "name": "Accept",
                "value": "application/vnd.github+json"
              },
              {
                "name": "X-GitHub-Api-Version",
                "value": "2022-11-28"
              }
            ]
          },
          "options": {}
        },
        "id": "42398509-0244-4df7-8051-d7596bc305c9",
        "name": "Buscar o arquivo do fluxo no repositorio",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          1140,
          380
        ],
        "credentials": {
          "githubApi": {
            "id": "enJuvcF6JzQBryLg",
            "name": "GitHub account [viviane]"
          }
        }
      }
    ],
    "connections": {
      "same": {
        "main": [
          [
            {
              "node": "OneAtATime",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "isDiffOrNew",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Globals": {
        "main": [
          [
            {
              "node": "n8n",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "dataArray": {
        "main": [
          [
            {
              "node": "OneAtATime",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "different": {
        "main": [
          [
            {
              "node": "HTTP Request1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OneAtATime": {
        "main": [
          [
            {
              "node": "n8n1",
              "type": "main",
              "index": 0
            },
            {
              "node": "Buscar o arquivo do fluxo no repositorio",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "isDiffOrNew": {
        "main": [
          [
            {
              "node": "github_status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Daily @ 20:00": {
        "main": [
          [
            {
              "node": "Globals",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "github_status": {
        "main": [
          [
            {
              "node": "same",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "different",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "new",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Globals",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "n8n": {
        "main": [
          [
            {
              "node": "dataArray",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "n8n1": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "new": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request": {
        "main": [
          [
            {
              "node": "OneAtATime",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request1": {
        "main": [
          [
            {
              "node": "OneAtATime",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Buscar o arquivo do fluxo no repositorio": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "d09c224c-d31f-46e0-b1d2-f03478bdbd60",
    "triggerCount": 1,
    "tags": []
  },
  {
    "createdAt": "2024-01-16T21:29:48.795Z",
    "updatedAt": "2024-01-16T21:30:02.000Z",
    "id": "XaP7yL9AnLHKqNSw",
    "name": "[Database pipeline] support_request_status_history STG",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "6741f03e-f767-4468-96e1-dc87c0364bf4",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   support_request_id,\n   status,\n   NOW() AS created_at\nFROM match.support_requests",
          "additionalFields": {}
        },
        "id": "aeeb4500-703c-43cd-a55b-aaa2f2d64d67",
        "name": "Fetch support_requests status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          720,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "schema": "match",
          "table": "support_request_status_history",
          "columns": "support_request_id, status, created_at",
          "additionalFields": {}
        },
        "id": "d2092f4e-70bd-4934-831e-71364b376bd3",
        "name": "Insert into support_request_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          940,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch support_requests status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch support_requests status": {
        "main": [
          [
            {
              "node": "Insert into support_request_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "af1c8822-c4e9-4c80-b61e-f1ff6978199d",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:25:06.956Z",
    "updatedAt": "2024-01-16T21:43:34.000Z",
    "id": "XoDsEHpy2ykTu2lJ",
    "name": "[Database Pipeline] - support_requests STG",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "35f4af2b-4b22-44b1-be48-bfd978ce91ca",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -1020,
          1480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT city_value, state\nFROM public.cities",
          "additionalFields": {}
        },
        "id": "5c9b2225-9cf1-4620-9bd4-88f1da8b2054",
        "name": "Fetch cities",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -300,
          1160
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "city",
                "field2": "city_value"
              },
              {
                "field1": "state",
                "field2": "state"
              }
            ]
          },
          "options": {}
        },
        "id": "9b7177a1-e7d6-4814-ac55-496b0a89ab92",
        "name": "MSRs with valid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          460,
          780
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "city",
                "field2": "city_value"
              },
              {
                "field1": "state",
                "field2": "state"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "d66639cc-24e8-4985-9157-a4726b82fda4",
        "name": "MSRs with invalid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          460,
          1120
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    item.json.zipcode = \"not_found\";\n  }\n  \n}\n\nreturn $input.all();"
        },
        "id": "9d05ec65-887a-488c-a2c4-3b1861a937fd",
        "name": "Normalize city and zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          840,
          780
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    output.push(\n      {\n        msr_id: item.json.msr_id,\n        zipcode: \"not_found\",\n        city: \"not_found\",\n        state: \"not_found\"\n      }\n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "dac45a9e-7e6a-474a-a6a8-9847f50c2c78",
        "name": "MSRs with invalid zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          860,
          1120
        ]
      },
      {
        "parameters": {},
        "id": "3caa79ac-7930-4d2b-8af6-10757616aa0b",
        "name": "MSRs with correct city + MSRs with invalid zipcode",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1600,
          760
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNotNull = item.json.zipcode;\n  const zipcodeHasCorrectLength = item.json.zipcode ? item.json.zipcode.length === 8 : false;\n  const zipcodeIsANumber = !isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNotNull && zipcodeHasCorrectLength && zipcodeIsANumber){\n    output.push(\n      {\n        msr_id: item.json.msr_id,\n        zipcode: item.json.zipcode\n      }\n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "e1a10ba9-7341-47a2-9303-c5a5c2083d85",
        "name": "MSRs with valid zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          860,
          1400
        ]
      },
      {
        "parameters": {
          "jsCode": "const output = [];\n\nfor (const item of $input.all()) {\n\n  if(item.json.city){\n    \n    const normalizedName = item.json.city\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \") \n    .replace(/ *\\([^)]*\\) */g, \"\")\n    .toUpperCase();\n  \n    output.push(\n      {\n        zipcode: item.json.cep,\n        city: normalizedName,\n        state: item.json.state\n      } \n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "b175292b-2c84-4326-8cdc-3d9ebbdbee04",
        "name": "Standardize found cities",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1540,
          1700
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  if(item.json.city === \"IPIABAS\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"SAO JOSE DO TURVO\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"CAETE-ACU\" && item.json.state === \"BA\"){\n    item.json.city = \"PALMEIRAS\";\n  }\n  if(item.json.city === \"MORAES ALMEIDA\" && item.json.state === \"PA\"){\n    item.json.city = \"ITAITUBA\";\n  }\n  \n}\n\n\nreturn $input.all();"
        },
        "id": "284a61a8-9f2a-4c6c-9cce-9c906c333298",
        "name": "Handle corner cases",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1740,
          1700
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const newItem = {\n    zipcode: item.json.zipcode\n  }\n  \n  if(!output.includes(newItem)){\n    output.push(newItem)   \n  }\n}\n\nreturn output;"
        },
        "id": "e4501c17-d65c-4427-abb1-0fa0b4e927f5",
        "name": "Select distinct zipcodes",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1120,
          1700
        ]
      },
      {
        "parameters": {
          "url": "=https://brasilapi.com.br/api/cep/v1/{{$json[\"zipcode\"]}}",
          "options": {
            "batching": {
              "batch": {
                "batchSize": 20
              }
            },
            "response": {
              "response": {
                "neverError": true
              }
            }
          }
        },
        "id": "cc5c4447-290d-42b5-9ea8-c089faf07253",
        "name": "Fetch city from zipcode",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1340,
          1700
        ],
        "executeOnce": false
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.city = \"not_found\";\n  item.json.state = \"not_found\";\n}\n\nreturn $input.all();"
        },
        "id": "da8e1c16-d70d-4322-8461-74f52555a803",
        "name": "Add NOT_FOUND city and state",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          2380,
          1680
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zipcode",
                "field2": "zipcode"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "13f3493b-0309-44f8-a5df-9592e96acd71",
        "name": "MSRs with new cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2160,
          1420
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zipcode",
                "field2": "zipcode"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "da941a9f-1781-44e5-a850-9e03d7caa77d",
        "name": "MSRs with not found cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2140,
          1680
        ]
      },
      {
        "parameters": {},
        "id": "4d9c2dd5-a55a-4965-9120-feb80e021bf5",
        "name": "MSRs after Brasil API",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2640,
          1440
        ]
      },
      {
        "parameters": {},
        "id": "5f7c56d6-e861-42f1-89f7-f685cde59d99",
        "name": "All MSRs with correct cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3200,
          1040
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    user_id AS msr_id,\n    latitude AS lat,\n    longitude AS lng \nFROM public.solidarity_users \nWHERE \n    organization_id = 360273031591\n",
          "additionalFields": {}
        },
        "id": "9dd6f070-ef64-4434-88bf-569dbbaae85a",
        "name": "Fetches lat long",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -280,
          2500
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde postgres"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  \n  if(!item.json.lat || !item.json.lng)\n  {\n    item.json.lat = null;\n    item.json.lng = null;\n  }\n  else {\n    \n    const isLatitudeNotANumber = isNaN(item.json.lat);\n    const isLongitudeNotANumber = isNaN(item.json.lng);\n\n    if(isLatitudeNotANumber || isLongitudeNotANumber)\n    {\n      item.json.lat = null;\n      item.json.lng = null;\n    }\n    else {\n      \n      const isLatitudeNotInRange = item.json.lat < -90 \n      || item.json.lat > 90;\n    const isLongitudeNotInRange = item.json.lng < -180 \n      || item.json.lng > 180;\n\n      if(isLatitudeNotInRange || isLongitudeNotInRange)\n      {\n        item.json.lat = null;\n        item.json.lng = null;\n      }\n      else {\n        \n        item.json.lat = parseFloat(item.json.lat);\n        item.json.lng = parseFloat(item.json.lng);\n      }\n      \n    }\n  }\n}\n\nreturn $input.all();"
        },
        "id": "ddf49fd9-3dd8-4f2e-a67f-1d1134f5547c",
        "name": "Handle invalid lat long",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -40,
          2500
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_id",
                "field2": "msr_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "3fb56060-1405-4119-984e-36b116acdcd1",
        "name": "MSRs with lat long",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3680,
          2480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   user_id AS msr_id,\n   REGEXP_REPLACE(cep, '-', '', 'g') AS zipcode,\n   BTRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(city), 'À|Á|Â|Ã|Ä|Å', 'A', 'g'), 'È|É|Ê|Ë', 'E', 'g'), 'Í|Ì|Î|Ĩ|Ï ', 'I', 'g'), 'Ò|Ó|Ô|Õ|Ö', 'O', 'g'),'Ù|Ú|Û|Ü', 'U', 'g'), 'Ç', 'C', 'g')) AS city,\n   BTRIM(UPPER(state)) AS state\nFROM public.solidarity_users\nWHERE organization_id = 360273031591\n\n\n",
          "additionalFields": {}
        },
        "id": "89418dea-b25f-4c43-9660-33504b42cdd3",
        "name": "Fetch MSRs with zipcode, city and state",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -300,
          740
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde postgres"
          }
        }
      },
      {
        "parameters": {
          "schema": "match",
          "table": "support_requests",
          "columns": "msr_id, zendesk_ticket_id, support_type, support_expertise, priority, has_disability, requires_libras, accepts_online_support, status, city, state, lat, lng, created_at, updated_at",
          "additionalFields": {}
        },
        "id": "355919e3-dec4-45fd-bd55-c5273d6d62de",
        "name": "Insert into support_requests",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          4740,
          3080
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "WITH msr_tickets AS (\n    SELECT \n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        requester_id AS msr_id,\n        CASE \n            WHEN SUBSTRING(raw_subject, '\\[(.+)\\]') = 'Psicológico' THEN 'psychological'\n            ELSE 'legal'\n        END AS support_type,\n        'not_found' AS support_expertise,\n        null AS priority,\n        null AS has_disability,\n        null AS requires_libras,\n        TRUE AS accepts_online_support,\n        COALESCE(updated_at, NOW()) AS updated_at,\n        COALESCE(created_at, NOW()) AS created_at\n    FROM public.solidarity_tickets\n    WHERE \n        organization_id = 360273031591 \n        AND SUBSTRING(raw_subject, '\\[(.+)\\]') IN ('Psicológico', 'Jurídico') \n        AND raw_subject NOT LIKE '%Re:%'\n        AND tags::text NOT LIKE '%msr-fora-do-perfil%'\n),\nvolunteer_tickets AS (\n    SELECT \n        requester_id AS volunteer_zendesk_user_id,\n        ticket_id::TEXT AS volunteer_zendesk_ticket_id,\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS msr_zendesk_ticket_id\n    FROM public.solidarity_tickets\n    WHERE organization_id IN (360269610652, 360282119532)\n),\ntickets_solicitacao_repetida AS (\n    SELECT \n        'duplicated' AS status_support_request,\n        *\n    FROM msr_tickets\n    WHERE \n        status_acolhimento = 'solicitação_repetida'\n        OR tags::text LIKE '%closed_by_merge%'\n),\nrn_duplicated_tickets AS (\n    SELECT\n        a.*,\n        ROW_NUMBER() OVER(PARTITION BY a.requester_id, SUBSTRING(a.raw_subject, '\\[(.+)\\]') ORDER BY a.updated_at DESC) AS rn\n    FROM msr_tickets a\n    LEFT JOIN tickets_solicitacao_repetida USING (id) \n    WHERE status_support_request IS NULL\n),\nduplicated_tickets AS (\n    SELECT\n        'duplicated' AS status_support_request,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM rn_duplicated_tickets\n    WHERE \n        rn > 1\n),\nall_duplicated_tickets AS (\n    SELECT * FROM tickets_solicitacao_repetida\n    UNION\n    SELECT * FROM duplicated_tickets\n),\nnon_duplicated_tickets AS (\n    SELECT a.* \n    FROM msr_tickets a\n    LEFT JOIN all_duplicated_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\npublic_service_tickets AS (\n    SELECT \n        'public_service' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'encaminhamento__realizado_para_serviço_público'\n),\nsolicitacao_recebida_tickets AS (\n    SELECT \n        CASE \n            WHEN status = 'closed' THEN 'closed'\n            WHEN status != 'closed' AND tags::TEXT LIKE '%nova-voluntaria-com-prioridade%' THEN 'special_case'\n            ELSE 'open'\n        END AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'solicitação_recebida'\n),\ninvalid_status_tickets AS (\n    SELECT \n        'closed' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento IS NULL OR status_acolhimento IN ('', 'encaminhamento__antigo', 'encaminhamento__confirmou_disponibilidade', 'encaminhamento__negado')\n),\nnon_match_tickets AS (\n    SELECT * FROM all_duplicated_tickets\n    UNION\n    SELECT * FROM public_service_tickets\n    UNION \n    SELECT * FROM solicitacao_recebida_tickets\n    UNION \n    SELECT * FROM invalid_status_tickets\n),\nshould_have_match_tickets AS (\n    SELECT a.*\n    FROM non_duplicated_tickets a\n    LEFT JOIN non_match_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\nshould_have_match_with_id_from_link_match AS (\n    SELECT\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS volunteer_zendesk_ticket_id,\n        *\n    FROM should_have_match_tickets\n),\nmatched_through_msr_link_match AS (\n    SELECT \n        a.volunteer_zendesk_ticket_id::bigint AS volunteer_zendesk_ticket_id,\n        b.volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM should_have_match_with_id_from_link_match a\n    INNER JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n),\ndidnt_match_through_msr_link_match AS (\n    SELECT \n        a.*,\n        b.volunteer_zendesk_user_id\n    FROM should_have_match_with_id_from_link_match a\n    LEFT JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n    WHERE b.volunteer_zendesk_user_id IS NULL\n),\nrn_solidarity_matches AS (\n    SELECT \n        ROW_NUMBER() OVER (PARTITION BY individuals_ticket_id ORDER BY created_at DESC) AS rn,\n        individuals_ticket_id,\n        volunteers_user_id,\n        volunteers_ticket_id\n    FROM public.solidarity_matches\n),\ndedup_solidarity_matches AS (\n    SELECT *\n    FROM rn_solidarity_matches \n    WHERE rn = 1\n),\nmatched_through_solidarity_matches AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    INNER JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n),\nall_matched AS (\n    SELECT * FROM matched_through_msr_link_match\n    UNION\n    SELECT * FROM matched_through_solidarity_matches\n),\nall_not_matched AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    LEFT JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n    WHERE b.individuals_ticket_id IS NULL\n),\nall_should_have_been_matched AS (\n    SELECT * FROM all_matched\n    UNION\n    SELECT * FROM all_not_matched\n),\nall_matched_with_real_status_acolhimento AS (\n    SELECT \n        a.*,\n        CASE\n            WHEN \n                a.status_acolhimento = 'encaminhamento__realizado' \n                AND a.status_acolhimento != b.status_acolhimento \n                AND b.status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento_interrompido')\n            THEN b.status_acolhimento\n            ELSE a.status_acolhimento\n       END AS real_status_acolhimento\n    FROM all_should_have_been_matched a\n    INNER JOIN public.solidarity_tickets b ON a.volunteer_zendesk_ticket_id::bigint = b.ticket_id\n),\nall_matched_with_status AS (\n    SELECT \n        CASE \n            WHEN real_status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento__aguardando_confirmação', 'encaminhamento__realizado', 'encaminhamento_interrompido') THEN 'matched'\n            ELSE null\n        END AS status_support_request,\n        CASE \n            WHEN real_status_acolhimento = 'atendimento__concluído' THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status = 'closed' THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status IN ('open', 'pending') THEN 'in_contact'\n            WHEN real_status_acolhimento = 'atendimento__interrompido' THEN 'interrupted_after_support'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status = 'closed' THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status != 'closed' THEN 'waiting_contact'\n            WHEN real_status_acolhimento = 'encaminhamento_interrompido' THEN 'interrupted_before_support'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status = 'closed' THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) < (CURRENT_DATE - 30)  THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) >= (CURRENT_DATE - 30) THEN 'waiting_contact'\n            ELSE null\n        END AS status_match,\n        *\n    FROM all_matched_with_real_status_acolhimento\n),\nall_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM all_matched_with_status\n),\nall_non_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM non_match_tickets\n),\nsupport_requests AS (\n    SELECT * FROM all_matched_support_request\n    UNION\n    SELECT * FROM all_non_matched_support_request\n),\nmatches AS (\n    SELECT \n    msr_id,\n    ticket_id AS msr_zendesk_ticket_id,\n    volunteer_zendesk_user_id,\n    volunteer_zendesk_ticket_id,\n    support_type,\n    'old' AS match_type,\n    'old' AS match_stage,\n    status_match AS status,\n    updated_at,\n    COALESCE(TO_TIMESTAMP(data_encaminhamento, 'YYYY-MM-DD'), created_at) AS created_at\n    FROM all_matched_with_status\n\n),\nvolunteer_match_tickets AS (\n    SELECT \n        volunteer_zendesk_ticket_id, \n        msr_zendesk_ticket_id\n    FROM matches\n    WHERE volunteer_zendesk_ticket_id IS NOT NULL\n),\nvolunteer_match_tickets_with_status AS (\n    SELECT \n        msr_zendesk_ticket_id,\n        SPLIT_PART(status_acolhimento, 'atendimento_', 2) AS survey_type,\n        updated_at,\n        updated_at AS created_at\n    FROM volunteer_match_tickets\n    INNER JOIN public.solidarity_tickets ON volunteer_zendesk_ticket_id::bigint = ticket_id\n    WHERE \n        organization_id IN (360269610652, 360282119532)\n        AND status_acolhimento IN ('atendimento_triagem_1', 'atendimento_triagem_2', 'atendimento_acompanhamento_1', 'atendimento_acompanhamento_2')\n\n)\nSELECT *\nFROM support_requests",
          "additionalFields": {}
        },
        "id": "1ba82353-a32d-4bd4-9586-321f80bb3fa4",
        "name": "Fetch support_requests",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -300,
          3020
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde postgres"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_id",
                "field2": "msr_id"
              }
            ]
          },
          "options": {}
        },
        "id": "d55f9bb2-6f34-45ce-af45-a6a129f7ba0a",
        "name": "Support_request with MSR info",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4020,
          3060
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"state\"]}}",
                "value2": "INT"
              },
              {
                "value1": "={{$json[\"city\"]}}",
                "value2": "INTERNACIONAL"
              }
            ]
          }
        },
        "id": "3ff6dffa-8784-43db-a02a-0d90ca01266d",
        "name": "Is international?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          20,
          740
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.zipcode = \"not_found\";\n  \n}\n\nreturn $input.all();"
        },
        "id": "459d2046-304f-4a0f-a2cc-aac081871450",
        "name": "Adds zipcode not_found",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {},
        "id": "00944394-a5d1-45ed-848b-f03778f6c4b9",
        "name": "Volunteers with international city + volunteers with valid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1240,
          500
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    zendesk_user_id AS msr_id,\n    latitude AS lat,\n    longitude AS lng,\n    city,\n    state\nFROM public.volunteers\n",
          "additionalFields": {}
        },
        "id": "b66f7401-8ab0-46f7-b30f-a56857ff8073",
        "name": "Fetches volunteers with lat long",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -300,
          3320
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_id",
                "field2": "msr_id"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "a67cf085-021b-4b67-80ad-6e29409f1cf0",
        "name": "Support_request with no MSR info",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4020,
          3300
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_id",
                "field2": "msr_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "feac619d-6d09-40f8-9da6-4529cd94e6fb",
        "name": "Support_requests from volunteers",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4240,
          3500
        ]
      },
      {
        "parameters": {},
        "id": "3c4e5133-d4ef-47e7-a1c0-0c83d1756184",
        "name": "All support_requests",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4480,
          3080
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch support_requests",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch cities",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch MSRs with zipcode, city and state",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetches lat long",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetches volunteers with lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch cities": {
        "main": [
          [
            {
              "node": "MSRs with valid city",
              "type": "main",
              "index": 1
            },
            {
              "node": "MSRs with invalid city",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Normalize city and zipcode": {
        "main": [
          [
            {
              "node": "Volunteers with international city + volunteers with valid city",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "MSRs with valid city": {
        "main": [
          [
            {
              "node": "Normalize city and zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with invalid city": {
        "main": [
          [
            {
              "node": "MSRs with invalid zipcode",
              "type": "main",
              "index": 0
            },
            {
              "node": "MSRs with valid zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with invalid zipcode": {
        "main": [
          [
            {
              "node": "MSRs with correct city + MSRs with invalid zipcode",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Standardize found cities": {
        "main": [
          [
            {
              "node": "Handle corner cases",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle corner cases": {
        "main": [
          [
            {
              "node": "MSRs with new cities",
              "type": "main",
              "index": 1
            },
            {
              "node": "MSRs with not found cities",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Select distinct zipcodes": {
        "main": [
          [
            {
              "node": "Fetch city from zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch city from zipcode": {
        "main": [
          [
            {
              "node": "Standardize found cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add NOT_FOUND city and state": {
        "main": [
          [
            {
              "node": "MSRs after Brasil API",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "MSRs with valid zipcode": {
        "main": [
          [
            {
              "node": "Select distinct zipcodes",
              "type": "main",
              "index": 0
            },
            {
              "node": "MSRs with new cities",
              "type": "main",
              "index": 0
            },
            {
              "node": "MSRs with not found cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with new cities": {
        "main": [
          [
            {
              "node": "MSRs after Brasil API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with not found cities": {
        "main": [
          [
            {
              "node": "Add NOT_FOUND city and state",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs with correct city + MSRs with invalid zipcode": {
        "main": [
          [
            {
              "node": "All MSRs with correct cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MSRs after Brasil API": {
        "main": [
          [
            {
              "node": "All MSRs with correct cities",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Fetches lat long": {
        "main": [
          [
            {
              "node": "Handle invalid lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "All MSRs with correct cities": {
        "main": [
          [
            {
              "node": "MSRs with lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle invalid lat long": {
        "main": [
          [
            {
              "node": "MSRs with lat long",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "MSRs with lat long": {
        "main": [
          [
            {
              "node": "Support_request with MSR info",
              "type": "main",
              "index": 1
            },
            {
              "node": "Support_request with no MSR info",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Fetch MSRs with zipcode, city and state": {
        "main": [
          [
            {
              "node": "Is international?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch support_requests": {
        "main": [
          [
            {
              "node": "Support_request with MSR info",
              "type": "main",
              "index": 0
            },
            {
              "node": "Support_request with no MSR info",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is international?": {
        "main": [
          [
            {
              "node": "Adds zipcode not_found",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "MSRs with valid city",
              "type": "main",
              "index": 0
            },
            {
              "node": "MSRs with invalid city",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adds zipcode not_found": {
        "main": [
          [
            {
              "node": "Volunteers with international city + volunteers with valid city",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with international city + volunteers with valid city": {
        "main": [
          [
            {
              "node": "MSRs with correct city + MSRs with invalid zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Support_request with no MSR info": {
        "main": [
          [
            {
              "node": "Support_requests from volunteers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetches volunteers with lat long": {
        "main": [
          [
            {
              "node": "Support_requests from volunteers",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Support_request with MSR info": {
        "main": [
          [
            {
              "node": "All support_requests",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Support_requests from volunteers": {
        "main": [
          [
            {
              "node": "All support_requests",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "All support_requests": {
        "main": [
          [
            {
              "node": "Insert into support_requests",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "7d735c8f-aaad-4e08-a08c-739d9b6a2dca",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:36:52.484Z",
    "updatedAt": "2024-01-28T18:20:05.000Z",
    "id": "e1TTiOqlBA1tQszS",
    "name": "[Database Pipeline] - volunteer_availability STG",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "185f1df9-417c-47f7-bb45-87253eafdfe1",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          140,
          680
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n\tid AS volunteer_id,\n        zendesk_user_id,\n\tavailability AS max_matches,\n\tCASE\n\t\tWHEN occupation = 'lawyer' THEN 'legal'\n\t\tELSE 'psychological'\n\tEND AS support_type,\n\t'not_found' AS support_expertise,\n\tCASE\n\t\tWHEN modality = 'online' OR modality = 'both' THEN TRUE\n\t\tELSE FALSE\n\tEND AS offers_online_support,\n\toffers_libras_support,\n\tlatitude AS lat,\n\tlongitude AS lng,\n\tcity,\n\tstate,\n\tcreated_at,\n\tupdated_at,\n        CASE\n\t\tWHEN \n\t\t\tcondition = 'disponivel'\n\t\t\tAND first_name IS NOT NULL\n\t\t\tAND first_name != 'not_found'\n\t\t\tAND register_number != 'not_found'\n\t\t\tAND phone != 'not_found'\t\t\n\t\tTHEN TRUE\n\t\tELSE FALSE\n\tEND AS previous_is_available,\n  condition\nFROM public.volunteers",
          "additionalFields": {}
        },
        "id": "54763088-3f3b-4ebe-aa6d-a85b839bca73",
        "name": "Fetch volunteers",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   volunteer_id,\n   COUNT(*) AS current_matches\nFROM match.matches\nWHERE status IN ('waiting_contact', 'in_contact')\nAND volunteer_id IS NOT NULL\nGROUP BY volunteer_id",
          "additionalFields": {}
        },
        "id": "4682c918-7c80-479b-bf35-f7a93641b48d",
        "name": "Fetch current_matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          480,
          860
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Mapa"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "volunteer_id",
                "field2": "volunteer_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "e8b78ce4-77e0-4ca3-bbe0-a73d124dee94",
        "name": "Volunteers with current_matches",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          900,
          480
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "volunteer_id",
                "field2": "volunteer_id"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "d7445416-f3ae-410b-9b4d-216910cf1302",
        "name": "Volunteers without current_matches",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          900,
          840
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.current_matches = 0;\n}\n\nreturn $input.all();"
        },
        "id": "3c607fe0-919f-468d-8482-ffcef496b2bf",
        "name": "Adds 0 current_matches",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1120,
          840
        ]
      },
      {
        "parameters": {},
        "id": "349f10ba-0b23-494e-937d-17229d2e2000",
        "name": "All volunteers with current_matches",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1400,
          500
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  if(item.json.previous_is_available = true && item.json.current_matches < item.json.max_matches){\n    item.json.is_available = true;\n  }\n  else {\n    item.json.is_available = false;\n  }\n}\n\nreturn $input.all();"
        },
        "id": "8a15fc91-c8ea-404a-80a4-70d73411c6ab",
        "name": "Add is_available",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1660,
          500
        ]
      },
      {
        "parameters": {
          "table": "volunteer_availability",
          "columns": "volunteer_id, max_matches, support_type, support_expertise, offers_online_support, offers_libras_support, lat, lng, city, state, created_at, updated_at, current_matches, is_available",
          "additionalFields": {}
        },
        "id": "50dc4cbd-fae7-4724-b588-11ccf1bc1cd2",
        "name": "Insert into volunteer_availability",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1840,
          500
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "id": "6e3ce289-3e94-42db-8981-722b66230547",
                "leftValue": "={{ $json.condition }}",
                "rightValue": "disponivel",
                "operator": {
                  "type": "string",
                  "operation": "notEquals"
                }
              },
              {
                "id": "3b8b8f36-6736-4483-be40-538d211ae71f",
                "leftValue": "={{ $json.is_available }}",
                "rightValue": "",
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "e09a0cf6-c78b-45b7-9b0f-60fd50f91e5c",
        "name": "If",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          1840,
          320
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch volunteers",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch volunteers": {
        "main": [
          [
            {
              "node": "Volunteers with current_matches",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers without current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch current_matches": {
        "main": [
          [
            {
              "node": "Volunteers with current_matches",
              "type": "main",
              "index": 1
            },
            {
              "node": "Volunteers without current_matches",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers without current_matches": {
        "main": [
          [
            {
              "node": "Adds 0 current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adds 0 current_matches": {
        "main": [
          [
            {
              "node": "All volunteers with current_matches",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers with current_matches": {
        "main": [
          [
            {
              "node": "All volunteers with current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "All volunteers with current_matches": {
        "main": [
          [
            {
              "node": "Add is_available",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add is_available": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "9263552f-f15c-489b-81a8-6ccfe0e3c8c9",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:01:58.066Z",
    "updatedAt": "2024-01-16T21:02:51.000Z",
    "id": "excpTXaNJNJoF4or",
    "name": "[Zendesk Integration] Expira matches STG",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "rule": {
            "interval": [
              {
                "triggerAtHour": 10
              }
            ]
          }
        },
        "id": "315fe2ad-4988-4a30-aaa4-e3ee9a4f8fcf",
        "name": "Schedule Trigger",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1,
        "position": [
          -80,
          700
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   match_id,\n   msr_id,\n   msr_zendesk_ticket_id,\n   volunteer_id,\n   volunteer_zendesk_ticket_id\nFROM match.matches\nWHERE\n   status = 'waiting_contact'\n   AND created_at < CURRENT_DATE - INTERVAL '30 DAY'",
          "additionalFields": {}
        },
        "id": "1e59c857-57e4-4458-8c7c-445977c525c0",
        "name": "Fetch matches that should be expired today",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          280,
          700
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "update",
          "id": "={{$json[\"msr_zendesk_ticket_id\"]}}",
          "updateFields": {
            "customFieldsUi": {
              "customFieldsValues": [
                {
                  "id": 360014379412,
                  "value": "encaminhamento__expirado"
                }
              ]
            },
            "publicReply": "Olá, {{ticket.requester.first_name}}!\n\nEspero que esteja bem na medida do possível.\n\nEstamos aqui para informá-la que hoje completam 30 dias do seu encaminhamento. Dessa forma, como não recebemos uma devolutiva acerca do início do atendimento entre você e a profissional indicada, sua vaga será liberada para uma outra mulher que necessite de ajuda.\n\nCaso, em algum outro momento, você deseje novamente receber nossa ajuda, é só escrever para o atendimento@mapadoacolhimento.org que te encaminharemos o contato de uma outra profissional disponível ou do serviço público mais próximo.\n\nConte conosco e nos escreva em caso de dúvidas. Estamos aqui para ajudá-la no que for possível <3.\n\nForte abraço,\nEquipe do Mapa do Acolhimento"
          }
        },
        "id": "b6c1a4b0-0f02-4222-be1e-2da30d5803b3",
        "name": "Update MSR Zendesk ticket",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          600,
          960
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "operation": "update",
          "id": "={{$json[\"volunteer_zendesk_ticket_id\"]}}",
          "updateFields": {
            "customFieldsUi": {
              "customFieldsValues": [
                {
                  "id": 360014379412,
                  "value": "encaminhamento__expirado"
                }
              ]
            },
            "publicReply": "Olá, {{ticket.requester.first_name}}! Esperamos que você esteja bem! \n\nEstamos aqui para informá-la que hoje completam 30 dias desde o encaminhamento da {{ticket.ticket_field_360016681971}} mulher que precisa de ajuda. Dessa forma, como não recebemos uma devolutiva acerca do início do atendimento entre você e ela, estamos liberando sua vaga para um novo pedido de ajuda.\n\nNo entanto, se a {{ticket.ticket_field_360016681971}} te contactar, mesmo depois do tempo previsto, pedimos por favor que nos avise por e-mail ou por WhatsApp. Assim, poderemos garantir que ela receba o apoio que precisa e atualizar a sua disponibilidade no nosso sistema.\n\nVocê é parte essencial da nossa rede de apoio <3. Qualquer dúvida nos escreva.\n\nAbraços,\nEquipe do Mapa do Acolhimento"
          }
        },
        "id": "2b650641-bbe6-41b8-b726-f437be7fccfd",
        "name": "Update Volunteer Zendesk ticket",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          600,
          1220
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE match.matches\nSET status = 'expired', updated_at = NOW()\nWHERE match_id = {{$json[\"match_id\"]}};\n\nINSERT INTO match.match_status_history (match_id, status, created_at)\nVALUES ({{$json[\"match_id\"]}}, 'expired', NOW());",
          "additionalFields": {}
        },
        "id": "f80ca594-d226-4e5d-bd4d-159b44d19a68",
        "name": "Expire match in database",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          600,
          700
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT\n   volunteer_id,\n   zendesk_user_id, \n   current_matches,\n   max_matches,  \n   is_available,\n   condition\nFROM public.volunteer_availability\nLEFT JOIN public.volunteers ON volunteer_id = id\nWHERE volunteer_id = \t{{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "b55787bc-0061-4c52-8445-baf83899fd6e",
        "name": "Fetch previous volunteer_availability and volunteer_status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          600,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"condition\"]}}",
                "value2": "indisponivel_sem_vagas"
              }
            ]
          }
        },
        "id": "f60ebb89-20a4-445f-b7b8-79ab5db3e276",
        "name": "Should update volunteer status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          800,
          460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteers\nSET condition = 'disponivel', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'disponivel', NOW());\n\nUPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), is_available = TRUE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "91448ba9-656d-4eb8-971e-41e0676502a2",
        "name": "Update volunteer_availability and volunteer status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1080,
          440
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{$json[\"zendesk_user_id\"]}}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "Disponível"
                }
              ]
            }
          }
        },
        "id": "8a529fa1-6bf7-4cde-802c-083e7819836b",
        "name": "Update zendesk Status da Mulher",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          1080,
          200
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "d3470bae-7d2d-488f-97de-96c245bffd92",
        "name": "Update current_matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1080,
          680
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      }
    ],
    "connections": {
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Fetch matches that should be expired today",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch matches that should be expired today": {
        "main": [
          [
            {
              "node": "Expire match in database",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update MSR Zendesk ticket",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update Volunteer Zendesk ticket",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch previous volunteer_availability and volunteer_status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should update volunteer status?": {
        "main": [
          [
            {
              "node": "Update volunteer_availability and volunteer status",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update zendesk Status da Mulher",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Update current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch previous volunteer_availability and volunteer_status": {
        "main": [
          [
            {
              "node": "Should update volunteer status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "70977ee0-9c03-4426-8a1b-276bf4929d13",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:26:31.573Z",
    "updatedAt": "2024-01-16T21:26:42.000Z",
    "id": "gEu0QEnbgHQaEiTC",
    "name": "[Database pipeline] cities PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "1fb9c305-0c76-41bc-ba45-3174809d65b1",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -920,
          480
        ]
      },
      {
        "parameters": {
          "batchSize": 1,
          "options": {}
        },
        "id": "2de8bc42-bca2-4e02-b816-691795dae32a",
        "name": "Loop over states",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          -460,
          480
        ]
      },
      {
        "parameters": {
          "url": "https://brasilapi.com.br/api/ibge/uf/v1",
          "options": {}
        },
        "id": "4c6d9310-b0ad-4395-99ae-89b3ad586476",
        "name": "Fetch all states from Brasil API",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          -700,
          480
        ]
      },
      {
        "parameters": {
          "url": "=https://brasilapi.com.br/api/ibge/municipios/v1/{{$json[\"sigla\"]}}?providers=gov",
          "options": {}
        },
        "id": "74689811-85e3-47e5-a58d-f044bbfb9337",
        "name": "Fetch all cities from that state",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          -260,
          480
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Add a new field called 'myNewField' to the\n// JSON of the item\n$input.item.json.state = $('Loop over states').item.json.sigla;\n\nreturn $input.item;"
        },
        "id": "5399a890-ae87-4691-b4ef-e297db1a828a",
        "name": "Set city state",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -40,
          480
        ]
      },
      {
        "parameters": {
          "jsCode": "let results = [],\n  i = 0;\n\ndo {\n  try {\n    results = results.concat($('Set city state').all(0, i));\n  } catch (error) {\n    return results;\n  }\n  i++;\n} while (true);"
        },
        "id": "309e2d38-f9f1-49f5-b57a-10eebe34ca07",
        "name": "Union all cities in one table",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const cityValue = item.json.city_label\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \")\n    .replace(/ *\\([^)]*\\) */g, \"\");\n\n\n  const cityLabel = item.json.city_label\n    .replace(/ *\\([^)]*\\) */g, \"\");\n    \n  item.json.city_value = cityValue;\n  item.json.city_label = cityLabel;\n}\n\nreturn $input.all();"
        },
        "id": "47fe3366-a433-4bc4-b7cf-79a2554ef144",
        "name": "Standardize city names",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          880,
          460
        ]
      },
      {
        "parameters": {
          "keys": {
            "key": [
              {
                "currentKey": "nome",
                "newKey": "city_label"
              },
              {
                "currentKey": "codigo_ibge",
                "newKey": "ibge_code"
              }
            ]
          },
          "additionalOptions": {}
        },
        "id": "51a05be3-b254-410a-bbd0-f81d88b83736",
        "name": "Rename Keys",
        "type": "n8n-nodes-base.renameKeys",
        "typeVersion": 1,
        "position": [
          640,
          460
        ]
      },
      {
        "parameters": {
          "conditions": {
            "boolean": [
              {
                "value1": "={{$node[\"Loop over states\"].context[\"noItemsLeft\"]}}",
                "value2": true
              }
            ]
          }
        },
        "id": "cb1d059d-3abc-47f4-a96d-9861a3b2fab4",
        "name": "Done looping over states?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          180,
          480
        ]
      },
      {
        "parameters": {
          "table": "cities",
          "columns": "state, city_label, ibge_code, city_value, created_at, updated_at",
          "additionalFields": {}
        },
        "id": "909fb35e-4d4d-4fd4-b7ad-a0fc292d4c73",
        "name": "Insert in cities table",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1380,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.created_at = $now;\n  item.json.updated_at = $now;\n}\n\nreturn $input.all();"
        },
        "id": "edcca817-b38f-4e5e-9c04-9887d5e19a0f",
        "name": "Add timestamp",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1100,
          460
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch all states from Brasil API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop over states": {
        "main": [
          [
            {
              "node": "Fetch all cities from that state",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch all states from Brasil API": {
        "main": [
          [
            {
              "node": "Loop over states",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch all cities from that state": {
        "main": [
          [
            {
              "node": "Set city state",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set city state": {
        "main": [
          [
            {
              "node": "Done looping over states?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Union all cities in one table": {
        "main": [
          [
            {
              "node": "Rename Keys",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Standardize city names": {
        "main": [
          [
            {
              "node": "Add timestamp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Done looping over states?": {
        "main": [
          [
            {
              "node": "Union all cities in one table",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Loop over states",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Rename Keys": {
        "main": [
          [
            {
              "node": "Standardize city names",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add timestamp": {
        "main": [
          [
            {
              "node": "Insert in cities table",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "64a23f3f-3c1c-4e9f-8b7e-59ca4e09819e",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T20:45:49.725Z",
    "updatedAt": "2024-02-08T14:31:20.000Z",
    "id": "gbQxU7ItIIy9BA3j",
    "name": "[Zendesk Integration] update volunteer status PROD",
    "active": true,
    "nodes": [
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "update-volunteer-status",
          "options": {}
        },
        "id": "403ae22a-51a3-4af8-b4cd-bfb88d297c20",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -520,
          480
        ],
        "webhookId": "67bf1f60-bd30-4c10-b84e-b09c184c27ba",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"current_status\"]}}",
                "operation": "notEqual",
                "value2": "={{$json[\"new_status\"]}}"
              }
            ]
          }
        },
        "id": "25b9c6a9-b5c1-4af7-91cb-29c116f251de",
        "name": "Is it a new status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          160,
          480
        ]
      },
      {
        "parameters": {},
        "id": "87bf395b-9ed0-459c-9a4b-91cbdc09498b",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          460,
          700
        ]
      },
      {
        "parameters": {
          "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const is_available_lookup = {\n      \"disponivel\": 1,\n      \"indisponível_férias\": 0,\n      \"indisponível_maternidade\": 0,\n      \"indisponível_saude\": 0,\n      \"indisponível_trabalho_e_estudo\": 0,\n      \"indisponível_outros_motivos\": 0,\n      \"indisponível_agenda\": 0,\n      \"indisponível_-sem_resposta\": 0,\n      \"dados_incompletos_endereço\": 0,\n      \"dados_incompletos_telefone\": 0,\n      \"dados_incompletos_email\": 0,\n      \"descadastrada\": 0,\n      \"reprovada_estudo_de_caso\": 0,\n      \"reprovada_diretrizes_do_mapa\": 0,\n      \"reprovada_registro_inválido\": 0,\n      \"aprovada\": 1,\n      \"anti-etica\": 0,\n      \"capacitacao\": 0,\n      \"indisponivel_sem_vagas\": 0,\n      \"desabilitada\": 0\n  }\n \n  const zendesk_user_id = item.json.body.volunteer_user_id;\n  const status = item.json.body.volunteer_status;\n  \n  const is_available = is_available_lookup[status]\n    \n  const newItem = {\n    \"zendesk_user_id\": zendesk_user_id,\n    \"status\": status,\n    \"is_available\": is_available\n  }\n  output.push(newItem)\n}\n\nreturn output;"
        },
        "id": "ec4d1f12-9775-44ce-8bc4-2e790e36b067",
        "name": "Extracts zendesk_user_id and is_available",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -280,
          480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT \n\tid AS volunteer_id, \n\tcondition AS current_status,\n    '{{$json[\"status\"]}}' AS new_status,\n    {{$json[\"is_available\"]}}AS is_available \nFROM public.volunteers\nWHERE zendesk_user_id = {{$json[\"zendesk_user_id\"]}}::BIGINT\nLIMIT 1",
          "additionalFields": {}
        },
        "id": "0f8c986a-ba13-4534-9e02-ee7df65599e5",
        "name": "Fetch volunteer_id and status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -60,
          480
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteers\nSET condition = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, '{{$json[\"new_status\"]}}', NOW());\n\nUPDATE public.volunteer_availability\nSET is_available = {{$json[\"is_available\"]}}::boolean, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}};",
          "additionalFields": {}
        },
        "id": "28fab0a6-a65e-4585-8462-729fac1bc078",
        "name": "Update volunteer status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      }
    ],
    "connections": {
      "Is it a new status?": {
        "main": [
          [
            {
              "node": "Update volunteer status",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Extracts zendesk_user_id and is_available",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extracts zendesk_user_id and is_available": {
        "main": [
          [
            {
              "node": "Fetch volunteer_id and status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch volunteer_id and status": {
        "main": [
          [
            {
              "node": "Is it a new status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "ad317657-5549-4ea1-a448-a1bdfe913537",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:45:44.731Z",
    "updatedAt": "2024-01-16T21:45:44.731Z",
    "id": "gpTU3A1HC9b5BqRr",
    "name": "[Database pipeline] - match_surveys STG",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "85113e43-8028-4703-9ee1-8f7a1867e674",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          160,
          600
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "WITH msr_tickets AS (\n    SELECT \n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        requester_id AS msr_id,\n        CASE \n            WHEN SUBSTRING(raw_subject, '\\[(.+)\\]') = 'Psicológico' THEN 'psychological'\n            ELSE 'legal'\n        END AS support_type,\n        'not_found' AS support_expertise,\n        null AS priority,\n        null AS has_disability,\n        null AS requires_libras,\n        TRUE AS accepts_online_support,\n        COALESCE(updated_at, NOW()) AS updated_at,\n        COALESCE(created_at, NOW()) AS created_at\n    FROM public.solidarity_tickets\n    WHERE \n        organization_id = 360273031591 \n        AND SUBSTRING(raw_subject, '\\[(.+)\\]') IN ('Psicológico', 'Jurídico') \n        AND raw_subject NOT LIKE '%Re:%'\n        AND tags::text NOT LIKE '%msr-fora-do-perfil%'\n),\nvolunteer_tickets AS (\n    SELECT \n        requester_id AS volunteer_zendesk_user_id,\n        ticket_id::TEXT AS volunteer_zendesk_ticket_id,\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS msr_zendesk_ticket_id\n    FROM public.solidarity_tickets\n    WHERE organization_id IN (360269610652, 360282119532)\n),\ntickets_solicitacao_repetida AS (\n    SELECT \n        'duplicated' AS status_support_request,\n        *\n    FROM msr_tickets\n    WHERE \n        status_acolhimento = 'solicitação_repetida'\n        OR tags::text LIKE '%closed_by_merge%'\n),\nrn_duplicated_tickets AS (\n    SELECT\n        a.*,\n        ROW_NUMBER() OVER(PARTITION BY a.requester_id, SUBSTRING(a.raw_subject, '\\[(.+)\\]') ORDER BY a.updated_at DESC) AS rn\n    FROM msr_tickets a\n    LEFT JOIN tickets_solicitacao_repetida USING (id) \n    WHERE status_support_request IS NULL\n),\nduplicated_tickets AS (\n    SELECT\n        'duplicated' AS status_support_request,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM rn_duplicated_tickets\n    WHERE \n        rn > 1\n),\nall_duplicated_tickets AS (\n    SELECT * FROM tickets_solicitacao_repetida\n    UNION\n    SELECT * FROM duplicated_tickets\n),\nnon_duplicated_tickets AS (\n    SELECT a.* \n    FROM msr_tickets a\n    LEFT JOIN all_duplicated_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\npublic_service_tickets AS (\n    SELECT \n        'public_service' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'encaminhamento__realizado_para_serviço_público'\n),\nsolicitacao_recebida_tickets AS (\n    SELECT \n        CASE \n            WHEN status = 'closed' THEN 'closed'\n            WHEN status != 'closed' AND tags::TEXT LIKE '%nova-voluntaria-com-prioridade%' THEN 'special_case'\n            ELSE 'open'\n        END AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'solicitação_recebida'\n),\ninvalid_status_tickets AS (\n    SELECT \n        'closed' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento IS NULL OR status_acolhimento IN ('', 'encaminhamento__antigo', 'encaminhamento__confirmou_disponibilidade', 'encaminhamento__negado')\n),\nnon_match_tickets AS (\n    SELECT * FROM all_duplicated_tickets\n    UNION\n    SELECT * FROM public_service_tickets\n    UNION \n    SELECT * FROM solicitacao_recebida_tickets\n    UNION \n    SELECT * FROM invalid_status_tickets\n),\nshould_have_match_tickets AS (\n    SELECT a.*\n    FROM non_duplicated_tickets a\n    LEFT JOIN non_match_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\nshould_have_match_with_id_from_link_match AS (\n    SELECT\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS volunteer_zendesk_ticket_id,\n        *\n    FROM should_have_match_tickets\n),\nmatched_through_msr_link_match AS (\n    SELECT \n        a.volunteer_zendesk_ticket_id::bigint AS volunteer_zendesk_ticket_id,\n        b.volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM should_have_match_with_id_from_link_match a\n    INNER JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n),\ndidnt_match_through_msr_link_match AS (\n    SELECT \n        a.*,\n        b.volunteer_zendesk_user_id\n    FROM should_have_match_with_id_from_link_match a\n    LEFT JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n    WHERE b.volunteer_zendesk_user_id IS NULL\n),\nrn_solidarity_matches AS (\n    SELECT \n        ROW_NUMBER() OVER (PARTITION BY individuals_ticket_id ORDER BY created_at DESC) AS rn,\n        individuals_ticket_id,\n        volunteers_user_id,\n        volunteers_ticket_id\n    FROM public.solidarity_matches\n),\ndedup_solidarity_matches AS (\n    SELECT *\n    FROM rn_solidarity_matches \n    WHERE rn = 1\n),\nmatched_through_solidarity_matches AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    INNER JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n),\nall_matched AS (\n    SELECT * FROM matched_through_msr_link_match\n    UNION\n    SELECT * FROM matched_through_solidarity_matches\n\n),\nall_not_matched AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    LEFT JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n    WHERE b.individuals_ticket_id IS NULL\n),\nall_should_have_been_matched AS (\n    SELECT * FROM all_matched\n    UNION\n    SELECT * FROM all_not_matched\n),\nall_matched_with_status AS (\n    SELECT \n        CASE \n            WHEN status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento__aguardando_confirmação', 'encaminhamento__realizado', 'encaminhamento_interrompido') THEN 'matched'\n            ELSE null\n        END AS status_support_request,\n        CASE \n            WHEN status_acolhimento = 'atendimento__concluído' THEN 'completed'\n            WHEN status_acolhimento = 'atendimento__iniciado' AND status = 'closed' THEN 'completed'\n            WHEN status_acolhimento = 'atendimento__iniciado' AND status IN ('open', 'pending') THEN 'in_contact'\n            WHEN status_acolhimento = 'atendimento__interrompido' THEN 'interrupted_after_support'\n            WHEN status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status = 'closed' THEN 'expired'\n            WHEN status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status != 'closed' THEN 'waiting_contact'\n            WHEN status_acolhimento = 'encaminhamento_interrompido' THEN 'interrupted_before_support'\n            WHEN status_acolhimento = 'encaminhamento__realizado' AND status = 'closed' THEN 'expired'\n            WHEN status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) < (CURRENT_DATE - 30)  THEN 'expired'\n            WHEN status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) >= (CURRENT_DATE - 30) THEN 'waiting_contact'\n            ELSE null\n        END AS status_match,\n        *\n    FROM all_should_have_been_matched\n),\nall_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM all_matched_with_status\n),\nall_non_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM non_match_tickets\n),\nsupport_requests AS (\n    SELECT * FROM all_matched_support_request\n    UNION\n    SELECT * FROM all_non_matched_support_request\n),\nmatches AS (\n    SELECT \n    msr_id,\n    ticket_id AS msr_zendesk_ticket_id,\n    volunteer_zendesk_user_id,\n    volunteer_zendesk_ticket_id,\n    support_type,\n    'old' AS match_type,\n    'old' AS match_stage,\n    status_match AS status,\n    updated_at,\n    created_at\n    FROM all_matched_with_status\n\n),\nvolunteer_match_tickets AS (\n    SELECT \n        volunteer_zendesk_ticket_id, \n        msr_zendesk_ticket_id\n    FROM matches\n    WHERE volunteer_zendesk_ticket_id IS NOT NULL\n),\nvolunteer_match_tickets_with_status AS (\n    SELECT \n        msr_zendesk_ticket_id,\n        SPLIT_PART(status_acolhimento, 'atendimento_', 2) AS survey_type,\n        updated_at,\n        updated_at AS created_at\n    FROM volunteer_match_tickets\n    INNER JOIN public.solidarity_tickets ON volunteer_zendesk_ticket_id::bigint = ticket_id\n    WHERE \n        organization_id IN (360269610652, 360282119532)\n        AND status_acolhimento IN ('atendimento_triagem_1', 'atendimento_triagem_2', 'atendimento_acompanhamento_1', 'atendimento_acompanhamento_2')\n\n)\nSELECT\n   *\nFROM volunteer_match_tickets_with_status\n\n\n",
          "additionalFields": {}
        },
        "id": "8e8d2c33-84fd-4e47-a4a7-0533f8d6dded",
        "name": "Fetch match surveys",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   match_id,\n   msr_zendesk_ticket_id\nFROM match.matches",
          "additionalFields": {}
        },
        "id": "0e2a31c9-150c-43ac-a384-e1f0d5277fae",
        "name": "Fetch matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          780
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_zendesk_ticket_id",
                "field2": "msr_zendesk_ticket_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "842a96ca-7808-4342-b61c-2a05068d9db8",
        "name": "Match surveys with match_id",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          720,
          620
        ]
      },
      {
        "parameters": {
          "schema": "match",
          "table": "match_surveys",
          "columns": "match_id, survey_type, created_at, updated_at",
          "additionalFields": {}
        },
        "id": "6d815b77-5f35-4a5c-9768-9242802c6f04",
        "name": "Insert into match_surveys",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          940,
          620
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch match surveys",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch match surveys": {
        "main": [
          [
            {
              "node": "Match surveys with match_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch matches": {
        "main": [
          [
            {
              "node": "Match surveys with match_id",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Match surveys with match_id": {
        "main": [
          [
            {
              "node": "Insert into match_surveys",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "6698b7b6-8449-4f9b-807b-d99227505858",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T20:47:14.777Z",
    "updatedAt": "2024-01-24T02:06:17.000Z",
    "id": "hpSkUe8bPl2NpBIC",
    "name": "[Zendesk Integration] update volunteer status STG",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "update-volunteer-status",
          "options": {}
        },
        "id": "9d47a246-646c-4c54-b7ea-84939ea8410b",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -520,
          480
        ],
        "webhookId": "570e9cae-e0fa-415c-8a75-917085b1fde5",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"current_status\"]}}",
                "operation": "notEqual",
                "value2": "={{$json[\"new_status\"]}}"
              }
            ]
          }
        },
        "id": "29cc7c5a-82ee-437d-ace2-4bd779f14a32",
        "name": "Is it a new status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          160,
          480
        ]
      },
      {
        "parameters": {},
        "id": "25e9009c-e9fc-4aae-8eec-53df01550cd7",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          460,
          700
        ]
      },
      {
        "parameters": {
          "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const is_available_lookup = {\n      \"disponivel\": 1,\n      \"indisponível_férias\": 0,\n      \"indisponível_maternidade\": 0,\n      \"indisponível_saude\": 0,\n      \"indisponível_trabalho_e_estudo\": 0,\n      \"indisponível_outros_motivos\": 0,\n      \"indisponível_agenda\": 0,\n      \"indisponível_-sem_resposta\": 0,\n      \"dados_incompletos_endereço\": 0,\n      \"dados_incompletos_telefone\": 0,\n      \"dados_incompletos_email\": 0,\n      \"descadastrada\": 0,\n      \"reprovada_estudo_de_caso\": 0,\n      \"reprovada_diretrizes_do_mapa\": 0,\n      \"reprovada_registro_inválido\": 0,\n      \"aprovada\": 1,\n      \"anti-etica\": 0,\n      \"capacitacao\": 0,\n      \"indisponivel_sem_vagas\": 0\n  }\n \n  const zendesk_user_id = item.json.body.volunteer_user_id;\n  const status = item.json.body.volunteer_status;\n  \n  const is_available = is_available_lookup[status]\n    \n  const newItem = {\n    \"zendesk_user_id\": zendesk_user_id,\n    \"status\": status,\n    \"is_available\": is_available\n  }\n  output.push(newItem)\n}\n\nreturn output;"
        },
        "id": "f4b6ee87-fb3d-49b6-992f-a33fbaa76b45",
        "name": "Extracts zendesk_user_id and is_available",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -280,
          480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT \n\tid AS volunteer_id, \n\tcondition AS current_status,\n    '{{$json[\"status\"]}}' AS new_status,\n    {{$json[\"is_available\"]}}AS is_available \nFROM public.volunteers\nWHERE zendesk_user_id = {{$json[\"zendesk_user_id\"]}}::BIGINT\nLIMIT 1",
          "additionalFields": {}
        },
        "id": "1f719e35-3816-4292-a49c-6ae38129b734",
        "name": "Fetch volunteer_id and status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -60,
          480
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteers\nSET condition = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, '{{$json[\"new_status\"]}}', NOW());\n\nUPDATE public.volunteer_availability\nSET is_available = {{$json[\"is_available\"]}}::boolean, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}};",
          "additionalFields": {}
        },
        "id": "7807a4f9-3ad1-4431-8c73-6675a3637000",
        "name": "Update volunteer status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      }
    ],
    "connections": {
      "Is it a new status?": {
        "main": [
          [
            {
              "node": "Update volunteer status",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Extracts zendesk_user_id and is_available",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extracts zendesk_user_id and is_available": {
        "main": [
          [
            {
              "node": "Fetch volunteer_id and status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch volunteer_id and status": {
        "main": [
          [
            {
              "node": "Is it a new status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "fdc7bada-4980-4cc8-af0d-5ce51d40658b",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:40:14.077Z",
    "updatedAt": "2024-01-16T21:40:14.077Z",
    "id": "j61v412oTuWLpoOx",
    "name": "[Database pipeline] - volunteers STG",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "3132b491-3de7-46ce-8088-89b081474542",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          900,
          2400
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT city_value, state\nFROM public.cities",
          "additionalFields": {}
        },
        "id": "61e925f1-9faf-4751-8d20-61bca8f2a76a",
        "name": "Fetch cities",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2220,
          1280
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   user_id AS zendesk_user_id,\n   REGEXP_REPLACE(cep, '-', '', 'g') AS zipcode,\n   BTRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(city), 'À|Á|Â|Ã|Ä|Å', 'A', 'g'), 'È|É|Ê|Ë', 'E', 'g'), 'Í|Ì|Î|Ĩ|Ï ', 'I', 'g'), 'Ò|Ó|Ô|Õ|Ö', 'O', 'g'),'Ù|Ú|Û|Ü', 'U', 'g'), 'Ç', 'C', 'g')) AS city,\n   BTRIM(UPPER(state)) AS state\nFROM public.solidarity_users\nWHERE organization_id IN (360269610652, 360282119532)\n\n\n\n",
          "additionalFields": {}
        },
        "id": "eaf5bb1f-ba05-43e7-9484-b990ba04dfa9",
        "name": "Fetch volunteers with zipcode, city and state",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2220,
          860
        ]
      },
      {
        "parameters": {
          "content": "## O que esse workflow faz\n\n### 1. Padroniza o município das voluntárias:\n- Busca todas as voluntárias na tabela `solidarity_users` do Bonde;\n- Busca todos os municípios padronizados na tabela `cities` do Mapa do Acolhimento;\n- Executa um join entre essas duas tabelas;\n- Se encontrar correspondência, show, o município da voluntária está correto.\n- Se não encontrar correspondência, verifica se o CEP da voluntária é válido (não está vazio, possui 8 caracteres e apenas números);\n- Se o CEP for inválido, adiciona `NOT_FOUND` nos campos `zipcode`, `city` e `state`;\n- Se o CEP for válido, busca na Brasil API o município correspondente a esse CEP;\n- Se encontrar na Brasil API, show, adiciona esse município para a voluntária;\n- Se não encontrar, adiciona `NOT_FOUND` nos campos `zipcode`, `city` e `state`.\n\n### 2. Padroniza latitude e longitude das voluntárias:\n- Se a latitude ou longitude for inválida (nula, não numérica ou estiver fora do range necessário), substiui por `null`.\n- Se não, mantém como está.\n\n### 3. Padroniza os status antigos com os novos status:\n- Seguindo a [documentação](https://miro.com/app/board/uXjVMzPi3ZA=/?moveToWidget=3458764570428954733&cot=14).\n\n\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
          "height": 502.6746367999999,
          "width": 946.9145087999996
        },
        "id": "c2a9c9d0-3896-498a-bbda-348011b170e7",
        "name": "Note",
        "type": "n8n-nodes-base.stickyNote",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  \n  if(!item.json.latitude || !item.json.longitude)\n  {\n    item.json.latitude = null;\n    item.json.longitude = null;\n  }\n  else {\n    \n    const isLatitudeNotANumber = isNaN(item.json.latitude);\n    const isLongitudeNotANumber = isNaN(item.json.longitude);\n\n    if(isLatitudeNotANumber || isLongitudeNotANumber)\n    {\n      item.json.latitude = null;\n      item.json.longitude = null;\n    }\n    else {\n      \n      const isLatitudeNotInRange = item.json.latitude < -90 \n      || item.json.latitude > 90;\n    const isLongitudeNotInRange = item.json.longitude < -180 \n      || item.json.longitude > 180;\n\n      if(isLatitudeNotInRange || isLongitudeNotInRange)\n      {\n        item.json.latitude = null;\n        item.json.longitude = null;\n      }\n      else {\n        \n        item.json.latitude = parseFloat(item.json.latitude);\n        item.json.longitude = parseFloat(item.json.longitude);\n      }\n      \n    }\n  }\n}\n\nreturn $input.all();"
        },
        "id": "77ec1c1a-f6d8-48c0-914f-3bf9fa7db3f1",
        "name": "Handle invalid lat long1",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          2500,
          2780
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "city",
                "field2": "city_value"
              },
              {
                "field1": "state",
                "field2": "state"
              }
            ]
          },
          "options": {}
        },
        "id": "bc92f395-95cd-474f-8dfe-806ac1660983",
        "name": "Volunteers with valid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3060,
          900
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "city",
                "field2": "city_value"
              },
              {
                "field1": "state",
                "field2": "state"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "8834f7d7-875b-4ac1-b1fe-fd9a5a10c082",
        "name": "Volunteers with invalid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3060,
          1260
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    output.push(\n      {\n        zendesk_user_id: item.json.zendesk_user_id,\n        zipcode: \"not_found\",\n        city: \"not_found\",\n        state: \"not_found\"\n      }\n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "b653d45f-d653-48b2-8e68-8507e9afc8c7",
        "name": "Volunteers with invalid zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3360,
          1260
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNotNull = item.json.zipcode;\n  const zipcodeHasCorrectLength = item.json.zipcode ? item.json.zipcode.length === 8 : false;\n  const zipcodeIsANumber = !isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNotNull && zipcodeHasCorrectLength && zipcodeIsANumber){\n    output.push(\n      {\n        zendesk_user_id: item.json.zendesk_user_id,\n        zipcode: item.json.zipcode\n      }\n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "6ae150fc-3924-418f-be41-c474e9495c01",
        "name": "Volunteers with valid zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3360,
          1480
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    item.json.zipcode = \"not_found\";\n  }\n  \n}\n\nreturn $input.all();"
        },
        "id": "640c058f-f345-49e4-b9d2-b0f448c2e452",
        "name": "Normalize city and zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3360,
          900
        ]
      },
      {
        "parameters": {
          "jsCode": "const output = [];\n\nfor (const item of $input.all()) {\n\n  if(item.json.city){\n    \n    const normalizedName = item.json.city\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \") \n    .replace(/ *\\([^)]*\\) */g, \"\")\n    .toUpperCase();\n  \n    output.push(\n      {\n        zipcode: item.json.cep,\n        city: normalizedName,\n        state: item.json.state\n      } \n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "56829445-715c-40b7-93a9-e52e1b7c5401",
        "name": "Standardize found cities",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          4180,
          1780
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  if(item.json.city === \"IPIABAS\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"SAO JOSE DO TURVO\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"CAETE-ACU\" && item.json.state === \"BA\"){\n    item.json.city = \"PALMEIRAS\";\n  }\n  if(item.json.city === \"MORAES ALMEIDA\" && item.json.state === \"PA\"){\n    item.json.city = \"ITAITUBA\";\n  }\n  \n}\n\n\nreturn $input.all();"
        },
        "id": "979d08f8-059e-4c1b-8087-e4bb5690ed9c",
        "name": "Handle corner cases",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          4380,
          1780
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const newItem = {\n    zipcode: item.json.zipcode\n  }\n  \n  if(!output.includes(newItem)){\n    output.push(newItem)   \n  }\n}\n\nreturn output;"
        },
        "id": "a9af3310-2e44-40a1-bb00-501cde2b3dff",
        "name": "Select distinct zipcodes",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3760,
          1780
        ]
      },
      {
        "parameters": {
          "url": "=https://brasilapi.com.br/api/cep/v1/{{$json[\"zipcode\"]}}",
          "options": {
            "batching": {
              "batch": {
                "batchSize": 20
              }
            },
            "response": {
              "response": {
                "neverError": true
              }
            }
          }
        },
        "id": "b19e50c8-a3cc-4e36-a0f4-30063ce12469",
        "name": "Fetch city from zipcode",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          3980,
          1780
        ],
        "executeOnce": false
      },
      {
        "parameters": {},
        "id": "81859326-7827-4c14-a1d2-57b3a8cb60ee",
        "name": "Volunteer with correct city + volunteers with invalid zipcode",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3960,
          900
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zipcode",
                "field2": "zipcode"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "89bf756e-b300-48d2-b639-4f1444888ef5",
        "name": "Volunteers with new cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4800,
          1500
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zipcode",
                "field2": "zipcode"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "f0e92d2f-a713-4eac-8ba6-48a8acb4a252",
        "name": "Volunteers with not found cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4780,
          1760
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.city = \"not_found\";\n  item.json.state = \"not_found\";\n}\n\nreturn $input.all();"
        },
        "id": "09b9c865-02f3-494a-a187-04c9e0ce2ee3",
        "name": "Add NOT_FOUND city and state",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          5020,
          1760
        ]
      },
      {
        "parameters": {},
        "id": "b914d5f5-acc6-4763-a876-6eda4ff02ea8",
        "name": "Volunteers after Brasil API",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          5280,
          1520
        ]
      },
      {
        "parameters": {},
        "id": "01b09ba0-8f5f-469e-8308-dce9b023701e",
        "name": "All volunteers with correct cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          5640,
          920
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zendesk_user_id",
                "field2": "zendesk_user_id"
              }
            ]
          },
          "joinMode": "enrichInput1",
          "options": {}
        },
        "id": "ad521172-bf13-4122-a294-633654ed1386",
        "name": "Volunteers with lat long",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2980,
          2480
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zendesk_user_id",
                "field2": "zendesk_user_id"
              }
            ]
          },
          "joinMode": "enrichInput1",
          "options": {}
        },
        "id": "8a833b6d-3524-443f-8087-61450e878082",
        "name": "All volunteers",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          6780,
          1980
        ]
      },
      {
        "parameters": {
          "table": "volunteers",
          "columns": "zendesk_user_id, form_entries_id, created_at, updated_at, first_name, last_name, email, phone, neighborhood, birth_date, register_number, color, gender, modality, fields_of_work, years_of_experience, availability, approach, form_data_id, occupation, moodle_id, latitude, longitude, zipcode, city, state, condition, offers_libras_support",
          "additionalFields": {}
        },
        "id": "4765c7fa-4004-4df0-8fb9-b10338119191",
        "name": "Insert into volunteers",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          7080,
          1980
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    user_id AS zendesk_user_id,\n    external_id AS form_entries_id,\n    COALESCE(created_at, NOW()) AS created_at,\n    COALESCE(updated_at, NOW()) AS updated_at,\n    condition AS old_condition,\n    CASE \n      WHEN name = 'sem nome'  THEN 'not_found'\n      WHEN name = 'X'  THEN 'not_found'\n      WHEN name IS NULL  THEN 'not_found'\n      ELSE INITCAP(SUBSTR(BTRIM(name), 1, STRPOS(BTRIM(name), ' ')))\n    END AS first_name,\n    CASE \n      WHEN name = 'sem nome'  THEN 'not_found'\n      WHEN name = 'X'  THEN 'not_found'\n      WHEN name IS NULL  THEN 'not_found'\n      ELSE INITCAP(SUBSTR(BTRIM(name), (STRPOS(BTRIM(name), ' ') + 1)))\n    END AS last_name,\n    COALESCE(email, 'not_found') AS email,\n    COALESCE(BTRIM(phone), BTRIM(whatsapp), 'not_found') AS phone,\n    'not_found' AS neighborhood,\n    TO_TIMESTAMP(0)::DATE AS birth_date,\n    COALESCE(registration_number, 'not_found') AS register_number,\n    CASE \n      WHEN cor = 'amarela'  THEN 'yellow'\n      WHEN cor = 'branca'  THEN 'white'\n      WHEN cor = 'indigena'  THEN 'indigenous'\n      WHEN cor = 'parda'  THEN 'brown'\n      WHEN cor = 'preta'  THEN 'black'\n      ELSE 'not_found'\n    END AS color,\n    'not_found' AS gender, \n    CASE \n      WHEN email = 'magacrema@hotmail.com'  THEN 'on_site'\n      ELSE 'both'\n    END AS modality,\n    'not_found' AS fields_of_work,\n    'not_found' AS years_of_experience,\n    CASE \n      WHEN BTRIM(disponibilidade_de_atendimentos) = '1' THEN 1\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '2' THEN 2\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '3' THEN 3\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '4' THEN 3\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '5' OR BTRIM(disponibilidade_de_atendimentos) = '5_ou_mais' THEN 3\n      ELSE 1\n    END AS availability,\n    'not_found' AS approach,\n    NULL AS form_data_id,\n    CASE \n      WHEN organization_id = 360269610652 THEN 'lawyer'\n      ELSE 'psychologist'\n    END AS occupation,\n    NULL AS moodle_id,\n    FALSE AS offers_libras_support,\n    COALESCE(condition, 'not_found') AS condition\nFROM public.solidarity_users \nWHERE \n    organization_id IN (360269610652, 360282119532)\n",
          "additionalFields": {}
        },
        "id": "7a46dbc7-381e-4955-a461-410594b6b266",
        "name": "Fetch volunteers",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2260,
          2460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    user_id AS zendesk_user_id,\n    latitude,\n    longitude  \nFROM public.solidarity_users \nWHERE \n    organization_id IN (360269610652, 360282119532)\n",
          "additionalFields": {}
        },
        "id": "6cb13f0a-0d91-4b6d-8a84-474429dbbaf6",
        "name": "Fetches lat long",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2260,
          2780
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"state\"]}}",
                "value2": "INT"
              },
              {
                "value1": "={{$json[\"city\"]}}",
                "value2": "INTERNACIONAL"
              }
            ]
          }
        },
        "id": "8943f0a0-3bf6-43af-9492-fb7958980d8f",
        "name": "Is international?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          2620,
          860
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  item.json.zipcode = \"not_found\";\n  \n}\n\nreturn $input.all();"
        },
        "id": "a8ad8d04-0b69-43cf-a390-362c52db89a0",
        "name": "Adds not_found zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3360,
          560
        ]
      },
      {
        "parameters": {},
        "id": "c695080f-0334-49b2-a4b2-daa8d8438ee5",
        "name": "Volunteers with international city + valid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3680,
          580
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch volunteers with zipcode, city and state",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch cities",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch volunteers",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetches lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch cities": {
        "main": [
          [
            {
              "node": "Volunteers with valid city",
              "type": "main",
              "index": 1
            },
            {
              "node": "Volunteers with invalid city",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Fetch volunteers with zipcode, city and state": {
        "main": [
          [
            {
              "node": "Is international?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle invalid lat long1": {
        "main": [
          [
            {
              "node": "Volunteers with lat long",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers with valid city": {
        "main": [
          [
            {
              "node": "Normalize city and zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with invalid city": {
        "main": [
          [
            {
              "node": "Volunteers with invalid zipcode",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers with valid zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with invalid zipcode": {
        "main": [
          [
            {
              "node": "Volunteer with correct city + volunteers with invalid zipcode",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers with valid zipcode": {
        "main": [
          [
            {
              "node": "Select distinct zipcodes",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers with new cities",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers with not found cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Normalize city and zipcode": {
        "main": [
          [
            {
              "node": "Volunteers with international city + valid city",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Standardize found cities": {
        "main": [
          [
            {
              "node": "Handle corner cases",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle corner cases": {
        "main": [
          [
            {
              "node": "Volunteers with new cities",
              "type": "main",
              "index": 1
            },
            {
              "node": "Volunteers with not found cities",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Select distinct zipcodes": {
        "main": [
          [
            {
              "node": "Fetch city from zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch city from zipcode": {
        "main": [
          [
            {
              "node": "Standardize found cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteer with correct city + volunteers with invalid zipcode": {
        "main": [
          [
            {
              "node": "All volunteers with correct cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with new cities": {
        "main": [
          [
            {
              "node": "Volunteers after Brasil API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with not found cities": {
        "main": [
          [
            {
              "node": "Add NOT_FOUND city and state",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add NOT_FOUND city and state": {
        "main": [
          [
            {
              "node": "Volunteers after Brasil API",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers after Brasil API": {
        "main": [
          [
            {
              "node": "All volunteers with correct cities",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers with lat long": {
        "main": [
          [
            {
              "node": "All volunteers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "All volunteers with correct cities": {
        "main": [
          [
            {
              "node": "All volunteers",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Fetch volunteers": {
        "main": [
          [
            {
              "node": "Volunteers with lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetches lat long": {
        "main": [
          [
            {
              "node": "Handle invalid lat long1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is international?": {
        "main": [
          [
            {
              "node": "Adds not_found zipcode",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Volunteers with valid city",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers with invalid city",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adds not_found zipcode": {
        "main": [
          [
            {
              "node": "Volunteers with international city + valid city",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with international city + valid city": {
        "main": [
          [
            {
              "node": "Volunteer with correct city + volunteers with invalid zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "All volunteers": {
        "main": [
          [
            {
              "node": "Insert into volunteers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "c765e8e1-6151-40bf-b4b4-21173d13cf90",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-24T20:14:21.651Z",
    "updatedAt": "2024-01-24T20:21:43.000Z",
    "id": "koWOeg3pu4Ysg9CE",
    "name": "[Database pipeline] matches PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "838bfe57-40d8-4f9c-aa7e-4231e9b27d56",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          500,
          300
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "WITH msr_tickets AS (\n    SELECT \n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        requester_id AS msr_id,\n        CASE \n            WHEN SUBSTRING(raw_subject, '\\[(.+)\\]') = 'Psicológico' THEN 'psychological'\n            ELSE 'legal'\n        END AS support_type,\n        'not_found' AS support_expertise,\n        null AS priority,\n        null AS has_disability,\n        null AS requires_libras,\n        TRUE AS accepts_online_support,\n        COALESCE(updated_at, NOW()) AS updated_at,\n        COALESCE(created_at, NOW()) AS created_at\n    FROM public.solidarity_tickets\n    WHERE \n        organization_id = 360273031591 \n        AND SUBSTRING(raw_subject, '\\[(.+)\\]') IN ('Psicológico', 'Jurídico') \n        AND raw_subject NOT LIKE '%Re:%'\n        AND tags::text NOT LIKE '%msr-fora-do-perfil%'\n),\nvolunteer_tickets AS (\n    SELECT \n        requester_id AS volunteer_zendesk_user_id,\n        ticket_id::TEXT AS volunteer_zendesk_ticket_id,\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS msr_zendesk_ticket_id\n    FROM public.solidarity_tickets\n    WHERE organization_id IN (360269610652, 360282119532)\n),\ntickets_solicitacao_repetida AS (\n    SELECT \n        'duplicated' AS status_support_request,\n        *\n    FROM msr_tickets\n    WHERE \n        status_acolhimento = 'solicitação_repetida'\n        OR tags::text LIKE '%closed_by_merge%'\n),\nrn_duplicated_tickets AS (\n    SELECT\n        a.*,\n        ROW_NUMBER() OVER(PARTITION BY a.requester_id, SUBSTRING(a.raw_subject, '\\[(.+)\\]') ORDER BY a.updated_at DESC) AS rn\n    FROM msr_tickets a\n    LEFT JOIN tickets_solicitacao_repetida USING (id) \n    WHERE status_support_request IS NULL\n),\nduplicated_tickets AS (\n    SELECT\n        'duplicated' AS status_support_request,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM rn_duplicated_tickets\n    WHERE \n        rn > 1\n),\nall_duplicated_tickets AS (\n    SELECT * FROM tickets_solicitacao_repetida\n    UNION\n    SELECT * FROM duplicated_tickets\n),\nnon_duplicated_tickets AS (\n    SELECT a.* \n    FROM msr_tickets a\n    LEFT JOIN all_duplicated_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\npublic_service_tickets AS (\n    SELECT \n        'public_service' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'encaminhamento__realizado_para_serviço_público'\n),\nsolicitacao_recebida_tickets AS (\n    SELECT \n        CASE \n            WHEN status = 'closed' THEN 'closed'\n            WHEN status != 'closed' AND tags::TEXT LIKE '%nova-voluntaria-com-prioridade%' THEN 'special_case'\n            ELSE 'open'\n        END AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento = 'solicitação_recebida'\n),\ninvalid_status_tickets AS (\n    SELECT \n        'closed' AS status_support_request,\n        *\n    FROM non_duplicated_tickets\n    WHERE status_acolhimento IS NULL OR status_acolhimento IN ('', 'encaminhamento__antigo', 'encaminhamento__confirmou_disponibilidade', 'encaminhamento__negado')\n),\nnon_match_tickets AS (\n    SELECT * FROM all_duplicated_tickets\n    UNION\n    SELECT * FROM public_service_tickets\n    UNION \n    SELECT * FROM solicitacao_recebida_tickets\n    UNION \n    SELECT * FROM invalid_status_tickets\n),\nshould_have_match_tickets AS (\n    SELECT a.*\n    FROM non_duplicated_tickets a\n    LEFT JOIN non_match_tickets b USING (id)\n    WHERE b.status_support_request IS NULL\n),\nshould_have_match_with_id_from_link_match AS (\n    SELECT\n        CASE\n            WHEN link_match IS NOT NULL THEN SPLIT_PART(link_match, '/tickets/', 2)\n            ELSE 'no_link_match'\n        END AS volunteer_zendesk_ticket_id,\n        *\n    FROM should_have_match_tickets\n),\nmatched_through_msr_link_match AS (\n    SELECT \n        a.volunteer_zendesk_ticket_id::bigint AS volunteer_zendesk_ticket_id,\n        b.volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM should_have_match_with_id_from_link_match a\n    INNER JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n),\ndidnt_match_through_msr_link_match AS (\n    SELECT \n        a.*,\n        b.volunteer_zendesk_user_id\n    FROM should_have_match_with_id_from_link_match a\n    LEFT JOIN volunteer_tickets b USING(volunteer_zendesk_ticket_id)\n    WHERE b.volunteer_zendesk_user_id IS NULL\n),\nrn_solidarity_matches AS (\n    SELECT \n        ROW_NUMBER() OVER (PARTITION BY individuals_ticket_id ORDER BY created_at DESC) AS rn,\n        individuals_ticket_id,\n        volunteers_user_id,\n        volunteers_ticket_id\n    FROM public.solidarity_matches\n),\ndedup_solidarity_matches AS (\n    SELECT *\n    FROM rn_solidarity_matches \n    WHERE rn = 1\n),\nmatched_through_solidarity_matches AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    INNER JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n),\nall_matched AS (\n    SELECT * FROM matched_through_msr_link_match\n    UNION\n    SELECT * FROM matched_through_solidarity_matches\n),\nall_not_matched AS (\n    SELECT \n        volunteers_ticket_id AS volunteer_zendesk_ticket_id,\n        volunteers_user_id AS volunteer_zendesk_user_id,\n        id,\n        ticket_id, \n        raw_subject,\n        requester_id,\n        status,\n        status_acolhimento,\n        tags,\n        link_match,\n        data_encaminhamento,\n        msr_id,\n        support_type,\n        support_expertise,\n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        updated_at,\n        created_at\n    FROM didnt_match_through_msr_link_match a\n    LEFT JOIN dedup_solidarity_matches b ON a.ticket_id = b.individuals_ticket_id\n    WHERE b.individuals_ticket_id IS NULL\n),\nall_should_have_been_matched AS (\n    SELECT * FROM all_matched\n    UNION\n    SELECT * FROM all_not_matched\n),\nall_matched_with_real_status_acolhimento AS (\n    SELECT \n        a.*,\n        CASE\n            WHEN \n                a.status_acolhimento = 'encaminhamento__realizado' \n                AND a.status_acolhimento != b.status_acolhimento \n                AND b.status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento_interrompido')\n            THEN b.status_acolhimento\n            ELSE a.status_acolhimento\n       END AS real_status_acolhimento\n    FROM all_should_have_been_matched a\n    INNER JOIN public.solidarity_tickets b ON a.volunteer_zendesk_ticket_id::bigint = b.ticket_id\n),\nall_matched_with_status AS (\n    SELECT \n        CASE \n            WHEN real_status_acolhimento IN ('atendimento__concluído', 'atendimento__iniciado', 'atendimento__interrompido', 'encaminhamento__aguardando_confirmação', 'encaminhamento__realizado', 'encaminhamento_interrompido') THEN 'matched'\n            ELSE null\n        END AS status_support_request,\n        CASE \n            WHEN real_status_acolhimento = 'atendimento__concluído' THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status IN ('closed', 'deleted') THEN 'completed'\n            WHEN real_status_acolhimento = 'atendimento__iniciado' AND status IN ('open', 'pending') THEN 'in_contact'\n            WHEN real_status_acolhimento = 'atendimento__interrompido' THEN 'interrupted_after_support'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status = 'closed' THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__aguardando_confirmação' AND status != 'closed' THEN 'waiting_contact'\n            WHEN real_status_acolhimento = 'encaminhamento_interrompido' THEN 'interrupted_before_support'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status IN ('closed', 'deleted') THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) < (CURRENT_DATE - 30)  THEN 'expired'\n            WHEN real_status_acolhimento = 'encaminhamento__realizado' AND status != 'closed' AND COALESCE(TO_DATE(data_encaminhamento, 'YYYY-MM-DD'), DATE(TO_TIMESTAMP(0))) >= (CURRENT_DATE - 30) THEN 'waiting_contact'\n            ELSE null\n        END AS status_match,\n        *\n    FROM all_matched_with_real_status_acolhimento\n),\nall_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM all_matched_with_status\n),\nall_non_matched_support_request AS (\n    SELECT\n        msr_id, \n        ticket_id AS zendesk_ticket_id,\n        support_type,\n        support_expertise, \n        priority,\n        has_disability,\n        requires_libras,\n        accepts_online_support,\n        status_support_request AS status,\n        updated_at,\n        created_at\n    FROM non_match_tickets\n),\nsupport_requests AS (\n    SELECT * FROM all_matched_support_request\n    UNION\n    SELECT * FROM all_non_matched_support_request\n),\nmatches AS (\n    SELECT \n    msr_id,\n    ticket_id AS msr_zendesk_ticket_id,\n    volunteer_zendesk_user_id,\n    volunteer_zendesk_ticket_id,\n    support_type,\n    'old' AS match_type,\n    'old' AS match_stage,\n    status_match AS status,\n    updated_at,\n    created_at\n    FROM all_matched_with_status\n\n),\nvolunteer_match_tickets AS (\n    SELECT \n        volunteer_zendesk_ticket_id, \n        msr_zendesk_ticket_id\n    FROM matches\n    WHERE volunteer_zendesk_ticket_id IS NOT NULL\n),\nvolunteer_match_tickets_with_status AS (\n    SELECT \n        msr_zendesk_ticket_id,\n        SPLIT_PART(status_acolhimento, 'atendimento_', 2) AS survey_type,\n        updated_at,\n        updated_at AS created_at\n    FROM volunteer_match_tickets\n    INNER JOIN public.solidarity_tickets ON volunteer_zendesk_ticket_id::bigint = ticket_id\n    WHERE \n        organization_id IN (360269610652, 360282119532)\n        AND status_acolhimento IN ('atendimento_triagem_1', 'atendimento_triagem_2', 'atendimento_acompanhamento_1', 'atendimento_acompanhamento_2')\n\n)\nSELECT *\nFROM matches",
          "additionalFields": {}
        },
        "id": "dabb2dce-927d-4cb1-9629-c4f0d342f61f",
        "name": "Fetch matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          840,
          160
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   support_request_id,\n   zendesk_ticket_id AS msr_zendesk_ticket_id\nFROM match.support_requests",
          "additionalFields": {}
        },
        "id": "4a8b0b84-f1c4-4470-b81d-27945453345b",
        "name": "Fetch support_requests",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          840,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "msr_zendesk_ticket_id",
                "field2": "msr_zendesk_ticket_id"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "684ec1ff-6079-4fe5-9f93-108c81902caa",
        "name": "Matches with support_request_id",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1200,
          300
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   id AS volunteer_id,\n   zendesk_user_id AS volunteer_zendesk_user_id\nFROM public.volunteers",
          "additionalFields": {}
        },
        "id": "622a3afa-a842-4a5c-8fa9-6db407973e9d",
        "name": "Fetch volunteers",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          840,
          760
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "volunteer_zendesk_user_id",
                "field2": "volunteer_zendesk_user_id"
              }
            ]
          },
          "joinMode": "enrichInput1",
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "7f9f0ea4-d691-4250-a451-b294208fda5d",
        "name": "Matches with volunteer_id",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          1640,
          540
        ]
      },
      {
        "parameters": {
          "schema": "match",
          "table": "matches",
          "columns": "support_request_id, msr_id, volunteer_id, msr_zendesk_ticket_id, volunteer_zendesk_ticket_id, support_type, match_type, match_stage, status, created_at, updated_at",
          "additionalFields": {}
        },
        "id": "a3851d50-df45-479d-91d2-4c0a0cc52f22",
        "name": "Insert into matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1940,
          540
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch matches",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch support_requests",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch volunteers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch matches": {
        "main": [
          [
            {
              "node": "Matches with support_request_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch support_requests": {
        "main": [
          [
            {
              "node": "Matches with support_request_id",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Matches with support_request_id": {
        "main": [
          [
            {
              "node": "Matches with volunteer_id",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch volunteers": {
        "main": [
          [
            {
              "node": "Matches with volunteer_id",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Matches with volunteer_id": {
        "main": [
          [
            {
              "node": "Insert into matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "9d7225cf-a4da-45fe-a472-70df0d898929",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:42:40.357Z",
    "updatedAt": "2024-01-24T20:02:52.000Z",
    "id": "kvEwsmFv1pZniwXY",
    "name": "[Database pipeline] - volunteers PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "b6e4ff2c-1c07-48ec-b68b-9128248a8eb3",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          900,
          2400
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT city_value, state\nFROM public.cities",
          "additionalFields": {}
        },
        "id": "cbed09d1-f9d0-4398-a3be-ade16bce1a0d",
        "name": "Fetch cities",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2220,
          1280
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   user_id AS zendesk_user_id,\n   REGEXP_REPLACE(cep, '-', '', 'g') AS zipcode,\n   BTRIM(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(city), 'À|Á|Â|Ã|Ä|Å', 'A', 'g'), 'È|É|Ê|Ë', 'E', 'g'), 'Í|Ì|Î|Ĩ|Ï ', 'I', 'g'), 'Ò|Ó|Ô|Õ|Ö', 'O', 'g'),'Ù|Ú|Û|Ü', 'U', 'g'), 'Ç', 'C', 'g')) AS city,\n   BTRIM(UPPER(state)) AS state\nFROM public.solidarity_users\nWHERE organization_id IN (360269610652, 360282119532)\n\n\n\n",
          "additionalFields": {}
        },
        "id": "79f93253-29b3-48af-81c5-4c4e18c51df9",
        "name": "Fetch volunteers with zipcode, city and state",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2220,
          860
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde"
          }
        }
      },
      {
        "parameters": {
          "content": "## O que esse workflow faz\n\n### 1. Padroniza o município das voluntárias:\n- Busca todas as voluntárias na tabela `solidarity_users` do Bonde;\n- Busca todos os municípios padronizados na tabela `cities` do Mapa do Acolhimento;\n- Executa um join entre essas duas tabelas;\n- Se encontrar correspondência, show, o município da voluntária está correto.\n- Se não encontrar correspondência, verifica se o CEP da voluntária é válido (não está vazio, possui 8 caracteres e apenas números);\n- Se o CEP for inválido, adiciona `NOT_FOUND` nos campos `zipcode`, `city` e `state`;\n- Se o CEP for válido, busca na Brasil API o município correspondente a esse CEP;\n- Se encontrar na Brasil API, show, adiciona esse município para a voluntária;\n- Se não encontrar, adiciona `NOT_FOUND` nos campos `zipcode`, `city` e `state`.\n\n### 2. Padroniza latitude e longitude das voluntárias:\n- Se a latitude ou longitude for inválida (nula, não numérica ou estiver fora do range necessário), substiui por `null`.\n- Se não, mantém como está.\n\n### 3. Padroniza os status antigos com os novos status:\n- Seguindo a [documentação](https://miro.com/app/board/uXjVMzPi3ZA=/?moveToWidget=3458764570428954733&cot=14).\n\n\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
          "height": 502.6746367999999,
          "width": 946.9145087999996
        },
        "id": "12d0d11a-e4f0-4f22-bad0-5643d3e12e99",
        "name": "Note",
        "type": "n8n-nodes-base.stickyNote",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  \n  if(!item.json.latitude || !item.json.longitude)\n  {\n    item.json.latitude = null;\n    item.json.longitude = null;\n  }\n  else {\n    \n    const isLatitudeNotANumber = isNaN(item.json.latitude);\n    const isLongitudeNotANumber = isNaN(item.json.longitude);\n\n    if(isLatitudeNotANumber || isLongitudeNotANumber)\n    {\n      item.json.latitude = null;\n      item.json.longitude = null;\n    }\n    else {\n      \n      const isLatitudeNotInRange = item.json.latitude < -90 \n      || item.json.latitude > 90;\n    const isLongitudeNotInRange = item.json.longitude < -180 \n      || item.json.longitude > 180;\n\n      if(isLatitudeNotInRange || isLongitudeNotInRange)\n      {\n        item.json.latitude = null;\n        item.json.longitude = null;\n      }\n      else {\n        \n        item.json.latitude = parseFloat(item.json.latitude);\n        item.json.longitude = parseFloat(item.json.longitude);\n      }\n      \n    }\n  }\n}\n\nreturn $input.all();"
        },
        "id": "39bbe913-09a8-41d9-8ca1-762e399ddfc7",
        "name": "Handle invalid lat long1",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          2500,
          2780
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "city",
                "field2": "city_value"
              },
              {
                "field1": "state",
                "field2": "state"
              }
            ]
          },
          "options": {}
        },
        "id": "3a82158b-b316-4f3a-a5b5-e8b9087ec8ae",
        "name": "Volunteers with valid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3060,
          900
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "city",
                "field2": "city_value"
              },
              {
                "field1": "state",
                "field2": "state"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "a1fb601f-296f-466f-aa4b-671f3e7d06b9",
        "name": "Volunteers with invalid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3060,
          1260
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    output.push(\n      {\n        zendesk_user_id: item.json.zendesk_user_id,\n        zipcode: \"not_found\",\n        city: \"not_found\",\n        state: \"not_found\"\n      }\n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "a59952c6-3745-4533-bb30-5956bd0dee16",
        "name": "Volunteers with invalid zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3360,
          1260
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNotNull = item.json.zipcode;\n  const zipcodeHasCorrectLength = item.json.zipcode ? item.json.zipcode.length === 8 : false;\n  const zipcodeIsANumber = !isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNotNull && zipcodeHasCorrectLength && zipcodeIsANumber){\n    output.push(\n      {\n        zendesk_user_id: item.json.zendesk_user_id,\n        zipcode: item.json.zipcode\n      }\n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "5fb1f540-b8bf-43c7-b0d3-6e7e69f8dfb3",
        "name": "Volunteers with valid zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3360,
          1480
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const zipcodeIsNull = !item.json.zipcode;\n  const zipcodeHasIncorrectLength = item.json.zipcode ? item.json.zipcode.length !== 8 : true;\n  const zipcodeIsNotANumber = isNaN(item.json.zipcode)\n  \n  if(zipcodeIsNull || zipcodeHasIncorrectLength || zipcodeIsNotANumber){\n    item.json.zipcode = \"not_found\";\n  }\n  \n}\n\nreturn $input.all();"
        },
        "id": "5120a6cc-a07f-489e-a748-17f22d8b6dbe",
        "name": "Normalize city and zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3360,
          900
        ]
      },
      {
        "parameters": {
          "jsCode": "const output = [];\n\nfor (const item of $input.all()) {\n\n  if(item.json.city){\n    \n    const normalizedName = item.json.city\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \") \n    .replace(/ *\\([^)]*\\) */g, \"\")\n    .toUpperCase();\n  \n    output.push(\n      {\n        zipcode: item.json.cep,\n        city: normalizedName,\n        state: item.json.state\n      } \n    )\n    \n  }\n}\n\nreturn output;"
        },
        "id": "cf076c94-3a8e-4de6-b4c6-8cdd4fba831d",
        "name": "Standardize found cities",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          4180,
          1780
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  if(item.json.city === \"IPIABAS\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"SAO JOSE DO TURVO\" && item.json.state === \"RJ\"){\n    item.json.city = \"BARRA DO PIRAI\";\n  }\n  if(item.json.city === \"CAETE-ACU\" && item.json.state === \"BA\"){\n    item.json.city = \"PALMEIRAS\";\n  }\n  if(item.json.city === \"MORAES ALMEIDA\" && item.json.state === \"PA\"){\n    item.json.city = \"ITAITUBA\";\n  }\n  \n}\n\n\nreturn $input.all();"
        },
        "id": "8e752a47-9ec8-40a2-8147-104b270ce982",
        "name": "Handle corner cases",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          4380,
          1780
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  const newItem = {\n    zipcode: item.json.zipcode\n  }\n  \n  if(!output.includes(newItem)){\n    output.push(newItem)   \n  }\n}\n\nreturn output;"
        },
        "id": "a9cba2e1-e7d9-4ea8-bca9-6eca15c5070b",
        "name": "Select distinct zipcodes",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3760,
          1780
        ]
      },
      {
        "parameters": {
          "url": "=https://brasilapi.com.br/api/cep/v1/{{$json[\"zipcode\"]}}",
          "options": {
            "batching": {
              "batch": {
                "batchSize": 20
              }
            },
            "response": {
              "response": {
                "neverError": true
              }
            }
          }
        },
        "id": "ab50c211-e012-4490-bb59-c9806e25328d",
        "name": "Fetch city from zipcode",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          3980,
          1780
        ],
        "executeOnce": false
      },
      {
        "parameters": {},
        "id": "c8199ff9-6015-442c-9308-170ccc83799a",
        "name": "Volunteer with correct city + volunteers with invalid zipcode",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3960,
          900
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zipcode",
                "field2": "zipcode"
              }
            ]
          },
          "options": {
            "multipleMatches": "first"
          }
        },
        "id": "97d8fdfc-3160-4741-a048-093ebe38e46c",
        "name": "Volunteers with new cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4800,
          1500
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zipcode",
                "field2": "zipcode"
              }
            ]
          },
          "joinMode": "keepNonMatches",
          "outputDataFrom": "input1",
          "options": {}
        },
        "id": "da6417f8-3b15-4304-a911-97b1a202f9f0",
        "name": "Volunteers with not found cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          4780,
          1760
        ]
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.city = \"not_found\";\n  item.json.state = \"not_found\";\n}\n\nreturn $input.all();"
        },
        "id": "c3c4000d-70a7-49e5-abe2-c01c95cf246f",
        "name": "Add NOT_FOUND city and state",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          5020,
          1760
        ]
      },
      {
        "parameters": {},
        "id": "adb248aa-67b1-4610-83e6-1e84c7850177",
        "name": "Volunteers after Brasil API",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          5280,
          1520
        ]
      },
      {
        "parameters": {},
        "id": "3ca0d7ce-4790-4026-88e8-2598aea8276a",
        "name": "All volunteers with correct cities",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          5640,
          920
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zendesk_user_id",
                "field2": "zendesk_user_id"
              }
            ]
          },
          "joinMode": "enrichInput1",
          "options": {}
        },
        "id": "36a9be08-0a73-40b8-8d53-a2cd16924bea",
        "name": "Volunteers with lat long",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          2980,
          2480
        ]
      },
      {
        "parameters": {
          "mode": "combine",
          "mergeByFields": {
            "values": [
              {
                "field1": "zendesk_user_id",
                "field2": "zendesk_user_id"
              }
            ]
          },
          "joinMode": "enrichInput1",
          "options": {}
        },
        "id": "e980e52f-6bbb-45ef-bf7a-ce35339ddc8c",
        "name": "All volunteers",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          6780,
          1980
        ]
      },
      {
        "parameters": {
          "table": "volunteers",
          "columns": "zendesk_user_id, form_entries_id, created_at, updated_at, first_name, last_name, email, phone, neighborhood, birth_date, register_number, color, gender, modality, fields_of_work, years_of_experience, availability, approach, form_data_id, occupation, moodle_id, latitude, longitude, zipcode, city, state, condition, offers_libras_support",
          "additionalFields": {}
        },
        "id": "89028c78-4be9-4778-ace4-8a243de0bdc0",
        "name": "Insert into volunteers",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          7080,
          1980
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    user_id AS zendesk_user_id,\n    external_id AS form_entries_id,\n    COALESCE(created_at, NOW()) AS created_at,\n    COALESCE(updated_at, NOW()) AS updated_at,\n    condition AS old_condition,\n    CASE \n      WHEN name = 'sem nome'  THEN 'not_found'\n      WHEN name = 'X'  THEN 'not_found'\n      WHEN name IS NULL  THEN 'not_found'\n      ELSE INITCAP(SUBSTR(BTRIM(name), 1, STRPOS(BTRIM(name), ' ')))\n    END AS first_name,\n    CASE \n      WHEN name = 'sem nome'  THEN 'not_found'\n      WHEN name = 'X'  THEN 'not_found'\n      WHEN name IS NULL  THEN 'not_found'\n      ELSE INITCAP(SUBSTR(BTRIM(name), (STRPOS(BTRIM(name), ' ') + 1)))\n    END AS last_name,\n    COALESCE(email, 'not_found') AS email,\n    COALESCE(BTRIM(phone), BTRIM(whatsapp), 'not_found') AS phone,\n    'not_found' AS neighborhood,\n    TO_TIMESTAMP(0)::DATE AS birth_date,\n    COALESCE(registration_number, 'not_found') AS register_number,\n    CASE \n      WHEN cor = 'amarela'  THEN 'yellow'\n      WHEN cor = 'branca'  THEN 'white'\n      WHEN cor = 'indigena'  THEN 'indigenous'\n      WHEN cor = 'parda'  THEN 'brown'\n      WHEN cor = 'preta'  THEN 'black'\n      ELSE 'not_found'\n    END AS color,\n    'not_found' AS gender, \n    CASE \n      WHEN email = 'magacrema@hotmail.com'  THEN 'on_site'\n      ELSE 'both'\n    END AS modality,\n    'not_found' AS fields_of_work,\n    'not_found' AS years_of_experience,\n    CASE \n      WHEN BTRIM(disponibilidade_de_atendimentos) = '1' THEN 1\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '2' THEN 2\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '3' THEN 3\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '4' THEN 3\n      WHEN BTRIM(disponibilidade_de_atendimentos) = '5' OR BTRIM(disponibilidade_de_atendimentos) = '5_ou_mais' THEN 3\n      ELSE 1\n    END AS availability,\n    'not_found' AS approach,\n    NULL AS form_data_id,\n    CASE \n      WHEN organization_id = 360269610652 THEN 'lawyer'\n      ELSE 'psychologist'\n    END AS occupation,\n    NULL AS moodle_id,\n    FALSE AS offers_libras_support,\n    COALESCE(condition, 'not_found') AS condition\nFROM public.solidarity_users \nWHERE \n    organization_id IN (360269610652, 360282119532)\n",
          "additionalFields": {}
        },
        "id": "39341153-7003-4971-a5c9-3311c1a3032a",
        "name": "Fetch volunteers",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2260,
          2460
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n    user_id AS zendesk_user_id,\n    latitude,\n    longitude  \nFROM public.solidarity_users \nWHERE \n    organization_id IN (360269610652, 360282119532)\n",
          "additionalFields": {}
        },
        "id": "45f28a94-2f50-47b7-8742-3a1793cfcefd",
        "name": "Fetches lat long",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          2260,
          2780
        ],
        "credentials": {
          "postgres": {
            "id": "GPnWI2OL5IjBv3zm",
            "name": "[PROD] Bonde"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"state\"]}}",
                "value2": "INT"
              },
              {
                "value1": "={{$json[\"city\"]}}",
                "value2": "INTERNACIONAL"
              }
            ]
          }
        },
        "id": "d52e95a1-b06c-44a0-8f73-b9aa9a7f2a5d",
        "name": "Is international?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          2620,
          860
        ]
      },
      {
        "parameters": {
          "jsCode": "let output = [];\n\nfor (const item of $input.all()) {\n  item.json.zipcode = \"not_found\";\n  \n}\n\nreturn $input.all();"
        },
        "id": "840bcd04-1f5e-4042-8534-d211eb668d4a",
        "name": "Adds not_found zipcode",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          3360,
          560
        ]
      },
      {
        "parameters": {},
        "id": "1852cb29-cb9a-4b65-96d1-91d3b482ae0b",
        "name": "Volunteers with international city + valid city",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2,
        "position": [
          3680,
          580
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch volunteers with zipcode, city and state",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch cities",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch volunteers",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetches lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch cities": {
        "main": [
          [
            {
              "node": "Volunteers with valid city",
              "type": "main",
              "index": 1
            },
            {
              "node": "Volunteers with invalid city",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Fetch volunteers with zipcode, city and state": {
        "main": [
          [
            {
              "node": "Is international?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle invalid lat long1": {
        "main": [
          [
            {
              "node": "Volunteers with lat long",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers with valid city": {
        "main": [
          [
            {
              "node": "Normalize city and zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with invalid city": {
        "main": [
          [
            {
              "node": "Volunteers with invalid zipcode",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers with valid zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with invalid zipcode": {
        "main": [
          [
            {
              "node": "Volunteer with correct city + volunteers with invalid zipcode",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers with valid zipcode": {
        "main": [
          [
            {
              "node": "Select distinct zipcodes",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers with new cities",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers with not found cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Normalize city and zipcode": {
        "main": [
          [
            {
              "node": "Volunteers with international city + valid city",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Standardize found cities": {
        "main": [
          [
            {
              "node": "Handle corner cases",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle corner cases": {
        "main": [
          [
            {
              "node": "Volunteers with new cities",
              "type": "main",
              "index": 1
            },
            {
              "node": "Volunteers with not found cities",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Select distinct zipcodes": {
        "main": [
          [
            {
              "node": "Fetch city from zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch city from zipcode": {
        "main": [
          [
            {
              "node": "Standardize found cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteer with correct city + volunteers with invalid zipcode": {
        "main": [
          [
            {
              "node": "All volunteers with correct cities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with new cities": {
        "main": [
          [
            {
              "node": "Volunteers after Brasil API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with not found cities": {
        "main": [
          [
            {
              "node": "Add NOT_FOUND city and state",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add NOT_FOUND city and state": {
        "main": [
          [
            {
              "node": "Volunteers after Brasil API",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers after Brasil API": {
        "main": [
          [
            {
              "node": "All volunteers with correct cities",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteers with lat long": {
        "main": [
          [
            {
              "node": "All volunteers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "All volunteers with correct cities": {
        "main": [
          [
            {
              "node": "All volunteers",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Fetch volunteers": {
        "main": [
          [
            {
              "node": "Volunteers with lat long",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetches lat long": {
        "main": [
          [
            {
              "node": "Handle invalid lat long1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is international?": {
        "main": [
          [
            {
              "node": "Adds not_found zipcode",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Volunteers with valid city",
              "type": "main",
              "index": 0
            },
            {
              "node": "Volunteers with invalid city",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adds not_found zipcode": {
        "main": [
          [
            {
              "node": "Volunteers with international city + valid city",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Volunteers with international city + valid city": {
        "main": [
          [
            {
              "node": "Volunteer with correct city + volunteers with invalid zipcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "All volunteers": {
        "main": [
          [
            {
              "node": "Insert into volunteers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "fa7b9097-1e2d-4f97-a438-6abf1a9e057c",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:26:04.822Z",
    "updatedAt": "2024-01-16T21:26:24.000Z",
    "id": "oteYNsg68ah16680",
    "name": "[Database pipeline] cities STG",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "708bf892-8cba-4156-a2ac-2bfcdefaf146",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -920,
          480
        ]
      },
      {
        "parameters": {
          "batchSize": 1,
          "options": {}
        },
        "id": "574cfff0-84c2-4d35-a404-e266183251b0",
        "name": "Loop over states",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          -460,
          480
        ]
      },
      {
        "parameters": {
          "url": "https://brasilapi.com.br/api/ibge/uf/v1",
          "options": {}
        },
        "id": "932b1717-5b89-40ba-a31b-acc02afa2810",
        "name": "Fetch all states from Brasil API",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          -700,
          480
        ]
      },
      {
        "parameters": {
          "url": "=https://brasilapi.com.br/api/ibge/municipios/v1/{{$json[\"sigla\"]}}?providers=gov",
          "options": {}
        },
        "id": "60575e07-adb3-4b66-928d-89c5f7b3ee58",
        "name": "Fetch all cities from that state",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          -260,
          480
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Add a new field called 'myNewField' to the\n// JSON of the item\n$input.item.json.state = $('Loop over states').item.json.sigla;\n\nreturn $input.item;"
        },
        "id": "9f6ff238-cef6-42c3-9782-a729dc2bf38d",
        "name": "Set city state",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -40,
          480
        ]
      },
      {
        "parameters": {
          "jsCode": "let results = [],\n  i = 0;\n\ndo {\n  try {\n    results = results.concat($('Set city state').all(0, i));\n  } catch (error) {\n    return results;\n  }\n  i++;\n} while (true);"
        },
        "id": "e5569342-fdc7-4b5b-b4cf-d2a92d281deb",
        "name": "Union all cities in one table",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const cityValue = item.json.city_label\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(\"'\", \" \")\n    .replace(/ *\\([^)]*\\) */g, \"\");\n\n\n  const cityLabel = item.json.city_label\n    .replace(/ *\\([^)]*\\) */g, \"\");\n    \n  item.json.city_value = cityValue;\n  item.json.city_label = cityLabel;\n}\n\nreturn $input.all();"
        },
        "id": "51b3a094-b749-4e23-bb31-08da76d7897a",
        "name": "Standardize city names",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          880,
          460
        ]
      },
      {
        "parameters": {
          "keys": {
            "key": [
              {
                "currentKey": "nome",
                "newKey": "city_label"
              },
              {
                "currentKey": "codigo_ibge",
                "newKey": "ibge_code"
              }
            ]
          },
          "additionalOptions": {}
        },
        "id": "4f21c691-3791-4aa7-a6e7-803f92e0cc17",
        "name": "Rename Keys",
        "type": "n8n-nodes-base.renameKeys",
        "typeVersion": 1,
        "position": [
          640,
          460
        ]
      },
      {
        "parameters": {
          "conditions": {
            "boolean": [
              {
                "value1": "={{$node[\"Loop over states\"].context[\"noItemsLeft\"]}}",
                "value2": true
              }
            ]
          }
        },
        "id": "33f6811d-33d8-4533-a81a-3cf67bf1228e",
        "name": "Done looping over states?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          180,
          480
        ]
      },
      {
        "parameters": {
          "table": "cities",
          "columns": "state, city_label, ibge_code, city_value, created_at, updated_at",
          "additionalFields": {}
        },
        "id": "354539ee-9cdd-4742-b3e9-176ad51ecdc0",
        "name": "Insert in cities table",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1380,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "for (const item of $input.all()) {\n  item.json.created_at = $now;\n  item.json.updated_at = $now;\n}\n\nreturn $input.all();"
        },
        "id": "86def480-3113-467c-894c-d4e575c49bef",
        "name": "Add timestamp",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1100,
          460
        ]
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch all states from Brasil API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop over states": {
        "main": [
          [
            {
              "node": "Fetch all cities from that state",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch all states from Brasil API": {
        "main": [
          [
            {
              "node": "Loop over states",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch all cities from that state": {
        "main": [
          [
            {
              "node": "Set city state",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set city state": {
        "main": [
          [
            {
              "node": "Done looping over states?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Union all cities in one table": {
        "main": [
          [
            {
              "node": "Rename Keys",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Standardize city names": {
        "main": [
          [
            {
              "node": "Add timestamp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Done looping over states?": {
        "main": [
          [
            {
              "node": "Union all cities in one table",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Loop over states",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Rename Keys": {
        "main": [
          [
            {
              "node": "Standardize city names",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add timestamp": {
        "main": [
          [
            {
              "node": "Insert in cities table",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "a11c96c3-af3d-40e3-bf30-7141880a1f24",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-01-24T01:59:41.930Z",
    "updatedAt": "2024-02-08T14:31:36.000Z",
    "id": "q3o7eGMyyUed4akh",
    "name": "[PROD] E-mail após conclusão do primeiro módulo",
    "active": true,
    "nodes": [
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "loose"
            },
            "conditions": [
              {
                "id": "16c257bd-ca21-4fcf-afd9-58654a5a9ec8",
                "leftValue": "={{ $json.body.objectid }}",
                "rightValue": "=8",
                "operator": {
                  "type": "number",
                  "operation": "equals"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {
            "looseTypeValidation": true
          }
        },
        "id": "812a178d-5e08-40e7-8355-dc295543821b",
        "name": "É a última página do Módulo 1?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          820,
          320
        ]
      },
      {
        "parameters": {
          "operation": "select",
          "schema": {
            "__rl": true,
            "value": "public",
            "mode": "name"
          },
          "table": {
            "__rl": true,
            "value": "mdl_user",
            "mode": "list",
            "cachedResultName": "mdl_user"
          },
          "limit": 1,
          "where": {
            "values": [
              {
                "column": "id",
                "value": "={{ $json.body.userid }}"
              }
            ]
          },
          "options": {
            "outputColumns": [
              "email",
              "firstname"
            ]
          }
        },
        "id": "fd7df7dd-8a85-4ca0-955d-85662e594edb",
        "name": "Busca e-mail e primeiro nome da voluntária",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 2.3,
        "position": [
          1160,
          300
        ],
        "credentials": {
          "postgres": {
            "id": "KHoy20BFgrBIpHYR",
            "name": "[PROD] Moodle"
          }
        }
      },
      {
        "parameters": {
          "resource": "mail",
          "fromEmail": "voluntaria@mapadoacolhimento.org",
          "fromName": "Equipe do Mapa do Acolhimento",
          "toEmail": "={{ $json.email }}",
          "dynamicTemplate": true,
          "templateId": "=d-4f40a08545264aa49991ca33141c8e95",
          "dynamicTemplateFields": {
            "fields": [
              {
                "key": "name",
                "value": "={{ $json.firstname }}"
              }
            ]
          },
          "additionalFields": {}
        },
        "id": "aa86b3a1-67f2-4624-a987-7932643f84e7",
        "name": "SendGrid",
        "type": "n8n-nodes-base.sendGrid",
        "typeVersion": 1,
        "position": [
          1380,
          300
        ],
        "credentials": {
          "sendGridApi": {
            "id": "ewMQAncI0Om7E6AW",
            "name": "SendGrid account"
          }
        }
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "moodle-page-view",
          "options": {}
        },
        "id": "d42d33f9-0536-4884-a38c-fd408ae504f1",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          600,
          320
        ],
        "webhookId": "3e06675f-aa55-42cd-bfa1-be979b64b575"
      }
    ],
    "connections": {
      "É a última página do Módulo 1?": {
        "main": [
          [
            {
              "node": "Busca e-mail e primeiro nome da voluntária",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Busca e-mail e primeiro nome da voluntária": {
        "main": [
          [
            {
              "node": "SendGrid",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "É a última página do Módulo 1?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "1fed7812-8a5f-49d3-ac16-5d0e3fc6d314",
    "triggerCount": 1,
    "tags": []
  },
  {
    "createdAt": "2024-01-16T20:56:18.812Z",
    "updatedAt": "2024-02-08T13:46:53.000Z",
    "id": "qft2iaTtaPC1yHv2",
    "name": "[Zendesk Integration] update support_request PROD",
    "active": true,
    "nodes": [
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "update-support-request",
          "options": {}
        },
        "id": "b3c75cff-3f83-44d4-bed2-9fe41619136b",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -520,
          480
        ],
        "webhookId": "79aa3f88-502d-4171-aca9-040b24e9b319",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const zendesk_ticket_id = item.json.body.id;\n  let status;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  const tags = item.json.body.tags\n  \n\n  if(item.json.body.status_acolhimento === \"solicitação_recebida\" && tags.includes(\"nova-voluntaria-com-prioridade\")){\n     \n    status = \"special_case\";\n  \n  }\n  else {\n    const status_lookup = {\n      \"solicitação_recebida\": \"open\",\n      \"encaminhamento__realizado_para_serviço_público\": \"public_service\",\n      \"encaminhamento__realizado\": \"matched\",\n      \"encaminhamento__assistente_social\": \"social_worker\",\n      \"encaminhamento__servico_publico_com_assistente_social\": \"public_service_with_social_worker\"\n    }\n\n    status = status_lookup[status_acolhimento]\n    \n  }\n\n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"status\": status\n  }\n  output.push(newItem)\n}\n\nreturn output;"
        },
        "id": "f7435282-4a55-4611-8570-8b50e068994b",
        "name": "Extracts zendesk_ticket_id and support_request_status",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -300,
          480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT \n\tsupport_request_id, \n\tstatus AS current_status,\n    '{{$json[\"status\"]}}' AS new_status\nFROM match.support_requests\nWHERE zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nLIMIT 1",
          "additionalFields": {}
        },
        "id": "b6956cda-4c10-4b65-9bc1-0d88c9714b89",
        "name": "Fetch support_request_id and status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -60,
          480
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"current_status\"]}}",
                "operation": "notEqual",
                "value2": "={{$json[\"new_status\"]}}"
              }
            ]
          }
        },
        "id": "36b12d8d-e9c0-436a-8f29-46bfe9054efc",
        "name": "Is it a new status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          160,
          480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE match.support_requests\nSET status = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE support_request_id = {{$json[\"support_request_id\"]}};\n\nINSERT INTO match.support_request_status_history (support_request_id, status, created_at)\nVALUES ({{$json[\"support_request_id\"]}}, '{{$json[\"new_status\"]}}', NOW());",
          "additionalFields": {}
        },
        "id": "5dafbdec-1249-45b8-91fe-42d363de20f7",
        "name": "Update support_request status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Mapa"
          }
        }
      },
      {
        "parameters": {},
        "id": "aa9d02d9-7b05-44c1-ad3c-552f4133b67a",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          460,
          700
        ]
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Extracts zendesk_ticket_id and support_request_status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extracts zendesk_ticket_id and support_request_status": {
        "main": [
          [
            {
              "node": "Fetch support_request_id and status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch support_request_id and status": {
        "main": [
          [
            {
              "node": "Is it a new status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is it a new status?": {
        "main": [
          [
            {
              "node": "Update support_request status",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "5c4be5bc-4118-4939-980c-4a2e03c4c961",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:03:02.239Z",
    "updatedAt": "2024-02-08T14:32:07.000Z",
    "id": "s5EbOza9QYHBWW8G",
    "name": "[Zendesk Integration] Expira matches PROD",
    "active": true,
    "nodes": [
      {
        "parameters": {
          "rule": {
            "interval": [
              {
                "triggerAtHour": 10
              }
            ]
          }
        },
        "id": "862d6870-3629-4d34-bdce-cec436bf9cf6",
        "name": "Schedule Trigger",
        "type": "n8n-nodes-base.scheduleTrigger",
        "typeVersion": 1,
        "position": [
          -80,
          700
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   match_id,\n   msr_id,\n   msr_zendesk_ticket_id,\n   volunteer_id,\n   volunteer_zendesk_ticket_id\nFROM match.matches\nWHERE\n   status = 'waiting_contact'\n   AND created_at < CURRENT_DATE - INTERVAL '30 DAY'",
          "additionalFields": {}
        },
        "id": "462319fb-6982-4d8e-83f7-2935c000f625",
        "name": "Fetch matches that should be expired today",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          280,
          700
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "update",
          "id": "={{$json[\"msr_zendesk_ticket_id\"]}}",
          "updateFields": {
            "customFieldsUi": {
              "customFieldsValues": [
                {
                  "id": 360014379412,
                  "value": "encaminhamento__expirado"
                }
              ]
            },
            "publicReply": "Olá, {{ticket.requester.first_name}}!\n\nEspero que esteja bem na medida do possível.\n\nEstamos aqui para informá-la que hoje completam 30 dias do seu encaminhamento. Dessa forma, como não recebemos uma devolutiva acerca do início do atendimento entre você e a profissional indicada, sua vaga será liberada para uma outra mulher que necessite de ajuda.\n\nCaso, em algum outro momento, você deseje novamente receber nossa ajuda, é só escrever para o atendimento@mapadoacolhimento.org que te encaminharemos o contato de uma outra profissional disponível ou do serviço público mais próximo.\n\nConte conosco e nos escreva em caso de dúvidas. Estamos aqui para ajudá-la no que for possível <3.\n\nForte abraço,\nEquipe do Mapa do Acolhimento"
          }
        },
        "id": "87ec2ae9-ca8a-4e14-9db9-e8319b07e742",
        "name": "Update MSR Zendesk ticket",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          600,
          960
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "operation": "update",
          "id": "={{$json[\"volunteer_zendesk_ticket_id\"]}}",
          "updateFields": {
            "customFieldsUi": {
              "customFieldsValues": [
                {
                  "id": 360014379412,
                  "value": "encaminhamento__expirado"
                }
              ]
            },
            "publicReply": "Olá, {{ticket.requester.first_name}}! Esperamos que você esteja bem! \n\nEstamos aqui para informá-la que hoje completam 30 dias desde o encaminhamento da {{ticket.ticket_field_360016681971}} mulher que precisa de ajuda. Dessa forma, como não recebemos uma devolutiva acerca do início do atendimento entre você e ela, estamos liberando sua vaga para um novo pedido de ajuda.\n\nNo entanto, se a {{ticket.ticket_field_360016681971}} te contactar, mesmo depois do tempo previsto, pedimos por favor que nos avise por e-mail ou por WhatsApp. Assim, poderemos garantir que ela receba o apoio que precisa e atualizar a sua disponibilidade no nosso sistema.\n\nVocê é parte essencial da nossa rede de apoio <3. Qualquer dúvida nos escreva.\n\nAbraços,\nEquipe do Mapa do Acolhimento"
          }
        },
        "id": "a6cff155-4ea3-4907-9cdc-e55504be704e",
        "name": "Update Volunteer Zendesk ticket",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          600,
          1220
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE match.matches\nSET status = 'expired', updated_at = NOW()\nWHERE match_id = {{$json[\"match_id\"]}};\n\nINSERT INTO match.match_status_history (match_id, status, created_at)\nVALUES ({{$json[\"match_id\"]}}, 'expired', NOW());",
          "additionalFields": {}
        },
        "id": "c91c6ff6-8d4d-43d2-bbf4-5218c23ea7fd",
        "name": "Expire match in database",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          600,
          700
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT\n   volunteer_id,\n   zendesk_user_id, \n   current_matches,\n   max_matches,  \n   is_available,\n   condition\nFROM public.volunteer_availability\nLEFT JOIN public.volunteers ON volunteer_id = id\nWHERE volunteer_id = \t{{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "a88b3694-1951-40b6-b4a7-e7dbad96e6bd",
        "name": "Fetch previous volunteer_availability and volunteer_status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          600,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"condition\"]}}",
                "value2": "indisponivel_sem_vagas"
              }
            ]
          }
        },
        "id": "8ac7980f-e8b7-4f57-b32e-9a0c52bf24b6",
        "name": "Should update volunteer status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          800,
          460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteers\nSET condition = 'disponivel', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'disponivel', NOW());\n\nUPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), is_available = TRUE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "e3db0a4c-fc0c-4583-9332-462d879d0dda",
        "name": "Update volunteer_availability and volunteer status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1080,
          440
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "resource": "user",
          "operation": "update",
          "id": "={{$json[\"zendesk_user_id\"]}}",
          "updateFields": {
            "userFieldsUi": {
              "userFieldValues": [
                {
                  "field": "condition",
                  "value": "Disponível"
                }
              ]
            }
          }
        },
        "id": "b1494b06-75aa-42fb-b710-c28bb21f7692",
        "name": "Update zendesk Status da Mulher",
        "type": "n8n-nodes-base.zendesk",
        "typeVersion": 1,
        "position": [
          1080,
          200
        ],
        "credentials": {
          "zendeskApi": {
            "id": "MYAFeR51noxrxEC7",
            "name": "Zendesk account"
          }
        }
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
          "additionalFields": {}
        },
        "id": "220bdcee-72bf-4376-ab9f-1365b162ee32",
        "name": "Update current_matches",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1080,
          680
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      }
    ],
    "connections": {
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Fetch matches that should be expired today",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch matches that should be expired today": {
        "main": [
          [
            {
              "node": "Expire match in database",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update MSR Zendesk ticket",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update Volunteer Zendesk ticket",
              "type": "main",
              "index": 0
            },
            {
              "node": "Fetch previous volunteer_availability and volunteer_status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should update volunteer status?": {
        "main": [
          [
            {
              "node": "Update volunteer_availability and volunteer status",
              "type": "main",
              "index": 0
            },
            {
              "node": "Update zendesk Status da Mulher",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Update current_matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch previous volunteer_availability and volunteer_status": {
        "main": [
          [
            {
              "node": "Should update volunteer status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": {
      "node:Schedule Trigger": {
        "recurrencyRules": []
      }
    },
    "meta": null,
    "pinData": {},
    "versionId": "d7a55d36-eac9-412f-bb03-1b57c9d9cd7f",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-02-05T20:09:54.143Z",
    "updatedAt": "2024-02-08T14:30:20.000Z",
    "id": "wlZG3ghHkaISWjxc",
    "name": "[MauticxZendesk] Formularios de acompanhamento",
    "active": true,
    "nodes": [
      {
        "parameters": {},
        "id": "fd9d74de-a919-43fd-a6b3-23c728bd01bd",
        "name": "Start",
        "type": "n8n-nodes-base.start",
        "typeVersion": 1,
        "position": [
          -40,
          500
        ]
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "mda-form-acompanhamento",
          "options": {}
        },
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -280,
          740
        ],
        "webhookId": "bafce6f3-5db2-4b48-bff3-5171c77e4e39",
        "id": "f32c6cd2-0651-4902-a968-72d1ee4224e4"
      },
      {
        "parameters": {
          "value1": "={{$node[\"Item Lists\"].json[\"submission\"][\"form\"][\"id\"]}}",
          "rules": {
            "rules": [
              {
                "operation": "equal",
                "value2": 26,
                "output": 1
              },
              {
                "operation": "equal",
                "value2": 24
              },
              {
                "operation": "equal",
                "value2": 27,
                "output": 3
              },
              {
                "operation": "equal",
                "value2": 28,
                "output": 2
              }
            ]
          }
        },
        "name": "Switch",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 1,
        "position": [
          140,
          740
        ],
        "id": "06b08b18-0ed3-45db-a4aa-c973b8a00a5d"
      },
      {
        "parameters": {
          "fieldToSplitOut": "[\"body\"][\"mautic.form_on_submit\"]",
          "options": {}
        },
        "name": "Item Lists",
        "type": "n8n-nodes-base.itemLists",
        "typeVersion": 1,
        "position": [
          -60,
          740
        ],
        "id": "1368164a-20bc-4be5-b5cd-f8bcd8198a0a"
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\ninsert_mda_forms_answers(objects: {answers: $answers, form: \"acompanhamento-juridico-1\", msr_name: \"{{$node[\"Formata - Acomp Juridico 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (acomp juridico 1)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Acomp Juridico 1\"].json[\"answers\"][\"dados_voluntaria\"][\"email_cadastro\"]}}\",organization_id:360269610652, form_id:{{$node[\"Webhook\"].json[\"body\"][\"mautic.form_on_submit\"][0][\"submission\"][\"form\"][\"id\"]}}\n}) {\naffected_rows\n}\n}",
          "variables": "={\n\"answers\": {{$node[\"Formata - Acomp Juridico 1\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          860,
          700
        ],
        "id": "128901f3-eb49-4aed-aca6-c57a260f4572",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nlet risco = 'nenhum';\nlet priority = 'low';\nfor (item of items) {\n\n  const results =  item.json.submission.results; \n  dados_voluntaria = {\n\t\tnome: results[\"1_nome_completo\"],\n\t\temail_cadastro: results[\"2_email_de_cadastro\"]\n\t}\n\tlet dados_acolhida = {\n\t\tnome: results[\"3_nome_da_acolhida\"],\n\t}\n\n\tlet contrato = {\n\t\tacolhida_respeita_contrato: results[\"4_a_acolhida_respeita_o_c\"],\n\t\tfrequencia_atendimento_fora_do_horario: results['41_com_qual_frequencia_te'],\n\t\tfrequencia_de_atendimento: results[\"5_quantas_horas_de_atendi\"],\n\t}\n\n\tlet acompanhamento_juridico = {\n\t\tfoi_submetida_novas_violencias: results[\"6_a_acolhida_foi_submetid\"], \n\t\tcomentario_sobre_novas_violencias: results[\"71_caso_queira_comentar_s\"],\n\t\ttipo_atendimento: results[\"8_qual_esta_sendo_o_tipo1\"],\n\t\tquantos_processos: results[\"9__caso_esteja_em_acompan\"],\n\t\trepresentando_civel_familia: results[\"civelfamilia\"],\n\t\trepresentando_criminal: results[\"criminal\"],\n\t\trepresentando_trabalhista: results[\"trabalhista\"],\n\t\trepresentando_digital: results[\"digital\"],\n\t\tacompanhando_civel_familia: results[\"civelfamilia1\"],\n\t\tacompanhando_penal: results[\"penal\"],\n\t\tmedida_protetiva_informada: results[\"12_caso_a_acolhida_ja_ten\"],\n\t\tfixaxao_guarda_provisoria: results[\"13_caso_voce_esteja_acomp\"],\n\t\tpara_quem_foi_fixada_guarda: results[\"13_para_quem_a_guarda_foi\"],\n\t\tqual_regime_da_guarda: results[\"13_em_qual_regime\"],\n\t\targumento_sentenca: results[\"14_caso_a_sentenca_profer\"],\n\t\talguma_das_partes_recorreu: results[\"15_alguma_das_partes_reco\"],\n\t\treferenciou_para_servico_publico: results[\"16_durante_o_atendimento\"],\n\t\tpor_que_servico_publico: results[\"16_por_que\"],\n\t\tquais_instituicoes: results[\"16_qualis\"],\n\t}\n\t\n\tlet aspectos_socioeconomicos = {\n\t\tapresenta_condicao_hipossuficiencia: results[\"17_a_acolhida_ainda_apres\"],\n\t\tmotivo_nao_condicao_hipossuficiencia: results[\"171_informe_aqui_os_motiv\"]\n\t}\n\t\n\tlet redes_apoio = {\n\t\tgrupos_comunitarios_religiosos: results[\"18_a_acolhida_participa_e\"],\n\t\tapoio_pessoas_proximas: results[\"19_a_acolhida_tem_apoio_d\"],\n\t\trelacao_familiares_acolhida: results[\"20_como_e_a_relacao_da_ac\"],\n\t\trelacao_familiares_autor_violencia: results[\"21_como_e_a_relacao_da_ac\"]\n\t}\n\n\tlet doencas_fisicas = {\n\t\tresultante_da_violencia: results[\"22_a_acolhida_tem_algum_d\"],\n\t\tquais: results[\"22_qualis1\"],\n\t\tquanto_tempo: results[\"22_ha_quanto_tempo\"],\n\t\tfaz_acompanhamento_medico: results[\"23_se_sim_a_acolhida_faz\"],\n\t\tonde_faz_acompanhamento_medico: results[\"23_onde\"],\n\t\tquanto_tempo_acompanhamento: results[\"23_ha_quanto_tempo\"],\n\t\tfaz_uso_medicamentos: results[\"24_se_sim_a_acolhida_faz\"],\n\t\tquais_medicamentos: results[\"24_qualis\"],\n\t\tquanto_tempo_medicamentos: results[\"242_ha_quanto_tempo\"],\n\t\trecebe_bpc: results[\"25_caso_seja_pessoa_com_d\"]\n\t}\n\n\tlet doencas_psiquiatricas = {\n\t\tresultante_da_violencia: results[\"26_a_acolhida_tem_algum_d\"],\n\t\tquais: results[\"26_quais\"],\n\t\tquanto_tempo: results[\"26_ha_quanto_tempo\"],\n\t\tfaz_acompanhamento_medico: results[\"27__se_sim_a_acolhida_faz\"],\n\t\tonde_faz_acompanhamento_medico: results[\"27_onde\"],\n\t\tquanto_tempo_acompanhamento: results[\"27_ha_quanto_tempo\"],\n\t\tfaz_uso_medicamentos: results[\"28_se_sim_a_acolhida_faz\"],\n\t\tquais_medicamentos: results[\"28_quais\"],\n\t\tquanto_tempo_medicamento: results[\"28_ha_quanto_tempo\"],\n\t}\n\n\tlet dependencia_quimica = {\n\t\tusa_substancias_por_conta_da_violencia: results[\"29__a_acolhida_faz_uso_de\"],\n\t\tquais: results[\"29_quais\"],\n\t\tquanto_tempo: results[\"29_ha_quanto_tempo\"],\n\t\tassistida_por_algum_serivico: results[\"30_se_sim_a_acolhida_e_as\"],\n\t\tonde: results[\"30_onde\"],\n\t\tquanto_tempo_atendimento: results[\"30_ha_quanto_tempo\"],\n\t}\n\n\tlet advogada_voluntaria = {\n\t\ttem_contato_psicologa: results[\"31_caso_a_acolhida_esteja\"],\n\t\tsolicitou_ajuda_mapa: results[\"32_voce_solicitou_ajuda_d\"],\n\t\tse_sentiu_orientada: results[\"32_sentiuse_orientada\"],\n\t\tse_sentiu_acolhida: results[\"32_sentiuse_acolhida_pela\"],\n\t\tparticipa_grupo_discussao: \tresults[\"33__voce_participa_dos_en\"],\n\t\tparticipa_grupo_whatsapp_estado:results[\"34_voce_participa_do_grup\"],\n\t\tcomo_se_sente_atendimento: results[\"35_se_desejar_relate_como\"]\n\t}\n\n\tif (contrato.acolhida_respeita_contrato === 'Não' || \n\t    contrato.frequencia_de_atendimento === 'Mais de 5h'||\n\t\t\tacompanhamento_juridico.referenciou_para_servico_publico === 'Sim' ||\n\t\t\tredes_apoio.relacao_familiares_acolhida !== 'Boa' ||\n\t\t\tdoencas_fisicas.recebe_bpc === 'Não' ||\n\t\t\tdependencia_quimica.assistida_por_algum_serivico == 'Não') {\n\t\tpriority = 'normal'\n\t\trisco = 'moderado'\n\t}\n\n\tif (redes_apoio.apoio_pessoas_proximas === 'Não' ||\n\t    doencas_fisicas.resultante_da_violencia === 'Sim' ||\n\t\t\tdoencas_psiquiatricas.resultante_da_violencia === 'Sim' ||\n\t\t\tdoencas_psiquiatricas.faz_acompanhamento_medico == 'Não' ||\n\t\t\tdependencia_quimica.usa_substancias_por_conta_da_violencia === 'Sim') {\n\t\tpriority = 'high'\n\t\trisco = 'grave'\t\n\t}\n\n\tif (acompanhamento_juridico.foi_submetida_novas_violencias) {\n\t\tpriority = 'urgent'\n\t\trisco = 'extremo'\t\n\n\t}\n\n\tlet answers = {dados_voluntaria, dados_acolhida, contrato,acompanhamento_juridico,redes_apoio,doencas_fisicas,doencas_psiquiatricas,dependencia_quimica,advogada_voluntaria, risco: risco}\n\tconst user_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"] \n\n  let body_ticket = 'RISCO: ' + risco.toUpperCase() + '\\\\n\\\\nDADOS DA VOLUNTÁRIA:\\\\nNome: ' + dados_voluntaria.nome +'\\\\nEmail: ' + dados_voluntaria.email_cadastro +\n\t'\\\\n\\\\nDADOS DA ACOLHIDA\\\\nNome: ' + dados_acolhida.nome + \n\t'\\\\n\\\\nSOBRE O CONTRATO\\\\nA acolhida respeita o contrato estabelecido relacionado ao atendimento: ' + contrato.acolhida_respeita_contrato + \n\t//condição atendimento alem do horario estabelcido \n\t(contrato.acolhida_respeita_contrato === 'Não'? '\\\\nFrequência que procura além do horário de atendimento: ' + contrato.frequencia_atendimento_fora_do_horario : '' ) +\n\t'\\\\nQuantas horas de atendimento: ' + contrato.frequencia_de_atendimento + \n\t'\\\\n\\\\nACOMPANHAMENTO JURÍDICO\\\\nNovas violências que a acolhida foi submetida: ' + acompanhamento_juridico.foi_submetida_novas_violencias +\n\t//comentou sobre as violencias\n\t(acompanhamento_juridico.comentario_sobre_novas_violencias? '\\\\nComentário sobre novas violências que a acolhida foi submetida: ' + acompanhamento_juridico.comentario_sobre_novas_violencias : '') +\n\t'\\\\nTipo de atendimento prestado à acolhida: ' + acompanhamento_juridico.tipo_atendimento + \n\t//esta representando a acolhida em um ou mais processos\n\t(acompanhamento_juridico.quantos_processos? \n\t\t'\\\\nEm quantos está representando a acolhida: ' + acompanhamento_juridico.quantos_processos + \n\t\t//civel/familia\n\t\t(acompanhamento_juridico.representando_civel_familia? '\\\\nProcesso(s) Cível/Família: ' +acompanhamento_juridico.representando_civel_familia : '') +\n\t\t//Criminal:\n\t\t(acompanhamento_juridico.representando_criminal? '\\\\nProcesso(s) Criminal: ' + acompanhamento_juridico.representando_criminal : '') +\n\t\t//Trabalhista:\n\t\t(acompanhamento_juridico.representando_trabalhista? '\\\\nProcesso(s) Trabalhista:' + acompanhamento_juridico.representando_trabalhista : '') +\n\t\t//Digital:\n\t\t(acompanhamento_juridico.representando_digital? '\\\\nProcesso(s) Digital:' + acompanhamento_juridico.representando_digital : '') +\n\t\t//fase civel/familia\n\t\t(acompanhamento_juridico.acompanhando_civel_familia? '\\\\nProcesso Cível/Família na fase: ' + acompanhamento_juridico.acompanhando_civel_familia : '') + \n\t\t//penal\n\t\t(acompanhamento_juridico.acompanhando_penal? 'Processo Penal na fase: ' + acompanhamento_juridico.acompanhando_penal : '') \n\t\t: '') + \n\t(acompanhamento_juridico.medida_protetiva_informada? '\\\\n Foi informado no processo judicial que a medida protetiva de urgência foi deferida: ' + acompanhamento_juridico.medida_protetiva_informada: '') +\n\t\n\t//Guarda fixada\n\t(acompanhamento_juridico.fixaxao_guarda_provisoria === 'Sim'? \n\t\t'\\\\nHouve fixação de guarda provisória via decisão preliminar: ' + acompanhamento_juridico.fixaxao_guarda_provisoria +\n\t\t'\\\\nPara quem a guarda foi fixada: ' + acompanhamento_juridico.para_quem_foi_fixada_guarda + \n\t\t'\\\\nEm qual regime: ' + acompanhamento_juridico.qual_regime_da_guarda\n\t\t: '') +\n\t// serviço publico\n\t'\\\\nIdentificou necessidade de referenciar a acolhida para algum serviço público da rede de enfrentamento à violência contra as mulheres: ' + acompanhamento_juridico.referenciou_para_servico_publico +\n\t// por que\n\t(acompanhamento_juridico.por_que_servico_publico? '\\\\nMotivo pelo o qual a acolhida foi encaminhada: ' + acompanhamento_juridico.por_que_servico_publico : '') + \n\t// quais serivicos publicos\n\t(acompanhamento_juridico.quais_instituicoes? '\\\\nQual(is) instituição(ões) da rede de serviço público a acolhida foi encaminhada: ' + acompanhamento_juridico.quais_instituicoes : '') +\n\t\n\t'\\\\n\\\\nASPECTOS SOCIOECONÔMICOS\\\\nA acolhida ainda apresenta condição de hipossuficiência para o atendimento: ' + aspectos_socioeconomicos.apresenta_condicao_hipossuficiencia +\n\t//motivos\n\t(aspectos_socioeconomicos.apresenta_condicao_hipossuficiencia === 'Não'? '\\\\nMotivos de não apresentar condição de hipossuficiência para o atendimento: ' + aspectos_socioeconomicos.motivo_nao_condicao_hipossuficiencia : '') +\n\t'\\\\n\\\\nREDES DE APOIO\\\\nA acolhida participa e tem apoio de grupos comunitários ou religiosos: ' + redes_apoio.grupos_comunitarios_religiosos +\n\t'\\\\nA acolhida tem apoio de outras pessoas próximas: ' + redes_apoio.apoio_pessoas_proximas + \n\t'\\\\nRelação da acolhida com seus familiares: ' + redes_apoio.relacao_familiares_acolhida + \n\t'\\\\nRelação da acolhida com a família do(a) autor(a) da violência: ' + redes_apoio.relacao_familiares_autor_violencia +\n\t'\\\\n\\\\nASPECTOS DE SAÚDE | DOENÇA FÍSICA\\\\nA acolhida tem algum diagnóstico de doença(s) física(s) resultante(s) da violência: ' + doencas_fisicas.resultante_da_violencia +\n\t\n\t//tem doenças fisicas resultantes da violencia\n\t(doencas_fisicas.resultante_da_violencia === 'Sim'? \n\t\t'\\\\nQuais: ' + doencas_fisicas.quais + '\\\\nHá quanto tempo: ' + doencas_fisicas.quanto_tempo\n\t \t: '') +\n\t(doencas_fisicas.faz_acompanhamento_medico? \n\t\t'\\\\nA acolhida faz algum acompanhamento médico da(s) doença(s) física(s) resultante(s) da violência: ' + doencas_fisicas.faz_acompanhamento_medico\n\t\t: '') +\n\t//faz acompanhamento medico\n\t(doencas_fisicas.faz_acompanhamento_medico === 'Sim' ? \n\t\t'\\\\nOnde: ' + doencas_fisicas.onde_faz_acompanhamento_medico + \n\t\t'\\\\nHá quanto tempo: ' + doencas_fisicas.quanto_tempo_acompanhamento\n\t\t: '') +\n\t//faz uso de medicamentos\n\t(doencas_fisicas.faz_uso_medicamentos?  \n\t\t'\\\\nA acolhida faz uso de medicações por conta da(s) doença(s) física(s) resultante(s) da violência: ' + doencas_fisicas.faz_uso_medicamentos \n\t: '') +\n\t(doencas_fisicas.faz_acompanhamento_medico === 'Sim'? \t\n\t\t'\\\\nQuais: ' + doencas_fisicas.quais_medicamentos +\n\t\t'\\\\nHá quanto tempo: ' + doencas_fisicas.quanto_tempo_medicamentos\n\t\t:'') +\n\t//bpc\t\n\t(doencas_fisicas.recebe_bpc? '\\\\nA acolhida está recebendo o Benefício de Prestação Continuada (BPC): ' + doencas_fisicas.recebe_bpc : '') + \n\t'\\\\n\\\\nASPECTOS DE SAÚDE | DOENÇAS PSIQUIÁTRICAS\\\\n A acolhida tem algum diagnóstico (verbal ou laudo) de doença(s) psiquiátrica(s) resultante(s) da violência: ' + doencas_psiquiatricas.resultante_da_violencia +\n\t\n\t//doenças psiquiatricas\n\t(doencas_psiquiatricas.resultante_da_violencia === 'Sim'?\n\t\t'\\\\nQuais: ' + doencas_psiquiatricas.quais + \n\t\t'\\\\nHá quanto tempo: ' + doencas_psiquiatricas.quanto_tempo \n\t\t: '') +\n\n\t//acompanhamento medico\t \n\t(doencas_psiquiatricas.faz_acompanhamento_medico?\n\t\t'\\\\nA acolhida faz algum acompanhamento médico do(s) adoecimento(s) psiquiátrico(s) resultante(s) da violência: ' + doencas_psiquiatricas.faz_acompanhamento_medico \n\t: '') +\n\t(doencas_psiquiatricas.faz_acompanhamento_medico === 'Sim'?\n\t\t'\\\\nOnde: ' + doencas_psiquiatricas.onde_faz_acompanhamento_medico + '\\\\nHá quanto tempo: ' + doencas_psiquiatricas.quanto_tempo_acompanhamento\n\t \t: '') +\n\t//uso de medicamento\n\t(doencas_psiquiatricas.faz_uso_medicamentos?\n\t\t'\\\\nA acolhida faz uso de medicações por conta do(s) adoecimento(s) psiquiátrico(s) resultante(s) da violência: ' + doencas_psiquiatricas.faz_uso_medicamentos \n\t: '') +\n\t(doencas_psiquiatricas.faz_uso_medicamentos === 'Sim' ? \n\t\t\t'\\\\nQuais: ' + doencas_psiquiatricas.quais_medicamentos + '\\\\nHá quanto tempo: ' + doencas_psiquiatricas.quanto_tempo_medicamento \n\t: '') +\n\t\n\t'\\\\n\\\\nASPECTOS DE SAÚDE | DEPENDÊNCIA QUÍMICA\\\\nA acolhida faz uso de substâncias por conta da violência: ' + dependencia_quimica.usa_substancias_por_conta_da_violencia + \n\t(dependencia_quimica.usa_substancias_por_conta_da_violencia === 'Sim'? \n\t\t'\\\\nQuais: ' + dependencia_quimica.quais + '\\\\nHá quanto tempo: ' + dependencia_quimica.quanto_tempo +\n\t\t'\\\\nA acolhida é assistida por algum serviço público em decorrência do uso de substância por conta da violência: ' + dependencia_quimica.assistida_por_algum_serivico +\n\t\t'\\\\nOnde: '+ dependencia_quimica.onde + '\\\\nHá quanto tempo: ' + dependencia_quimica.quanto_tempo_atendimento \n\t\t: '') +\n\t'\\\\n\\\\nSOBRE A ADVOGADA VOLUNTARIA' + \n\t(advogada_voluntaria.tem_contato_psicologa? '\\\\nSegue em contato com a psicóloga que está acompanhando-a: ' + advogada_voluntaria.tem_contato_psicologa : '') +\n\t'\\\\nSolicitou ajuda da equipe técnica do Mapa do Acolhimento: ' + advogada_voluntaria.solicitou_ajuda_mapa + \n\t(advogada_voluntaria.solicitou_ajuda_mapa === 'Sim'? \n\t\t'\\\\nSentiu-se orientada: ' + advogada_voluntaria.se_sentiu_orientada +\n\t\t'\\\\nSentiu-se acolhida pela equipe: ' + advogada_voluntaria.se_sentiu_acolhida \n\t: '') + \n\t'\\\\nParticipa dos encontros de Discussão de Caso do projeto: ' + advogada_voluntaria.participa_grupo_discussao + \n\t'\\\\nParticipa do grupo de WhatsApp de seu Estado: ' + advogada_voluntaria.participa_grupo_whatsapp_estado +\n\t(advogada_voluntaria.como_se_sente_atendimento? '\\\\nComo se sente em relação ao atendimento jurídico realizado pelo Mapa do Acolhimento: ' + advogada_voluntaria.como_se_sente_atendimento\n\t: '')\n\tlet answers_txt = JSON.stringify(answers).replaceAll('Sim',true).replaceAll('Não',false)\n\tanswers_txt = answers_txt.replaceAll('false quis informar','Não quis informar').replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n\titem.json= {\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\tuser_id,\n              answers,\n\t\t\t\t\t\t\tbody_ticket,\t\n\t\t\t\t\t\t\tanswers_txt\t\t\t\t\t\n\t\t\t\t\t\t}\n\titem.json.answers.risco =item.json.answers.risco.toUpperCase();\n}\n\nreturn items[items.length - 1]; "
        },
        "name": "Formata - Acomp Juridico 1",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          460,
          700
        ],
        "id": "23d0ff8d-61b8-4f86-8e93-60c163c13279"
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Acomp Juridico 1\"].json[\"user_id\"]}},\n \t\t\"organization_id\": 360269610652,\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"acompanhamento-1\"], \n \t\t\"status\": \"new\",\n   \t\t\"priority\": \"{{$node[\"Formata - Acomp Juridico 1\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Acompanhamento 1] {{$node[\"Formata - Acomp Juridico 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\t\"body\": \"{{$node[\"Formata - Acomp Juridico 1\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (acomp juridico 1)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          660,
          700
        ],
        "id": "cdae0e95-c48b-4162-9787-51a0a57aff38",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\ninsert_mda_forms_answers(objects: {answers: $answers, form: \"acompanhamento-psicologico-1\", msr_name: \"{{$node[\"Formata - Acomp Psicologico 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (acomp psicologico)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Acomp Psicologico 1\"].json[\"answers\"][\"dados_voluntaria\"][\"email_cadastro\"]}}\",organization_id:360282119532, form_id:{{$node[\"Webhook\"].json[\"body\"][\"mautic.form_on_submit\"][0][\"submission\"][\"form\"][\"id\"]}}\n}) {\naffected_rows\n}\n}",
          "variables": "={\n\"answers\":{{$node[\"Formata - Acomp Psicologico 1\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas2",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          880,
          460
        ],
        "id": "c41dcae4-5742-4ceb-b730-afa561583e24",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "let risco = 'nenhum';\nlet priority = 'low';\n\nfor (item of items) {\n\n  const results =  item.json.submission.results; \n\tlet dados_voluntaria = {\n\t\tnome:\tresults[\"1_nome_completo\"], //\"Teste 2022\",\n\t\temail_cadastro: results[\"2_email_de_cadastro\"] //\"teste@teste.br\",\n\t}\n\t\n\tlet dados_acolhida = {\n\t\tnome: results[\"3_nome_da_acolhida\"] //\"Acholhida teste\",\n\t}\n\t\n\tlet contrato = {\n\t\ttem_assiduidade_atendimentos: results[\"4_a_acolhida_tem_sido_ass\"], //\"Não (Por favor, entre em contato imediatamente com a equipe)\",\n\t\tmotivo_nao_assiduidade: results[\"41_selecione_os_motivos_a\"], //\"Falta sem avisar, O autor da violência impediu\",\n\t\trespeita_combinados_atendimento: results[\"6_a_acolhida_respeita_os\"], //\"Não\",\n\t\tfrequencia_atendimento_fora_do_horario: results[\"51_com_qual_frequencia_te\"] //\"Três ou mais vezes na semana\",\n\t}\n\n\tlet acompanhamento_psicologico = {\n\t\tfoi_submetida_novas_violencias: results[\"6_a_acolhida_foi_submetid\"], //\"Física\",\n\t\tcomentario_sobre_novas_violencias: results[\"7_caso_queira_comentar_so\"], //\"comentar sobre as novas violências que a acolhida foi submetida\",\n\t\tapesctos_psicologicos_trabalhados: results[\"8_aspectos_psicologicos_t\"], //\" Aspectos psicológicos trabalhados durante o processo psicoterapêutico\",\n\t\treferenciou_para_servico_publico: results[\"9_durante_o_atendimento_v\"], //\"Sim\",\n\t\tpor_que_servico_publico: results[\"91_por_que\"], //\"dentificou alguma necessidade de referenciar a acolhida para algum serviço público\",\n\t\tquais_instituicoes: results[\"92_para_qualis_instituica\"], //\"Defensoria pública/ NUDEM\",\n\t \triscos_relacionado_ao_suicidio: results[\"10_voce_se_preocupa_ou_pe\"] //\"Não\",\n\t}\n\n\tlet  aspectos_socioeconomicos = {\n\t\tapresenta_condicao_hipossuficiencia: results[\"11_a_acolhida_ainda_apres\"], //\"Não (acione a equipe imediatamente)\",\n\t\tmotivo_nao_condicao_hipossuficiencia: results[\"111_informe_aqui_os_motiv1\"] //\" apresenta condição de hipossuficiência \",\n\t}\n\n\tlet redes_apoio = {\n\t\tgrupos_comunitarios_religiosos: results[\"12_a_acolhida_participa_e\"], //\"Não\",\n\t\tapoio_pessoas_proximas: results[\"13_como_e_a_relacao_da_ac\"], //\"Sim\",\n\t\trelacao_familiares_acolhida: results[\"14_como_e_a_relacao_da_ac\"], //\"Média (nem sempre pode contar com os familiares, caso precise de apoio)\",\n\t\trelacao_familiares_autor_violencia: results[\"15_como_e_a_relacao_da_ac\"] //\"Ruim (não tem relação com os familiares do(a) autor(a))\",\n\t}\n\n\tlet doencas_fisicas = {\n\t\tresultante_da_violencia: results[\"16_a_acolhida_tem_algum_d\"], //\"Sim\",\t\t\n\t\tquais: results[\"162_qualis\"], //\" doença(s) física(s) \",\n\t\tquanto_tempo: results[\"162_ha_quanto_tempo\"], //\"Mais de 10 anos\",\n\t\tfaz_acompanhamento_medico: results[\"17_se_sim_a_acolhida_faz\"], //\"Sim\",\n\t\tonde_faz_acompanhamento_medico: results[\"17_onde\"], //\"Unidade Básica de Saúde (UBS)\",\n\t\tquanto_tempo_acompanhamento: results[\"17_ha_quanto_tempo\"], //\"Mais de 10 anos\",\n\t\tfaz_uso_medicamentos: results[\"18_se_sim_a_acolhida_faz\"], //\"Sim\",\n\t\tquais_medicamentos: results[\"18_qualis\"], //\" medicações por conta da(s) doença(s) física(s)\",\n\t\tquanto_tempo_medicamentos: results[\"18_ha_quanto_tempo\"], //\"Entre 2 anos e 10 anos\",\n\t\trecebe_bpc: results[\"19_caso_seja_pessoa_com_d\"] //\"Não\",\n\t}\n\n\tlet doencas_psiquiatricas  = { \n\t\tresultante_da_violencia: results[\"20_a_acolhida_tem_algum_d\"], //\"Sim\",\n\t\tquais: results[\"20_qualis\"], //\"doença(s) psiquiátrica(s) resultante(s) da violência\",\n\t\tquanto_tempo: results[\"20_ha_quanto_tempo\"], //\"Mais de 10 anos\",\n\t\tfaz_acompanhamento_medico: results[\"21_se_sim_a_acolhida_faz\"], //\"Sim\",\n\t\tonde_faz_acompanhamento_medico: results[\"21_onde\"], //\"Unidade Básica de Saúde (UBS)\",\n\t\tquanto_tempo_acompanhamento: results[\"21_ha_quanto_tempo\"], //\"Mais de 10 anos\",\n\t\tfaz_uso_medicamentos: results[\"22_se_sim_a_acolhida_faz\"], //\"Sim\",\n\t\tquais_medicamentos: results[\"22_qualis\"], //\"medicações por conta do(s) adoecimento(s) psiquiátrico(s) \",\n\t\tquanto_tempo_medicamento: results[\"22_ha_quanto_tempo\"] //\"Mais de 10 anos\",\n\t}\n\n\tlet dependencia_quimica = {\n\t\tusa_substancias_por_conta_da_violencia: results[\"23_a_acolhida_faz_uso_de\"], //\"Sim\",\n\t\tquais: results[\"23_qualis\"], //\"Maconha\",\n\t\tquanto_tempo: results[\"23_ha_quanto_tempo\"], //\"Mais de 10 anos\",\n\t\tassistida_por_algum_serivico: results[\"24_se_sim_a_acolhida_e_as\"], //\"Sim\",\n\t\tonde: results[\"24_onde\"], //\"Hospital geral\",\n\t\tquanto_tempo_atendimento: results[\"24_ha_quanto_tempo\"] //\"Entre 1 e 2 anos\",\n\t}\n\n\tlet qualidade_vida = {\n\t\timpacto_sofrido_moderado: results[\"25_quais_impactos_a_acolh\"], //\"Insônia\",\n\t\timpacto_sofrido_grave: results[\"26_quais_impactos_a_acolh\"] //\"Aborto espontâneo\",\n\t}\n\n\tlet psicologa_voluntaria = {\n\t\ttem_contato_advogada: results[\"27_caso_a_acolhida_esteja\"], //\"Sim\",\n\t\tsolicitou_ajuda_mapa: results[\"28_voce_solicitou_ajuda_d\"], //\"Sim\",\n\t\tse_sentiu_orientada: results[\"28_sentiuse_orientada\"], //\"Sim\",\n\t\tse_sentiu_acolhida: results[\"232_sentiuse_acolhida_pel\"], //\"Sim\",\n\t\tparticipa_grupo_discussao: results[\"29_voce_participa_dos_enc\"], //\"Não\",\n\t\tparticipa_grupo_whatsapp_estado: results[\"30_voce_participa_do_grup\"], //\"Sim\",\n\t\tcomo_se_sente_atendimento: results[\"31_se_desejar_relate_como\"] //\"como se sente em relação ao atendimento psicológico realizado pelo Mapa do Acolhimento\"\n\t}\n\n\tif (contrato.tem_assiduidade_atendimentos === 'Não' || \n\t\t\tacompanhamento_psicologico.referenciou_para_servico_publico === 'Sim' ||\n\t\t\tredes_apoio.relacao_familiares_acolhida !== 'Boa' ||\n\t\t\tdoencas_fisicas.recebe_bpc === 'Não' ||\n\t\t\tdependencia_quimica.assistida_por_algum_serivico === 'Não' || \n\t\t\tqualidade_vida.impacto_sofrido_moderado !== 'A acolhida não está sofrendo nenhum dos impactos citados acima'\n\t\t) {\n\n\t\tpriority = 'normal'\n\t\trisco = 'moderado'\n\t}\n\n\tif (redes_apoio.apoio_pessoas_proximas === 'Não' || \n\t\t\tdoencas_fisicas.resultante_da_violencia === 'Sim' || \n\t\t\tdoencas_psiquiatricas.resultante_da_violencia === 'Sim' || \n\t\t\tdoencas_psiquiatricas.faz_acompanhamento_medico == 'Não' ||\n\t\t\tdependencia_quimica.usa_substancias_por_conta_da_violencia == 'Sim' ||\n\t\t\tqualidade_vida.impacto_sofrido_grave !== 'A acolhida não está sofrendo nenhum dos impactos citados acima'\n\t\t ) {\n\t\t\t \n\t\tpriority = 'high'\n\t\trisco = 'grave'\n\t}\n\n\tif (acompanhamento_psicologico.foi_submetida_novas_violencias || \n\t    acompanhamento_psicologico.riscos_relacionado_ao_suicidio === 'Sim') {\n\t\tpriority = 'urgent'\n\t\trisco = 'extremo'\n\t}\n\n\tlet answers = {dados_voluntaria, dados_acolhida, contrato, acompanhamento_psicologico, aspectos_socioeconomicos, redes_apoio, doencas_fisicas, doencas_psiquiatricas, dependencia_quimica, qualidade_vida, psicologa_voluntaria, risco}\n\tconst user_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"]\n\n  let body_ticket = 'RISCO ' + risco.toUpperCase() + '\\\\n\\\\nDADOS DA VOLUNTÁRIA\\\\nNome: ' + dados_voluntaria.nome + '\\\\nEmail: ' + dados_voluntaria.email_cadastro +\n\t'\\\\n\\\\nDADOS DA ACOLHIDA\\\\nNome: ' + dados_acolhida.nome + '\\\\n\\\\nSOBRE O CONTRATO\\\\nA acolhida tem sido assídua nos atendimentos: ' +  contrato.tem_assiduidade_atendimentos +\n\t//motivos\n\t(contrato.motivo_nao_assiduidade? '\\\\nMotivos: ' + contrato.motivo_nao_assiduidade : '') + \n\t'\\\\nA acolhida respeita os combinados relacionados ao atendimento: ' + contrato.respeita_combinados_atendimento +\n\t//frequencia fora do horario\n\t(contrato.frequencia_atendimento_fora_do_horario? '\\\\nFrequência que procura além do horário de atendimento: ' + contrato.frequencia_atendimento_fora_do_horario : '') +\n\t'\\\\n\\\\nSOBRE O ACOMPANHAMENTO PSICOLÓGICO' +\n\t(acompanhamento_psicologico.foi_submetida_novas_violencias !== '' ? '\\\\nNovas violências que a acolhida foi submetida: ' + acompanhamento_psicologico.foi_submetida_novas_violencias : '') +\n\t(acompanhamento_psicologico.comentario_sobre_novas_violencias? '\\\\nComentário sobre novas violências que a acolhida foi submetida: ' + acompanhamento_psicologico.comentario_sobre_novas_violencias : '') +\n\t'\\\\nAspectos psicológicos trabalhados durante o processo psicoterapêutico: ' + acompanhamento_psicologico.apesctos_psicologicos_trabalhados + \n\t'\\\\nIdentificou necessidade de referenciar a acolhida para algum serviço público da rede de enfrentamento à violência contra as mulheres: ' + acompanhamento_psicologico.referenciou_para_servico_publico +\n\t//serviço publico\n\t// por que\n\t(acompanhamento_psicologico.por_que_servico_publico? '\\\\nMotivo pelo o qual a acolhida foi encaminhada: ' + acompanhamento_psicologico.por_que_servico_publico : '') + \n\t// quais serivicos publicos\n\t(acompanhamento_psicologico.quais_instituicoes? '\\\\nQual(is) instituição(ões) da rede de serviço público a acolhida foi encaminhada: ' + acompanhamento_psicologico.quais_instituicoes : '') +\n\t'\\\\nPreocupa ou percebe, na condução do processo psicoterapêutico, riscos relacionados ao suicídio: ' + acompanhamento_psicologico.riscos_relacionado_ao_suicidio +\n\t'\\\\n\\\\nASPECTOS SOCIOECONÔMICOS\\\\nA acolhida ainda apresenta condição de hipossuficiência: ' + aspectos_socioeconomicos.apresenta_condicao_hipossuficiencia +\n\t//motivos hipossificiencia \n\t(aspectos_socioeconomicos.apresenta_condicao_hipossuficiencia === 'Não'? '\\\\nMotivos de não apresentar condição de hipossuficiência para o atendimento: ' + aspectos_socioeconomicos.motivo_nao_condicao_hipossuficiencia : '') +\n\t'\\\\n\\\\nREDES DE APOIO\\\\nA acolhida participa e tem apoio de grupos comunitários ou religiosos: ' + redes_apoio.grupos_comunitarios_religiosos +\n\t'\\\\nA acolhida tem apoio de outras pessoas próximas: ' + redes_apoio.apoio_pessoas_proximas + \n\t'\\\\nRelação da acolhida com seus familiares: ' + redes_apoio.relacao_familiares_acolhida + \n\t'\\\\nRelação da acolhida com a família do(a) autor(a) da violência: ' + redes_apoio.relacao_familiares_autor_violencia + \n\t'\\\\n\\\\nASPECTOS DE SAÚDE | DOENÇA FÍSICA\\\\nA acolhida tem algum diagnóstico de doença(s) física(s) resultante(s) da violência: ' + doencas_fisicas.resultante_da_violencia +\n\t\n\t//tem doenças fisicas resultantes da violencia\n\t(doencas_fisicas.resultante_da_violencia === 'Sim'? \n\t\t'\\\\nQuais: ' + doencas_fisicas.quais + '\\\\nHá quanto tempo: ' + doencas_fisicas.quanto_tempo\n\t \t: '') +\n\t(doencas_fisicas.faz_acompanhamento_medico? \n\t\t'\\\\nA acolhida faz algum acompanhamento médico da(s) doença(s) física(s) resultante(s) da violência: ' + doencas_fisicas.faz_acompanhamento_medico\n\t\t: '') +\n\t//faz acompanhamento medico\n\t(doencas_fisicas.faz_acompanhamento_medico === 'Sim' ? \n\t\t'\\\\nOnde: ' + doencas_fisicas.onde_faz_acompanhamento_medico + \n\t\t'\\\\nHá quanto tempo: ' + doencas_fisicas.quanto_tempo_acompanhamento\n\t\t: '') +\n\t//faz uso de medicamentos\n\t(doencas_fisicas.faz_uso_medicamentos?  \n\t\t'\\\\nA acolhida faz uso de medicações por conta da(s) doença(s) física(s) resultante(s) da violência: ' + doencas_fisicas.faz_uso_medicamentos \n\t: '') +\n\t(doencas_fisicas.faz_acompanhamento_medico === 'Sim'? \t\n\t\t'\\\\nQuais: ' + doencas_fisicas.quais_medicamentos +\n\t\t'\\\\nHá quanto tempo: ' + doencas_fisicas.quanto_tempo_medicamentos\n\t\t:'') +\n\t//bpc\t\n\t(doencas_fisicas.recebe_bpc? '\\\\nA acolhida está recebendo o Benefício de Prestação Continuada (BPC): ' + doencas_fisicas.recebe_bpc : '') + \n\t'\\\\n\\\\nASPECTOS DE SAÚDE | DOENÇAS PSIQUIÁTRICAS\\\\n A acolhida tem algum diagnóstico (verbal ou laudo) de doença(s) psiquiátrica(s) resultante(s) da violência: ' + doencas_psiquiatricas.resultante_da_violencia +\n\t\n\t//doenças psiquiatricas\n\t(doencas_psiquiatricas.resultante_da_violencia === 'Sim'?\n\t\t'\\\\nQuais: ' + doencas_psiquiatricas.quais + \n\t\t'\\\\nHá quanto tempo: ' + doencas_psiquiatricas.quanto_tempo \n\t\t: '') +\n\n\t//acompanhamento medico\t \n\t(doencas_psiquiatricas.faz_acompanhamento_medico?\n\t\t'\\\\nA acolhida faz algum acompanhamento médico do(s) adoecimento(s) psiquiátrico(s) resultante(s) da violência: ' + doencas_psiquiatricas.faz_acompanhamento_medico \n\t: '') +\n\t(doencas_psiquiatricas.faz_acompanhamento_medico === 'Sim'?\n\t\t'\\\\nOnde: ' + doencas_psiquiatricas.onde_faz_acompanhamento_medico + '\\\\nHá quanto tempo: ' + doencas_psiquiatricas.quanto_tempo_acompanhamento\n\t \t: '') +\n\t//uso de medicamento\n\t(doencas_psiquiatricas.faz_uso_medicamentos?\n\t\t'\\\\nA acolhida faz uso de medicações por conta do(s) adoecimento(s) psiquiátrico(s) resultante(s) da violência: ' + doencas_psiquiatricas.faz_uso_medicamentos \n\t: '') +\n\t(doencas_psiquiatricas.faz_uso_medicamentos === 'Sim' ? \n\t\t\t'\\\\nQuais: ' + doencas_psiquiatricas.quais_medicamentos + '\\\\nHá quanto tempo: ' + doencas_psiquiatricas.quanto_tempo_medicamento \n\t: '') +\n\t\n\t'\\\\n\\\\nASPECTOS DE SAÚDE | DEPENDÊNCIA QUÍMICA\\\\nA acolhida faz uso de substâncias por conta da violência: ' + dependencia_quimica.usa_substancias_por_conta_da_violencia + \n\t(dependencia_quimica.usa_substancias_por_conta_da_violencia === 'Sim'? \n\t\t'\\\\nQuais: ' + dependencia_quimica.quais + '\\\\nHá quanto tempo: ' + dependencia_quimica.quanto_tempo +\n\t\t'\\\\nA acolhida é assistida por algum serviço público em decorrência do uso de substância por conta da violência: ' + dependencia_quimica.assistida_por_algum_serivico +\n\t\t(dependencia_quimica.assistida_por_algum_serivico === 'Sim'? '\\\\nOnde: '+ dependencia_quimica.onde + '\\\\nHá quanto tempo: ' + dependencia_quimica.quanto_tempo_atendimento: '' ) \n\t\t: '') +\n\t'\\\\n\\\\nQUALIDADE DE VIDA\\\\nImpactos que a acolhida está sofrendo em decorrência da violência (moderado): ' + qualidade_vida.impacto_sofrido_moderado + \n\t'\\\\nImpactos que a acolhida está sofrendo em decorrência da violência (grave):' + qualidade_vida.impacto_sofrido_grave +\n\t'\\\\n\\\\nSOBRE A PSICÓLOGA VOLUNTÁRIA'\t+\n\t(psicologa_voluntaria.tem_contato_advogada? '\\\\nSegue em contato com a advogada que está acompanhando-a: ' + psicologa_voluntaria.tem_contato_advogada: '') +\n\t'\\\\nSolicitou ajuda da equipe técnica do Mapa do Acolhimento: ' + psicologa_voluntaria.solicitou_ajuda_mapa + \n\t(psicologa_voluntaria.solicitou_ajuda_mapa === 'Sim'? \n\t\t'\\\\nSentiu-se orientada: ' + psicologa_voluntaria.se_sentiu_orientada +\n\t\t'\\\\nSentiu-se acolhida pela equipe: ' + psicologa_voluntaria.se_sentiu_acolhida \n\t: '') + \n\t'\\\\nParticipa dos encontros de Discussão de Caso do projeto: ' + psicologa_voluntaria.participa_grupo_discussao + \n\t'\\\\nParticipa do grupo de WhatsApp de seu Estado: ' + psicologa_voluntaria.participa_grupo_whatsapp_estado +\n\t(psicologa_voluntaria.como_se_sente_atendimento? '\\\\nComo se sente em relação ao atendimento jurídico realizado pelo Mapa do Acolhimento: ' + psicologa_voluntaria.como_se_sente_atendimento\n\t: '')\n\t\n\n\tlet answers_txt = JSON.stringify(answers).replaceAll('Sim',true).replaceAll('Não',false)\n\tanswers_txt = answers_txt.replaceAll('false quis informar','Não quis informar').replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n\titem.json= {\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\tuser_id,\n              answers,\n\t\t\t\t\t\t\tbody_ticket,\t\n\t\t\t\t\t\t\tanswers_txt\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\n}\n\nreturn items; "
        },
        "name": "Formata - Acomp Psicologico 1",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "id": "9a2a353a-cdc2-44d7-a42d-51c456d52e15"
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Acomp Psicologico 1\"].json[\"user_id\"]}},\n \t\t\"organization_id\": 360282119532,\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"acompanhamento-1\"], \n \t\t\"status\": \"new\",\n   \t\t\"priority\": \"{{$node[\"Formata - Acomp Psicologico 1\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Acompanhamento 1] {{$node[\"Formata - Acomp Psicologico 1\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\t\"body\": \"{{$node[\"Formata - Acomp Psicologico 1\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (acomp psicologico)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          680,
          460
        ],
        "id": "c0bf97fc-14f2-414a-841c-ec89fa134502",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "basicAuth",
          "requestMethod": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "jsonParameters": true,
          "options": {
            "bodyContentType": "json"
          },
          "bodyParametersJson": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Acomp Juridico 2\"].json[\"user_id\"]}},\n \t\t\"organization_id\": 360269610652,\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"acompanhamento-2\"], \n \t\t\"status\": \"new\",\n   \t\t\"priority\": \"{{$node[\"Formata - Acomp Juridico 2\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Acompanhamento 2] {{$node[\"Formata - Acomp Juridico 2\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\t\"body\": \"{{$node[\"Formata - Acomp Juridico 2\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}"
        },
        "name": "Criar novo ticket (acomp juridico 2)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          720,
          1140
        ],
        "id": "b929dc49-e39b-4579-8f41-a164023515da",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nlet risco = 'nenhum';\nlet priority = 'low';\nfor (item of items) {\n\n\n\tconst results =  item.json.submission.results; \n\n\tlet dados_voluntaria = {\n\t\tnome: results[\"1_nome_completo\"],  // Teste 2022\",\n\t\temail_cadastro: results[\"2_email_de_cadastro\"],  // teste@teste.com\",\n\t}\n\n\tlet dados_acolhida = {\n\t\tnome: results[\"3_nome_da_acolhida\"]\n\t}  // Acholhida teste\",\n\n\tlet contrato = {\n\t\tsegue_atendimento_com_acolhida: results[\"4_a_acolhida_segue_em_ate\"],  // Sim\",\n\t\tacolhida_respeita_contrato: results[\"5_a_acolhida_respeita_o_c\"],  // Sim\",\n\t\tquantas_horas_atendimento: results[\"6_quantas_horas_de_atendi\"],  // 3h a 5h\",\n\t}\n\n\tlet acompanhamento_juridico = {\n\t\tfoi_submetida_novas_violencias: results[\"7_a_acolhida_foi_submetid\"],  // Psicológica\",\n\t\tcomentario_sobre_novas_violencias: results[\"71_caso_queira_comentar_s\"],  // ggtr\",\n\t\tprocesso_civel_fase: results[\"civel\"],  // Pedido de medida protetiva de urgência\",\n\t\tprocesso_penal_fase: results[\"penal\"],  // \n\t\tresumo_caso: results[\"9_por_favor_relate_de_man\"],  // gg\",\n\t\treferenciou_para_servico_publico: results[\"10_durante_o_atendimento\"],  // Sim\",\n\t\tmotivo_referenciou_servico_publico: results[\"10_por_que\"],  // trgtrtr\",\n\t\tqual_instituicao: results[\"10_para_qualis_instituica\"],  // CREAS\",\n\t}\n\n\tlet aspectos_socioeconomicos = {\n\t\tapresenta_condicao_hipossuficiencia: results[\"11_a_acolhida_ainda_apres\"],  // Não\",\n\t\tmotivo_nao_condicao_hipossuficiencia: results[\"111_informe_aqui_os_motiv\"],  // trhtrh\",\n\t}\n\n\tlet advogada_voluntaria = {\n\t\ttem_contato_psicologa_mapa: results[\"12_caso_a_acolhida_esteja\"],  // Sim\",\n\t\tsolicitou_ajuda_mapa: results[\"13_voce_solicitou_ajuda_d\"],  // Sim\",\n\t\tse_sentiu_orientada: results[\"13_sentiuse_orientada\"],  // Sim\",\n\t\tse_sentiu_acolhida: results[\"13_se_sentiu_acolhida_pel\"],  // Sim\",\n\t\tparticipa_grupo_discussao: results[\"14_voce_participa_dos_enc\"],  // Sim\",\n\t\tparticipa_grupo_whatsapp_estado: results[\"15_voce_participa_do_grup\"],  // \n\t\tcomo_se_sente_atendimento: results[\"16_se_desejar_relate_como\"]\n\t}\n\n\tif(\tcontrato.acolhida_respeita_contrato === 'Não' ||\n\t\t\tcontrato.quantas_horas_atendimento === 'Mais de 5h' ||\n\t\t\tacompanhamento_juridico.referenciou_para_servico_publico === 'Sim'){\n\t\tpriority = 'normal'\n\t\trisco = 'moderado'\n\t}\n\n\tif(acompanhamento_juridico.foi_submetida_novas_violencias){\n\t\tpriority = 'urgent'\n\t\trisco = 'extremo'\n\t}\n\t\n\tlet answers = {dados_voluntaria,dados_acolhida,contrato,aspectos_socioeconomicos,acompanhamento_juridico,advogada_voluntaria,risco}\t\n\tconst user_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"] \n \n  let body_ticket = 'RISCO ' + risco.toUpperCase() + '\\\\n\\\\nDADOS DA VOLUNTÁRIA\\\\nNome completo: ' + dados_voluntaria.nome +\n\t'\\\\nEmail de cadastro: ' + dados_voluntaria.email_cadastro + '\\\\n\\\\nDADOS DA ACOLHIDA\\\\nNome: ' + dados_acolhida.nome +\n\t'\\\\n\\\\nSOBRE O CONTRATO\\\\nA acolhida segue em atendimento com você: ' + contrato.segue_atendimento_com_acolhida + \n\t'\\\\nA acolhida respeita o contrato estabelecido relacionado ao atendimento: ' + contrato.acolhida_respeita_contrato +\n\t'\\\\nQuantas horas de atendimento estão sendo despendidas em média, por semana para a acolhida: ' + contrato.quantas_horas_atendimento +\n\t'\\\\n\\\\nACOMPANHAMENTO JURÍDICO' + \n\t(acompanhamento_juridico.foi_submetida_novas_violencias? '\\\\nNovas violências que a acolhida foi submetida: ' + acompanhamento_juridico.foi_submetida_novas_violencias  :'') +\n\t(acompanhamento_juridico.comentario_sobre_novas_violencias? '\\\\nComentário sobre novas violências que a acolhida foi submetida: ' + \n\t acompanhamento_juridico.comentario_sobre_novas_violencias :'') +\n\t(acompanhamento_juridico.processo_civel_fase? '\\\\nProcesso Cível na fase: ' + acompanhamento_juridico.processo_civel_fase : '' ) +\n\t(acompanhamento_juridico.processo_penal_fase? '\\\\nProcesso Penal na fase: ' + acompanhamento_juridico.processo_penal_fase : '' ) +\n\t'\\\\nResumo da atualização do caso: ' + acompanhamento_juridico.resumo_caso + \n\t'\\\\nIdentificou alguma necessidade de referenciar a acolhida para algum serviço público da rede de enfrentamento à violência contra as mulheres: ' + acompanhamento_juridico.referenciou_para_servico_publico +\n\t(acompanhamento_juridico.referenciou_para_servico_publico === 'Sim'? \n\t\t'\\\\nMotivo(s) pelo o qual a acolhida foi encaminhada para serviço público: ' + acompanhamento_juridico.motivo_referenciou_servico_publico +\n\t\t'\\\\nQual(is) instituição(ões) da rede de serviço público a acolhida foi encaminhada: ' + acompanhamento_juridico.qual_instituicao\n\t: '') +\n\t'\\\\n\\\\nASPECTOS SOCIOECONÔMICOS\\\\nA acolhida ainda apresenta condição de hipossuficiência para o atendimento: ' + aspectos_socioeconomicos.apresenta_condicao_hipossuficiencia +\n\t'\\\\nMotivos de não apresentar condição de hipossuficiência para o atendimento: ' + aspectos_socioeconomicos.motivo_nao_condicao_hipossuficiencia +\n\t'\\\\n\\\\nSOBRE A ADVOGADA VOLUNTÁRIA\\\\nSegue em contato com a psicóloga que está acompanhando-a: ' + advogada_voluntaria.tem_contato_psicologa_mapa +\n\t'\\\\nSolicitou ajuda da equipe técnica do Mapa do Acolhimento: ' + advogada_voluntaria.solicitou_ajuda_mapa +\n\t(advogada_voluntaria.se_sentiu_orientada? '\\\\nSe sentiu orientada: ' + advogada_voluntaria.se_sentiu_orientada : '') +\n\t(advogada_voluntaria.se_sentiu_acolhida? '\\\\nSe sentiu acolhida: ' + advogada_voluntaria.se_sentiu_acolhida : '') +\n\t'\\\\nParticipa dos encontros de Discussão de Caso do projeto: ' + advogada_voluntaria.participa_grupo_discussao +\n\t'\\\\nParticipa do grupo de WhatsApp de seu Estado: ' + advogada_voluntaria.participa_grupo_whatsapp_estado +\n\t(advogada_voluntaria.como_se_sente_atendimento? '\\\\nComo se sente em relação ao atendimento jurídico realizado pelo Mapa do Acolhimento: ' + advogada_voluntaria.como_se_sente_atendimento : '')\n\n\n\tlet answers_txt = JSON.stringify(answers).replaceAll('Sim',true).replaceAll('Não',false)\n\tanswers_txt = answers_txt.replaceAll('false quis informar','Não quis informar').replaceAll('false se aplica','Não se aplica').replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n\titem.json= {\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\tuser_id,\n              answers,\n\t\t\t\t\t\t\tbody_ticket,\t\n\t\t\t\t\t\t\tanswers_txt\t\t\t\t\t\n\t\t\t\t\t\t}\n\n}\n\nreturn items; "
        },
        "name": "Formata - Acomp Juridico 2",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          480,
          1140
        ],
        "id": "5e344159-08d7-4d83-98d6-6a5c0af10cea"
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation MyMutation($answers: json) {\ninsert_mda_forms_answers(objects: {answers: $answers, form: \"acompanhamento-juridico-2\", msr_name: \"{{$node[\"Formata - Acomp Juridico 2\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", ticket_id: {{$node[\"Criar novo ticket (acomp juridico 2)\"].json[\"ticket\"][\"id\"]}}, volunteer_email: \"{{$node[\"Formata - Acomp Juridico 2\"].json[\"answers\"][\"dados_voluntaria\"][\"email_cadastro\"]}}\",organization_id:360269610652, form_id:{{$node[\"Webhook\"].json[\"body\"][\"mautic.form_on_submit\"][0][\"submission\"][\"form\"][\"id\"]}}\n}) {\naffected_rows\n}\n}",
          "variables": "={\n\"answers\": {{$node[\"Formata - Acomp Juridico 2\"].json[\"answers_txt\"]}}\n}"
        },
        "name": "Salvar Respostas5",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          920,
          1140
        ],
        "id": "c0ff68f3-782b-47af-9bce-fc28d12c1572",
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      },
      {
        "parameters": {
          "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nlet risco = 'nenhum';\nlet priority = 'low';\nfor (item of items) {\n\n  const results =  item.json.submission.results; \n  dados_voluntaria = {\n\t\tnome: results[\"1_nome_completo\"],\n\t\temail_cadastro: results[\"2_email_de_cadastro\"]\n\t}\n\tlet dados_acolhida = {\n\t\tnome: results[\"3_nome_da_acolhida\"],\n\t}\n\n\tlet contrato = {\n\t\tacolhida_segue_em_atendimento: results[\"4_a_acolhida_segue_em_ate\"],\n\t\tassidua_atendimentos: results['5_a_acolhida_tem_sido_ass'],\n\t\tmotivo_nao_assidua: results[\"51_selecione_o_motivo_aba\"],\n\t\tacolhida_respeita_contrato: results[\"6_a_acolhida_respeita_os\"],\n\t\tfrequencia_atendimento_fora_do_horario: results[\"61__com_qual_frequencia_t\"]\n\t}\n\n\tlet acompanhamento_psicologico = {\n\t\tsubmetida_novas_violencias: results[\"7_a_acolhida_foi_submetid\"],\n\t\tcomentario_sobre_novas_violencias: results[\"71_caso_queira_comentar_s\"],\n\t\taspectos_psicologicos: results[\"8_aspectos_psicologicos_t\"],\n\t\tnecessidade_servico_publico: results[\"9_durante_o_atendimento_v\"],\n\t\tpor_que_referenciou_servico_publico: results[\"9_por_que\"],\n\t\tquais_instituicoes: results[\"9_para_qualis_instituicao\"],\n\t\triscos_suicidio: results[\"10_voce_se_preocupa_ou_pe\"]\n\t}\n\t\n\tlet aspectos_socioeconomicos = {\n\t\tapresenta_condicao_hipossuficiencia: results[\"11_a_acolhida_ainda_apres\"],\n\t\tmotivo_nao_condicao_hipossuficiencia: results[\"111_informe_aqui_os_motiv\"]\n\t}\n\t\n\tlet psicologa_voluntaria = {\n\t\ttem_contato_advogada: results[\"12_caso_a_acolhida_esteja\"],\n\t\tsolicitou_ajuda_mapa: results[\"13_voce_solicitou_ajuda_d\"],\n\t\tse_sentiu_orientada: results[\"13_sentiuse_orientada\"],\n\t\tse_sentiu_acolhida: results[\"13_se_sentiu_acolhida_pel\"],\n\t\tparticipa_encontros_discussao: \tresults[\"14_voce_participa_dos_enc\"],\n\t\tparticipa_grupo_whatsapp_estado:results[\"15_voce_participa_do_grup\"],\n\t\tcomo_se_sente_atendimento: results[\"16_se_desejar_relate_como\"]\n\t}\n\n\t// Seção contrato\n\tif (contrato.assidua_atendimentos === 'Não' ||\n\tcontrato.acolhida_respeita_contrato === 'Não') {\n\t\triority = 'normal'\n\t\trisco = 'moderado'\n\t}\n\n\t// Seção acompanhamento psicológico\n\tif(acompanhamento_psicologico.necessidade_servico_publico === 'Sim') {\n\t\tpriority = 'normal'\n\t\trisco = 'moderado'\t\n\t}\n\n\tif (acompanhamento_psicologico.submetida_novas_violencias || acompanhamento_psicologico.riscos_suicidio === 'Sim' ) {\n\t\tpriority = 'urgent'\n\t\trisco = 'extremo'\t\n\t}\n\t\n\tlet answers = {dados_voluntaria, dados_acolhida, contrato, acompanhamento_psicologico, aspectos_socioeconomicos, psicologa_voluntaria, risco: risco}\n\tconst user_id = item.json[\"submission\"][\"lead\"][\"fields\"][\"core\"][\"user_id\"][\"value\"] \n\n  let body_ticket = 'RISCO: ' + risco.toUpperCase() + '\\\\n\\\\nDADOS DA VOLUNTÁRIA:\\\\nNome: ' + dados_voluntaria.nome +'\\\\nEmail: ' + dados_voluntaria.email_cadastro +\n\t'\\\\n\\\\nDADOS DA ACOLHIDA\\\\nNome: ' + dados_acolhida.nome + \n\t'\\\\n\\\\nSOBRE O CONTRATO\\\\nA acolhida segue em atendimento: ' + contrato.acolhida_segue_em_atendimento +\t\n\t'\\\\nA acolhida tem sido assidua nos atendimentos: ' + contrato.assidua_atendimentos + \n\t//condição assiduidade nos atendimentos\n\t(contrato.assidua_atendimentos === 'Não' ? '\\\\nMotivo: ' + contrato.motivo_nao_assidua: '') +\n\t//respeito ao contrato\n\t'\\\\nA acolhida respeita o contrato estabelecido relacionado ao atendimento: ' + contrato.acolhida_respeita_contrato + \n\t//condição atendimento alem do horario estabelecido \n\t(contrato.acolhida_respeita_contrato === 'Não'? '\\\\nFrequência que procura além do horário de atendimento: ' + contrato.frequencia_atendimento_fora_do_horario : '' ) +\n\n\n  //acompanhamento_psicologico\n\t'\\\\n\\\\nACOMPANHAMENTO PSICOLÓGICO\\\\nA acolhida foi submetida a novas violências: ' + acompanhamento_psicologico.submetida_novas_violencias +\n\t//comentou sobre as violencias\n\t(acompanhamento_psicologico.comentario_sobre_novas_violencias ? '\\\\nComentário sobre novas violências que a acolhida foi submetida: ' + acompanhamento_psicologico.comentario_sobre_novas_violencias : '') +\n\t//aspectos psicológicos\n\t'\\\\nA Aspectos psicológicos trabalhados: ' + acompanhamento_psicologico.aspectos_psicologicos +\n\t//necessidade de serviço público\n\t'\\\\nNecessidade de referenciar a acolhida para algum serviço público: ' + acompanhamento_psicologico.necessidade_servico_publico +\n\t//se sim, por quê?\n\t(acompanhamento_psicologico.por_que_referenciou_servico_publico ? '\\\\nPor quê?: ' + acompanhamento_psicologico.por_que_referenciou_servico_publico : '') +\n\t//se sim, para qual(is) instituições?\n\t(acompanhamento_psicologico.quais_instituicoes ? '\\\\nNome(s) da(s) instituição(ões) pública(s): ' + acompanhamento_psicologico.quais_instituicoes : '') +\n\t//riscos suicídio\n\t'\\\\nRiscos suicídio: ' + acompanhamento_psicologico.riscos_suicidio +\n\n\t//Aspectos Socioeconomicos\n\t'\\\\n\\\\nASPECTOS SOCIOECONÔMICOS\\\\nA acolhida apresenta condição de hipossuficiência: ' + aspectos_socioeconomicos.apresenta_condicao_hipossuficiencia +\n\t//Se não, motivo\n\t(aspectos_socioeconomicos.motivo_nao_condicao_hipossuficiencia ? '\\\\nMotivos de não apresentar condição de hipossuficiência para o atendimento: ' + aspectos_socioeconomicos.motivo_nao_condicao_hipossuficiencia : '') +\n\n\t//Sobre a psicológa voluntária\n\t'\\\\n\\\\nSOBRE A PSICOLÓGA VOLUNTÁRIA'+ \n\t//Tem contato com advogada\n\t(psicologa_voluntaria.tem_contato_advogada ? '\\\\nCaso haja acompanhamento jurídico, a psicológa segue em contato com a advogada?: ' + psicologa_voluntaria.tem_contato_advogada : '') +\n\t//Solicitou ajuda\n\t'\\\\nSolicitou ajuda da equipe técnica do mapa: ' + psicologa_voluntaria.solicitou_ajuda_mapa +\n\t//Sentiu-se orientada\n\t(psicologa_voluntaria.se_sentiu_orientada ? '\\\\nSentiu-se orientada: ' + psicologa_voluntaria.se_sentiu_orientada : '') +\n\t//Sentiu-se acolhida\n\t(psicologa_voluntaria.se_sentiu_acolhida ? '\\\\nSentiu-se acolhida: ' + psicologa_voluntaria.se_sentiu_acolhida : '') +\n\t//Participa dos encontros de Discussão de Caso do projeto\n\t'\\\\nParticipa dos encontros de Discussão de Caso do projeto: ' + psicologa_voluntaria.participa_encontros_discussao +\n\t//Participa do grupo de Whatsapp\n\t'\\\\nParticipa do grupo de whatsapp: ' + psicologa_voluntaria.participa_grupo_whatsapp_estado +\n\t//Relato de como se sente\n\t(psicologa_voluntaria.como_se_sente_atendimento ? '\\\\nRelato de como se sente em relação ao atendimento psicológico: ' + psicologa_voluntaria.como_se_sente_atendimento : '')\n\t\n\tlet answers_txt = JSON.stringify(answers).replaceAll('Sim',true).replaceAll('Não',false)\n\tanswers_txt = answers_txt.replaceAll('false quis informar','Não quis informar').replaceAll('\"true\"', 'true').replaceAll('\"false\"', 'false')\n\titem.json= {\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\tuser_id,\n              answers,\n\t\t\t\t\t\t\tbody_ticket,\t\n\t\t\t\t\t\t\tanswers_txt\t\t\t\t\t\n\t\t\t\t\t\t}\n\titem.json.answers.risco =item.json.answers.risco.toUpperCase();\n}\n\nreturn items[items.length - 1]; "
        },
        "name": "Formata - Acomp Psicológico 2",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          480,
          920
        ],
        "id": "c57c22a3-1c42-4847-8a2c-c45c0b79a68b"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://mapadoacolhimento.zendesk.com/api/v2/tickets",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpBasicAuth",
          "sendBody": true,
          "specifyBody": "json",
          "jsonBody": "={ \n\t\"ticket\":{\n \t\t\"requester_id\":{{$node[\"Formata - Acomp Psicológico 2\"].json[\"user_id\"]}},\n \t\t\"organization_id\": 360282119532,\n \t\t\"description\": \"Importado via N8N\",\n        \"tags\": [\"acompanhamento-2\"], \n \t\t\"status\": \"new\",\n   \t\t\"priority\": \"{{$node[\"Formata - Acomp Psicológico 2\"].json[\"priority\"]}}\",\n \t\t\"subject\": \"[Acompanhamento 2] {{$node[\"Formata - Acomp Psicológico 2\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\",\n \t\t\"comment\": {\n \t\t\t\t\"body\": \"{{$node[\"Formata - Acomp Psicológico 2\"].json[\"body_ticket\"]}}\",\n \t\t\t\"public\": false\n \t\t}\n\t}\n}",
          "options": {}
        },
        "id": "6204d55b-8d2d-44b9-b595-f5eb78f7ffcf",
        "name": "Criar Novo Ticket (Acomp Psic 2)",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          720,
          920
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "endpoint": "https://api-graphql.bonde.org/v1/graphql",
          "requestFormat": "json",
          "query": "=mutation InsertMDAFormAnswers ($answers: json) {\n\tinsert_mda_forms_answers(objects: {answers: $answers, form: \"acompanhamento-psicologico-2\", msr_name: \"{{$node[\"Formata - Acomp Psicológico 2\"].json[\"answers\"][\"dados_acolhida\"][\"nome\"]}}\", volunteer_email: \"{{$node[\"Formata - Acomp Psicológico 2\"].json[\"answers\"][\"dados_voluntaria\"][\"email_cadastro\"]}}\", organization_id: 360282119532, form_id: {{$node[\"Webhook\"].json[\"body\"][\"mautic.form_on_submit\"][0][\"submission\"][\"form\"][\"id\"]}}, ticket_id: {{$node[\"Criar Novo Ticket (Acomp Psic 2)\"].json[\"ticket\"][\"id\"]}}}){\n\taffected_rows\t\n}\n}",
          "variables": "={\n\t\"answers\": {{$node[\"Formata - Acomp Psicológico 2\"].json[\"answers_txt\"]}}\t\t\n}"
        },
        "id": "cfc86bfd-ac6b-4bce-bd63-4257e0a7453f",
        "name": "Salvar Respostas 6",
        "type": "n8n-nodes-base.graphql",
        "typeVersion": 1,
        "position": [
          920,
          920
        ],
        "credentials": {
          "httpHeaderAuth": {
            "id": "nhq3GDSBeWJ5XE1l",
            "name": "[PROD] BONDE api-graphql"
          }
        }
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Item Lists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "Formata - Acomp Psicologico 1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Acomp Juridico 1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Acomp Psicológico 2",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Formata - Acomp Juridico 2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item Lists": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (acomp juridico 1)": {
        "main": [
          [
            {
              "node": "Salvar Respostas",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (acomp psicologico)": {
        "main": [
          [
            {
              "node": "Salvar Respostas2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Acomp Juridico 1": {
        "main": [
          [
            {
              "node": "Criar novo ticket (acomp juridico 1)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Acomp Psicologico 1": {
        "main": [
          [
            {
              "node": "Criar novo ticket (acomp psicologico)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar novo ticket (acomp juridico 2)": {
        "main": [
          [
            {
              "node": "Salvar Respostas5",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Acomp Juridico 2": {
        "main": [
          [
            {
              "node": "Criar novo ticket (acomp juridico 2)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Criar Novo Ticket (Acomp Psic 2)": {
        "main": [
          [
            {
              "node": "Salvar Respostas 6",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Formata - Acomp Psicológico 2": {
        "main": [
          [
            {
              "node": "Criar Novo Ticket (Acomp Psic 2)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": "HYstwqyTrzYsvJ2P"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "5277f32a-e89b-4c35-8b6d-0887baf855cf",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-16T17:41:58.269Z",
        "updatedAt": "2024-01-16T17:41:58.269Z",
        "id": "E3Tnq8M430hgCQfP",
        "name": "Mapa do acolhimento"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:31:23.727Z",
    "updatedAt": "2024-01-16T21:31:42.000Z",
    "id": "yvHM2u0CX4nJ1msp",
    "name": "[Database pipeline] volunteer_status_history STG",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "5e42b996-437c-4727-a3c8-65bd018d9e69",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT \n   id AS volunteer_id,\n   NOW() AS created_at,\n   condition AS status\nFROM public.volunteers",
          "additionalFields": {}
        },
        "id": "8d3a0af0-db55-4fee-8446-78541d4cea47",
        "name": "Fetch current volunteers status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          680,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "table": "volunteer_status_history",
          "columns": "volunteer_id, status, created_at",
          "additionalFields": {}
        },
        "id": "11d7d638-8bd0-4ea6-8d31-9b82a58503a0",
        "name": "Insert into volunteer_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          900,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch current volunteers status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch current volunteers status": {
        "main": [
          [
            {
              "node": "Insert into volunteer_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "d5c9084e-77c5-46e9-b9e8-82fbf569fb12",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  },
  {
    "createdAt": "2024-02-19T21:33:47.993Z",
    "updatedAt": "2024-02-19T21:49:53.000Z",
    "id": "ywgaun6WRfaHDn2k",
    "name": "[PROD] Enviar e-mails para MSRs que não terminaram de responder a pesquisa da Busara",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "72a24b83-8164-49d0-9236-2a424a22bb0d",
        "name": "When clicking \"Test Workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          980,
          380
        ]
      },
      {
        "parameters": {
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "options": {}
        },
        "id": "ed294794-d222-4a2d-964f-58a2cd5da954",
        "name": "HTTP Request",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          1200,
          380
        ]
      }
    ],
    "connections": {
      "When clicking \"Test Workflow\"": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "dce408e4-3392-436c-adac-a0bde327cd28",
    "triggerCount": 0,
    "tags": []
  },
  {
    "createdAt": "2024-01-16T20:55:47.652Z",
    "updatedAt": "2024-01-24T02:06:22.000Z",
    "id": "yzhI5kfF43h0M29k",
    "name": "[Zendesk Integration] update support_request STG",
    "active": false,
    "nodes": [
      {
        "parameters": {
          "authentication": "basicAuth",
          "httpMethod": "POST",
          "path": "update-support-request",
          "options": {}
        },
        "id": "a3a40ab1-ba03-4fad-8fa0-d779aff5e8c2",
        "name": "Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [
          -520,
          480
        ],
        "webhookId": "87af1e16-be27-4eca-81a8-f8a91c18f090",
        "credentials": {
          "httpBasicAuth": {
            "id": "cw6WdIc7c9HRGleo",
            "name": "Zendesk auth"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const zendesk_ticket_id = item.json.body.id;\n  let status;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  const tags = item.json.body.tags\n  \n\n  if(item.json.body.status_acolhimento === \"solicitação_recebida\" && tags.includes(\"nova-voluntaria-com-prioridade\")){\n     \n    status = \"special_case\";\n  \n  }\n  else {\n    const status_lookup = {\n      \"solicitação_recebida\": \"open\",\n      \"encaminhamento__realizado_para_serviço_público\": \"public_service\",\n      \"encaminhamento__realizado\": \"matched\"\n    }\n\n    status = status_lookup[status_acolhimento]\n    \n  }\n\n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"status\": status\n  }\n  output.push(newItem)\n}\n\nreturn output;"
        },
        "id": "79bf32ca-9c65-4530-ab65-84575f77d24d",
        "name": "Extracts zendesk_ticket_id and support_request_status",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -300,
          480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=SELECT \n\tsupport_request_id, \n\tstatus AS current_status,\n    '{{$json[\"status\"]}}' AS new_status\nFROM match.support_requests\nWHERE zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nLIMIT 1",
          "additionalFields": {}
        },
        "id": "0f1c0029-2969-4e7a-a057-7c97dd8bb2db",
        "name": "Fetch support_request_id and status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          -60,
          480
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"current_status\"]}}",
                "operation": "notEqual",
                "value2": "={{$json[\"new_status\"]}}"
              }
            ]
          }
        },
        "id": "7a454c66-eabf-4166-ad44-e4af3d0d94fa",
        "name": "Is it a new status?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          160,
          480
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "=UPDATE match.support_requests\nSET status = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE support_request_id = {{$json[\"support_request_id\"]}};\n\nINSERT INTO match.support_request_status_history (support_request_id, status, created_at)\nVALUES ({{$json[\"support_request_id\"]}}, '{{$json[\"new_status\"]}}', NOW());",
          "additionalFields": {}
        },
        "id": "bcb141e5-613c-4cf2-892d-fc11c289c896",
        "name": "Update support_request status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          460,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "lveNjRL3anzREWd8",
            "name": "[STG] Postgres account"
          }
        }
      },
      {
        "parameters": {},
        "id": "2f11df6f-8c0a-4321-97fc-6d8a530f3460",
        "name": "NoOp",
        "type": "n8n-nodes-base.noOp",
        "typeVersion": 1,
        "position": [
          460,
          700
        ]
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Extracts zendesk_ticket_id and support_request_status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extracts zendesk_ticket_id and support_request_status": {
        "main": [
          [
            {
              "node": "Fetch support_request_id and status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch support_request_id and status": {
        "main": [
          [
            {
              "node": "Is it a new status?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is it a new status?": {
        "main": [
          [
            {
              "node": "Update support_request status",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "e1c6b72e-7879-4c49-82a5-e2ace5213ce4",
    "triggerCount": 1,
    "tags": [
      {
        "createdAt": "2024-01-09T22:32:23.916Z",
        "updatedAt": "2024-01-09T22:32:23.916Z",
        "id": "JnlufCPRnot361zL",
        "name": "zendesk integration"
      }
    ]
  },
  {
    "createdAt": "2024-01-16T21:30:09.351Z",
    "updatedAt": "2024-01-16T21:30:21.000Z",
    "id": "zx4r7n9Hw2CfG2XH",
    "name": "[Database pipeline] support_request_status_history PROD",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "id": "342f434f-b638-49ca-8f7d-fd845c2cff0f",
        "name": "On clicking 'execute'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          460,
          460
        ]
      },
      {
        "parameters": {
          "operation": "executeQuery",
          "query": "SELECT\n   support_request_id,\n   status,\n   NOW() AS created_at\nFROM match.support_requests",
          "additionalFields": {}
        },
        "id": "0dffde48-5954-480b-9249-85ec4a308a71",
        "name": "Fetch support_requests status",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          720,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      },
      {
        "parameters": {
          "schema": "match",
          "table": "support_request_status_history",
          "columns": "support_request_id, status, created_at",
          "additionalFields": {}
        },
        "id": "38838aae-1250-41fb-ba3d-f695a066c25a",
        "name": "Insert into support_request_status_history",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          940,
          460
        ],
        "credentials": {
          "postgres": {
            "id": "c5mNsjWNXx3mw1Fh",
            "name": "[PROD] Postgres account"
          }
        }
      }
    ],
    "connections": {
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch support_requests status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch support_requests status": {
        "main": [
          [
            {
              "node": "Insert into support_request_status_history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "7b54b51d-06cd-46c7-bff9-2bdd864be85c",
    "triggerCount": 0,
    "tags": [
      {
        "createdAt": "2024-01-16T21:22:09.302Z",
        "updatedAt": "2024-01-16T21:22:09.302Z",
        "id": "8M37j63g33Qdgeyh",
        "name": "database pipeline"
      }
    ]
  }
]"