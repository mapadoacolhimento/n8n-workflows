{
  "active": true,
  "connections": {
    "Webhook Volunteer": {
      "main": [
        [
          {
            "node": "Normalize Zendesk input from volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checks if we need to update volunteer": {
      "main": [
        [
          {
            "node": "Volunteer exists in our DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check city, state and zipcode1": {
      "main": [
        [
          {
            "node": "Busca as coordenadas do endereço2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add null lat/lng1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteer exists in our DB": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Zendesk input from volunteer": {
      "main": [
        [
          {
            "node": "Checks if we need to update volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Updates volunteer_availability geolocation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Updates volunteer geolocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca as coordenadas do endereço2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Check city, state and zipcode1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Updates volunteer personal data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Updates volunteer availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checks if we need to update support_request": {
      "main": [
        [
          {
            "node": "MSR exists in our DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update?": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          },
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Check city, state and zipcode2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Updates support_request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add null lat/lng": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSR exists in our DB": {
      "main": [
        [
          {
            "node": "Should update?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check city, state and zipcode2": {
      "main": [
        [
          {
            "node": "Busca as coordenadas do endereço1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca as coordenadas do endereço1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook MSR1": {
      "main": [
        [
          {
            "node": "Normalize Zendesk input from MSR1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Zendesk input from MSR1": {
      "main": [
        [
          {
            "node": "Checks if we need to update support_request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-03-28T15:36:01.899Z",
  "id": "rOmbpGpHHiaeMYz6",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[PROD]  Integração Zendesk/BD",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-volunteer-info",
        "options": {}
      },
      "id": "bcdb5e52-457b-42df-b0bb-af0080df3012",
      "name": "Webhook Volunteer",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -580,
        1060
      ],
      "webhookId": "16ad3fc0-bbeb-4d7e-a244-263cbd68f0e9"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  id AS volunteer_id,\n  '{{ $json.body.city }}' AS new_city,\n  '{{ $json.body.state }}' AS new_state,\n  '{{ $json.body.zipcode }}' AS new_zipcode,\n  '{{ $json.body.first_name }}' AS new_first_name,\n  '{{ $json.body.availability }}'::INT AS new_availability,\n  '{{ $json.body.phone }}' AS new_phone,\n  '{{ $json.body.register_number }}' AS new_register_number,\n  '{{ $json.body.email }}' AS new_email,\n  CASE \n    WHEN \n      city != '{{ $json.body.city }}' OR \n      state != '{{ $json.body.state }}' OR \n      zipcode != '{{ $json.body.zipcode }}'\n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_geolocation,\n  CASE WHEN availability != '{{ $json.body.availability }}'::INT AND '{{ $json.body.availability }}'::INT != 0 THEN TRUE ELSE FALSE END AS should_update_availability,\n  CASE \n    WHEN \n      first_name != '{{ $json.body.first_name }}' OR \n      phone != '{{ $json.body.phone }}' OR \n      register_number != '{{ $json.body.register_number }}' OR\n      email != '{{ $json.body.email }}'\n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_personal\nFROM public.volunteers\nWHERE zendesk_user_id = {{ $json.body.volunteer_zendesk_user_id }}",
        "options": {}
      },
      "id": "5f1be305-e048-468e-9c7e-cd2f0aff1236",
      "name": "Checks if we need to update volunteer",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -80,
        1060
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cd3132a5-7821-49ae-a080-957a931cb612",
              "leftValue": "={{ $json.new_city }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "e0a033c3-38d5-4583-943e-43fffb34b624",
              "leftValue": "={{ $json.new_state }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f95c4be6-693b-4809-b28c-a583b7c813ca",
              "leftValue": "={{ $json.new_zipcode }}",
              "rightValue": "=not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "16588adf-6b52-4e41-b373-b82c16861721",
      "name": "Check city, state and zipcode1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        860
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"coordinates\": {\n    \"lat\": null,\n    \"lng\": null\n  }\n}\n",
        "options": {}
      },
      "id": "343036ab-e0b0-44bd-abff-014b6d6ace88",
      "name": "Add null lat/lng1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        1120,
        960
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.volunteer_availability\nSET \n  city = '{{ $json.city }}', \n  state = '{{ $json.state }}', \n  lat = {{ $json.coordinates.lat }}, \n  lng = {{ $json.coordinates.lng }}, \n  updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "3c57cc76-dfa7-44a6-af83-4478b4e218af",
      "name": "Updates volunteer_availability geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1660,
        900
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "93753f6a-58ca-4ad5-a9ce-0b173efe7565",
              "leftValue": "={{ $json.volunteer_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c5bc07ef-f04e-409e-b766-cad48cf18c19",
      "name": "Volunteer exists in our DB",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        140,
        1060
      ]
    },
    {
      "parameters": {
        "errorMessage": "=A voluntária com Zendesk User ID '{{$node[\"Webhook Volunteer\"].json['body']['volunteer_zendesk_user_id']}}' não existe no nosso banco de dados."
      },
      "id": "c327bad7-f7bb-4ec6-8b26-3407bb9163d7",
      "name": "Stop and Error1",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        320,
        1260
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE volunteers\nSET availability = {{ $json.new_availability }}, updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }};\n\nUPDATE public.volunteer_availability\nSET max_matches = {{ $json.new_availability }}, updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }};",
        "options": {}
      },
      "id": "cbafbd71-a04a-444f-9769-b9ed7a390665",
      "name": "Updates volunteer availability",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        680,
        1260
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const city =\n    item.json.body.city === 'ZERO_RESULTS' ||\n    item.json.body.city === ''\n      ? 'not_found'\n      : item.json.body.city\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .replace(\"'\", ' ')\n          .replace(/ *\\([^)]*\\) */g, '')\n          .toUpperCase();\n  const onlyNumbersZipcode = item.json.body.zipcode.replace(/[^0-9\\\\.]+/g, '').slice(0, 8);\n  const zipcode = onlyNumbersZipcode || 'not_found';\n  item.json.body.city = city;\n  item.json.body.zipcode = zipcode;\n  item.json.body.state = item.json.body.state || 'not_found';\n\n  const first_name = item.json.body.first_name;\n  item.json.body.first_name = first_name.charAt(0).toUpperCase() + first_name.slice(1);\n  item.json.body.phone = item.json.body.phone.replace(/[^0-9\\\\.]+/g, '');\n  item.json.body.register_number = item.json.body.register_number.replace(/[^0-9\\\\.]+/g, '');\n  item.json.body.availability = Number(item.json.body.availability) || 0\n}\n\nreturn $input.all();\n"
      },
      "id": "f0480c15-63c6-4f7c-a6f5-fe984ce2ef6c",
      "name": "Normalize Zendesk input from volunteer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -340,
        1060
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  city = '{{ $json.new_city }}', \n  state = '{{ $json.new_state }}', \n  zipcode = '{{ $json.new_zipcode }}',\n  latitude = {{ $json.coordinates.lat }}, \n  longitude = {{ $json.coordinates.lng }}, \n  \n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "d4866656-0b3a-4bf7-bf6b-0dd4df2cb9c0",
      "name": "Updates volunteer geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1660,
        1160
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  first_name = '{{ $json.new_first_name }}',\n  phone = '{{ $json.new_phone }}',\n  register_number = '{{ $json.new_register_number }}',\n  email = '{{ $json.new_email }}',\n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "9aaa0c13-89ef-4ba0-a154-c90a413d2854",
      "name": "Updates volunteer personal data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        680,
        1080
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "517cd779-2807-48c2-9e55-5f91d0172aa0",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1400,
        1040
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "=https://voluntaria.mapadoacolhimento.org/address",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "city",
              "value": "={{ $json.new_city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.new_state }}"
            },
            {
              "name": "zipcode",
              "value": "={{ $json.new_zipcode === 'not_found' ? '' : $json.new_zipcode  }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f3071ecc-ecdb-41f9-89a7-12c8f6fbd913",
      "name": "Busca as coordenadas do endereço2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1120,
        660
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.should_update_geolocation }}",
                    "rightValue": "{{ true }}",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "geolocation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "1206305f-a715-4cb0-990a-d942246a7212",
                    "leftValue": "={{ $json.should_update_personal }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "personal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "26fd6c46-a2eb-4299-a425-e7978d0102fd",
                    "leftValue": "={{ $json.should_update_availability }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "availability"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "id": "38633129-37f3-4211-a9a1-c5058cff13a4",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        420,
        1040
      ]
    },
    {
      "parameters": {},
      "id": "7f1e49c8-2d5e-4b6f-bd15-77dd4dc027a7",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        800,
        -260
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  support_request_id,\n  '{{ $json.body.city }}' AS new_city,\n  '{{ $json.body.state }}' AS new_state,\n  '{{ $json.body.zipcode }}' AS new_zipcode,\n  CASE WHEN city != '{{ $json.body.city }}' OR state != '{{ $json.body.state }}' THEN TRUE ELSE FALSE END AS should_update\nFROM match.support_requests\nWHERE msr_id = {{ $json.body.msr_zendesk_user_id }}",
        "options": {}
      },
      "id": "6f4569ee-8389-437c-a06b-c173b3e589d8",
      "name": "Checks if we need to update support_request",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        100,
        -340
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9bbb07e8-f753-4190-b6a4-ca7c6eee7875",
              "leftValue": "={{ $json.should_update }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0b3bfeaa-c6f7-4047-89c3-24480d5c08cc",
      "name": "Should update?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        580,
        -420
      ]
    },
    {
      "parameters": {},
      "id": "8ba1dee2-bdbe-4ecc-a944-f2f411d21ec2",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        840,
        -560
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "dee9276a-1bff-4cca-8f5a-752983f4343a",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1740,
        -360
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE match.support_requests\nSET city = '{{ $json.new_city }}', state = '{{ $json.new_state }}', lat = {{ $json.coordinates.lat }}, lng = {{ $json.coordinates.lng }}, updated_at = NOW()\nWHERE support_request_id = {{ $json.support_request_id }}",
        "options": {}
      },
      "id": "a901a263-f02a-4003-932d-eacf68d925fe",
      "name": "Updates support_request",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1920,
        -360
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"coordinates\": {\n    \"lat\": null,\n    \"lng\": null\n  }\n}\n",
        "options": {}
      },
      "id": "7e2b8334-e6ca-425f-a688-6ab1022d3c8f",
      "name": "Add null lat/lng",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        1380,
        -500
      ]
    },
    {
      "parameters": {
        "errorMessage": "=A MSR com Zendesk User ID '{{$node[\"Webhook MSR1\"].json['body']['msr_zendesk_user_id']}}' não existe no nosso banco de dados."
      },
      "id": "d2beda2f-1319-42be-a15d-75fe980436ca",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        500,
        -120
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "43ab3526-3a4b-49a3-b6db-2e482b0f9e31",
              "leftValue": "={{ $json.support_request_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d244d813-d76a-49d8-91f9-a7df22f0d25d",
      "name": "MSR exists in our DB",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        320,
        -340
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cd3132a5-7821-49ae-a080-957a931cb612",
              "leftValue": "={{ $json.new_city }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "e0a033c3-38d5-4583-943e-43fffb34b624",
              "leftValue": "={{ $json.new_state }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f95c4be6-693b-4809-b28c-a583b7c813ca",
              "leftValue": "={{ $json.new_zipcode }}",
              "rightValue": "=not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "e29910fe-3188-4e30-a2ff-61ade5a5c970",
      "name": "Check city, state and zipcode2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1060,
        -600
      ]
    },
    {
      "parameters": {
        "url": "=https://voluntaria.mapadoacolhimento.org/address",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "city",
              "value": "={{ $json.new_city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.new_state }}"
            },
            {
              "name": "zipcode",
              "value": "={{ $json.new_zipcode === 'not_found' ? '' : $json.new_zipcode  }}"
            }
          ]
        },
        "options": {}
      },
      "id": "08348b76-33c6-4016-812a-f9d8d86eca48",
      "name": "Busca as coordenadas do endereço1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1360,
        -820
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-msr-info",
        "options": {}
      },
      "id": "3abede05-3b11-4039-b465-b307a16fc1eb",
      "name": "Webhook MSR1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -340,
        -340
      ],
      "webhookId": "764b17d4-2fc9-4fef-b453-1df9929aa7d8"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const city =\n    item.json.body.city === 'ZERO_RESULTS' ||\n    item.json.body.city === ''\n      ? 'not_found'\n      : item.json.body.city\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .replace(\"'\", ' ')\n          .replace(/ *\\([^)]*\\) */g, '')\n          .toUpperCase();\n  const onlyNumbersZipcode = item.json.body.zipcode.replace(/[^0-9\\\\.]+/g, '').slice(0,8)\n  const zipcode = onlyNumbersZipcode || 'not_found';\n  item.json.body.city = city;\n  item.json.body.zipcode = zipcode;\n  item.json.body.state = item.json.body.state || 'not_found';\n}\n\nreturn $input.all();\n"
      },
      "id": "d1f5d2bc-104d-48d9-a2cf-a119c57e825c",
      "name": "Normalize Zendesk input from MSR1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        -340
      ]
    }
  ],
  "pinData": {
    "Webhook Volunteer": [
      {
        "json": {
          "headers": {
            "host": "mapadoacolhimento.app.n8n.cloud",
            "user-agent": "Zendesk Webhook",
            "content-length": "258",
            "accept-encoding": "gzip",
            "authorization": "Basic ZGV2QG1hcGEub3JnLmJyL3Rva2VuOkxWMHJoR2hxYzd1UTB2OGwzbTFtUFhwdmVZVFNMWG93UU4xbEJLZFk=",
            "content-type": "application/json; charset=utf-8",
            "traceparent": "00-00000000000000000524381e8a01d79a-0524381e8a01d79a-00",
            "tracestate": "dd=s:-1",
            "x-forwarded-for": "216.198.2.146",
            "x-forwarded-host": "mapadoacolhimento.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-b8dcdf845-fv7rg",
            "x-is-trusted": "no",
            "x-real-ip": "216.198.2.146",
            "x-request-id": "4e9a6584-7197-4b34-9bbc-31d6dcc0b187",
            "x-zendesk-account-id": "9040899",
            "x-zendesk-webhook-id": "01HSGXS4E94S3BH8DFMQKPAVDJ",
            "x-zendesk-webhook-invocation-id": "01J18MQ9KHWGFRDMFWCB2R8939",
            "x-zendesk-webhook-signature": "VvGtxn7WiICMdpWIwVwPR3oDmFuYKYEAY9lM/eiPCbo=",
            "x-zendesk-webhook-signature-timestamp": "2024-06-25T21:27:10Z"
          },
          "params": {},
          "query": {},
          "body": {
            "volunteer_zendesk_user_id": "412308249572",
            "city": "Divinópolis",
            "state": "MG",
            "first_name": "Emilly",
            "availability": "2",
            "zipcode": "35500001",
            "phone": "(37) 9 8404-8004",
            "register_number": "207989",
            "email": "advemillymoura@gmail.com"
          },
          "webhookUrl": "https://mapadoacolhimento.app.n8n.cloud/webhook/update-volunteer-info",
          "executionMode": "production"
        }
      }
    ],
    "Webhook MSR1": [
      {
        "json": {
          "headers": {
            "host": "mapadoacolhimento.app.n8n.cloud",
            "user-agent": "Zendesk Webhook",
            "content-length": "97",
            "accept-encoding": "gzip",
            "authorization": "Basic ZGV2QG1hcGEub3JnLmJyL3Rva2VuOkxWMHJoR2hxYzd1UTB2OGwzbTFtUFhwdmVZVFNMWG93UU4xbEJLZFk=",
            "content-type": "application/json; charset=utf-8",
            "traceparent": "00-000000000000000067024ce88b4152f4-67024ce88b4152f4-00",
            "tracestate": "dd=s:-1",
            "x-forwarded-for": "216.198.2.146",
            "x-forwarded-host": "mapadoacolhimento.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-78bdf4fd45-94gdz",
            "x-real-ip": "216.198.2.146",
            "x-request-id": "54a4f645-7f5b-4b1b-b758-975028bc45d8",
            "x-zendesk-account-id": "9040899",
            "x-zendesk-webhook-id": "01HSGNVFZXZ0VD5KXJJC8YG4Z7",
            "x-zendesk-webhook-invocation-id": "01HY3CJ7EXJN90KD6VD6J611T7",
            "x-zendesk-webhook-signature": "/8Ein9QYgP5N9kLb3pSkPGiAXaHQN4RBBoJPVLIsbD4=",
            "x-zendesk-webhook-signature-timestamp": "2024-05-17T13:41:18Z"
          },
          "params": {},
          "query": {},
          "body": {
            "msr_zendesk_user_id": "421937526331",
            "city": "São Paulo",
            "state": "SP",
            "zipcode": ""
          },
          "webhookUrl": "https://mapadoacolhimento.app.n8n.cloud/webhook/update-msr-info",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "HYstwqyTrzYsvJ2P"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-09T22:32:23.916Z",
      "updatedAt": "2024-01-09T22:32:23.916Z",
      "id": "JnlufCPRnot361zL",
      "name": "zendesk integration"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-07-25T19:17:03.000Z",
  "versionId": "9ba53008-4cbb-479b-aa90-cfa714963046"
}