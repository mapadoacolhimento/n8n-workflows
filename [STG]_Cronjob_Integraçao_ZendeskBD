{
  "active": false,
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get all volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zendesk": {
      "main": [
        [
          {
            "node": "Normalize Zendesk input from volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca as coordenadas do endereço2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checks if we need to update volunteer": {
      "main": [
        [
          {
            "node": "Volunteer exists in our DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check city, state and zipcode1": {
      "main": [
        [
          {
            "node": "Busca as coordenadas do endereço2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add null lat/lng1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteer exists in our DB": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Zendesk input from volunteer": {
      "main": [
        [
          {
            "node": "Checks if we need to update volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Updates volunteer_availability geolocation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Updates volunteer geolocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer_availability geolocation": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer personal data": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer geolocation": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all volunteers": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Zendesk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Check city, state and zipcode1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Updates volunteer personal data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check if volunteer is available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if volunteer is available": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-03-11T13:23:50.647Z",
  "id": "hvGlEYCQIxjOojaS",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[STG] Cronjob Integração Zendesk/BD",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 21,
              "triggerAtMinute": 13
            }
          ]
        }
      },
      "id": "4f3d22ca-d11d-427f-be1e-a1a867557900",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        180,
        360
      ]
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "get",
        "id": "={{ $json.zendesk_user_id }}"
      },
      "id": "4ac233dd-f9b2-4d85-a490-4890932075af",
      "name": "Zendesk",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        940,
        380
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {},
      "id": "b9740dce-712b-4dbd-90cc-9b6c61074f5b",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        900,
        100
      ]
    },
    {
      "parameters": {
        "url": "=https://novoqueroacolher.staging.bonde.org/address",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "city",
              "value": "={{ $json.new_city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.new_state }}"
            },
            {
              "name": "zipcode",
              "value": "={{ $json.new_zipcode === 'not_found' ? '' : $json.new_zipcode  }}"
            }
          ]
        },
        "options": {}
      },
      "id": "12a61c2e-c41a-4fe4-91e7-e737be167507",
      "name": "Busca as coordenadas do endereço2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        3180,
        -140
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  id AS volunteer_id,\n  '{{ $json.user_fields.city }}' AS new_city,\n  '{{ $json.user_fields.state }}' AS new_state,\n  '{{ $json.user_fields.zipcode }}' AS new_zipcode,\n  '{{ $json.user_fields.first_name }}' AS new_first_name,\n  '{{ $json.user_fields.availability }}'::INT AS new_availability,\n  '{{ $json.phone }}' AS new_phone,\n  '{{ $json.user_fields.registration_number }}' AS new_register_number,\n  '{{ $json.user_fields.condition }}' AS new_volunteer_status,\n  CASE \n    WHEN \n      city != '{{ $json.user_fields.city }}' OR \n      state != '{{ $json.user_fields.state }}' OR \n      zipcode != '{{ $json.user_fields.zipcode }}'\n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_geolocation,\n  CASE WHEN availability != '{{ $json.user_fields.availability }}'::INT AND '{{ $json.user_fields.availability }}'::INT != 0 THEN TRUE ELSE FALSE END AS should_update_availability,\n  CASE \n    WHEN \n      first_name != '{{ $json.user_fields.first_name }}' OR \n      phone != '{{ $json.user_fields.whatsapp }}' OR \n      register_number != '{{ $json.user_fields.registration_number }}' \n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_personal,\n  CASE WHEN condition != '{{ $json.user_fields.condition }}' THEN TRUE ELSE FALSE END AS should_update_status\nFROM public.volunteers\nWHERE zendesk_user_id = {{ $json.id }}",
        "options": {}
      },
      "id": "e2e4aa00-2a34-4835-b35a-cb2b25090d0e",
      "name": "Checks if we need to update volunteer",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1500,
        380
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cd3132a5-7821-49ae-a080-957a931cb612",
              "leftValue": "={{ $json.new_city }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "e0a033c3-38d5-4583-943e-43fffb34b624",
              "leftValue": "={{ $json.new_state }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f95c4be6-693b-4809-b28c-a583b7c813ca",
              "leftValue": "={{ $json.new_zipcode }}",
              "rightValue": "=not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "7f7748db-a65c-4986-b50c-b9df7625512d",
      "name": "Check city, state and zipcode1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2740,
        20
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"coordinates\": {\n    \"lat\": null,\n    \"lng\": null\n  }\n}\n",
        "options": {}
      },
      "id": "d88945d7-5f0d-4e09-86d8-6fba6853ccea",
      "name": "Add null lat/lng1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        3100,
        80
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.volunteer_availability\nSET \n  city = '{{ $json.city }}', \n  state = '{{ $json.state }}', \n  lat = {{ $json.coordinates.lat }}, \n  lng = {{ $json.coordinates.lng }}, \n  updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "8fc08eca-9dd6-457d-a943-8a2bec2802db",
      "name": "Updates volunteer_availability geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3620,
        340
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "93753f6a-58ca-4ad5-a9ce-0b173efe7565",
              "leftValue": "={{ $json.volunteer_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6fafe113-90ad-4c29-9f63-272fcf4bfe3e",
      "name": "Volunteer exists in our DB",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1740,
        380
      ]
    },
    {
      "parameters": {
        "errorMessage": "=A voluntária com Zendesk User ID '{{$node[\"Webhook Volunteer\"].json['body']['volunteer_zendesk_user_id']}}' não existe no nosso banco de dados."
      },
      "id": "7c851d4d-b1aa-4520-8e0b-520804771a04",
      "name": "Stop and Error1",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        2040,
        660
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const city =\n    item.json.user_fields.city === 'ZERO_RESULTS' ||\n    item.json.user_fields.city === ''\n      ? 'not_found'\n      : item.json.user_fields.city\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .replace(\"'\", ' ')\n          .replace(/ *\\([^)]*\\) */g, '')\n          .toUpperCase();\n  const onlyNumbersZipcode = item.json.user_fields.cep.replace(/[^0-9\\\\.]+/g, '')\n  const zipcode = onlyNumbersZipcode || 'not_found';\n  item.json.user_fields.city = city;\n  item.json.user_fields.zipcode = zipcode;\n  item.json.user_fields.state = item.json.user_fields.state || 'not_found';\n\n  const first_name = item.json.name.split(\" \")[0];\n  item.json.user_fields.first_name = first_name.charAt(0).toUpperCase() + first_name.slice(1);\n  const whatsapp = item.json.user_fields.whatsapp?.replace(/[^0-9\\\\.]+/g, '');\n  const phone = item.json.phone?.replace(/[^0-9\\\\.]+/g, '')\n  item.json.phone = phone || whatsapp;\n  item.json.user_fields.whatsapp =  phone || whatsapp;\n  item.json.user_fields.registration_number = item.json.user_fields.registration_number.replace(/[^0-9\\\\.]+/g, '');\n  item.json.user_fields.availability = Number(item.json.user_fields.disponibilidade_de_atendimentos) || 0\n}\n\nreturn $input.all();\n"
      },
      "id": "3f794825-34c8-4ae4-afd9-ab4e0259e852",
      "name": "Normalize Zendesk input from volunteer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        380
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  city = '{{ $json.new_city }}', \n  state = '{{ $json.new_state }}', \n  zipcode = '{{ $json.new_zipcode }}',\n  latitude = {{ $json.coordinates.lat }}, \n  longitude = {{ $json.coordinates.lng }}, \n  \n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "9b263506-0580-4b90-b712-15d0c5cd9001",
      "name": "Updates volunteer geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3700,
        -80
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  first_name = '{{ $json.new_first_name }}',\n  phone = '{{ $json.new_phone }}',\n  register_number = '{{ $json.new_register_number }}',\n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "2b09916f-d9a3-4519-94e0-d9e90379051f",
      "name": "Updates volunteer personal data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3440,
        520
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "259b0ccf-5c88-4128-ad0b-72f18801cd06",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3480,
        160
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "2a806595-1782-4e70-8d2c-c43e5ce37241",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3900,
        940
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM volunteers \nWHERE \n  zendesk_user_id IS NOT null AND \n  condition NOT IN ('anti-etica', 'descadastrada')",
        "options": {}
      },
      "id": "f653f28b-6a65-4175-a2b3-69bae053bfef",
      "name": "Get all volunteers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        460,
        360
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {
          "reset": false
        }
      },
      "id": "c7138e38-333e-49c7-a55f-3f2e141166db",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        680,
        360
      ]
    },
    {
      "parameters": {
        "amount": 30,
        "unit": "seconds"
      },
      "id": "633d6a25-95a2-4f28-abbe-299fa72b3903",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        2160,
        1280
      ],
      "webhookId": "ac50b938-b311-4d71-abbb-4fc02dab703d"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteers\nSET \n  condition = '{{ $json.new_status }}',\n  availability = {{ $json.max_matches }}, \n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, '{{$json[\"new_status\"]}}', NOW());\n\nUPDATE public.volunteer_availability\nSET \n  is_available = {{$json[\"is_available\"]}}::boolean, \n  max_matches = {{ $json.max_matches }},\n  updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}};",
        "options": {}
      },
      "id": "ba42da19-551e-49bf-8142-cb07f5051289",
      "name": "Postgres",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2580,
        540
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.should_update_geolocation }}",
                    "rightValue": "{{ true }}",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "geolocation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "1206305f-a715-4cb0-990a-d942246a7212",
                    "leftValue": "={{ $json.should_update_personal }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "personal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "26fd6c46-a2eb-4299-a425-e7978d0102fd",
                    "leftValue": "={{ $json.should_update_availability || $json.should_update_status  }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "availability"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "id": "fdf430cd-8523-4d29-8770-90b617e0e60f",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2040,
        280
      ]
    },
    {
      "parameters": {
        "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const is_available_lookup = {\n      \"disponivel\": 1,\n      \"indisponível_férias\": 0,\n      \"indisponível_maternidade\": 0,\n      \"indisponível_saude\": 0,\n      \"indisponível_trabalho_e_estudo\": 0,\n      \"indisponível_outros_motivos\": 0,\n      \"indisponível_agenda\": 0,\n      \"indisponível_-sem_resposta\": 0,\n      \"dados_incompletos_endereço\": 0,\n      \"dados_incompletos_telefone\": 0,\n      \"dados_incompletos_email\": 0,\n      \"descadastrada\": 0,\n      \"reprovada_estudo_de_caso\": 0,\n      \"reprovada_diretrizes_do_mapa\": 0,\n      \"reprovada_registro_inválido\": 0,\n      \"aprovada\": 1,\n      \"anti-etica\": 0,\n      \"capacitacao\": 0,\n      \"indisponivel_sem_vagas\": 0,\n      \"desabilitada\": 0,\n      \"cadastrada\": 0\n  }\n \n  const volunteer_id = item.json.volunteer_id;\n  const status = item.json.new_volunteer_status;\n  \n  const is_available = is_available_lookup[status]\n    \n  const newItem = {\n    \"volunteer_id\": volunteer_id,\n    \"new_status\": status,\n    \"is_available\": is_available,\n    \"max_matches\": item.json.new_availability\n  }\n  output.push(newItem)\n}\n\nreturn output;"
      },
      "id": "f3b0f54b-fd18-4b9e-8874-9c61df7b5c9a",
      "name": "Check if volunteer is available",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2360,
        540
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-04-14T20:11:34.000Z",
  "versionId": "75bf9480-ede7-45d9-a23e-5888d944f837"
}