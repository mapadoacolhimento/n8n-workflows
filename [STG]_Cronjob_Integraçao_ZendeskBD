{
  "active": false,
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get all volunteers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zendesk": {
      "main": [
        [
          {
            "node": "Filter deleted users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checks if we need to update volunteer": {
      "main": [
        [
          {
            "node": "Volunteer exists in our DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check city, state and zipcode1": {
      "main": [
        [
          {
            "node": "Busca as coordenadas do endereço2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add null lat/lng1": {
      "main": [
        [
          {
            "node": "Updates volunteer geolocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer_availability geolocation": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volunteer exists in our DB": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Zendesk input from volunteer": {
      "main": [
        [
          {
            "node": "Checks if we need to update volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer geolocation": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer personal data": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Updates volunteer_availability geolocation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Updates volunteer geolocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all volunteers": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Zendesk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if volunteer is available": {
      "main": [
        [
          {
            "node": "Updates volunteer availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates volunteer availability": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter deleted users": {
      "main": [
        [
          {
            "node": "Normalize Zendesk input from volunteer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca as coordenadas do endereço2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add null lat/lng1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Check city, state and zipcode1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Updates volunteer personal data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check if volunteer is available",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-03-11T13:23:50.647Z",
  "id": "hvGlEYCQIxjOojaS",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[STG] Cronjob Integração Zendesk/BD",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 13
            }
          ]
        }
      },
      "id": "0fc2a548-33f3-4366-a302-b2c5892fb0fa",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -1660,
        740
      ]
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "get",
        "id": "={{ $json.zendesk_user_id }}"
      },
      "id": "ca1a674c-39ad-492a-b1c1-674cd2fff485",
      "name": "Zendesk",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        -900,
        760
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {},
      "id": "6d499499-71db-4aea-aab3-df2e298e79db",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -940,
        480
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  id AS volunteer_id,\n  '{{ $json.user_fields.city }}' AS new_city,\n  '{{ $json.user_fields.state }}' AS new_state,\n  '{{ $json.user_fields.zipcode }}' AS new_zipcode,\n  '{{ $json.user_fields.first_name }}' AS new_first_name,\n  '{{ $json.user_fields.availability }}'::INT AS new_availability,\n  '{{ $json.phone }}' AS new_phone,\n  '{{ $json.user_fields.registration_number }}' AS new_register_number,\n  '{{ $json.user_fields.condition }}' AS new_volunteer_status,\n  CASE \n    WHEN \n      city != '{{ $json.user_fields.city }}' OR \n      state != '{{ $json.user_fields.state }}' OR \n      zipcode != '{{ $json.user_fields.zipcode }}'\n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_geolocation,\n  CASE WHEN availability != '{{ $json.user_fields.availability }}'::INT AND '{{ $json.user_fields.availability }}'::INT != 0 THEN TRUE ELSE FALSE END AS should_update_availability,\n  CASE \n    WHEN \n      first_name != '{{ $json.user_fields.first_name }}' OR \n      phone != '{{ $json.phone }}' OR \n      register_number != '{{ $json.user_fields.registration_number }}' \n    THEN TRUE \n    ELSE FALSE \n  END AS should_update_personal,\n  CASE WHEN condition != '{{ $json.user_fields.condition }}' THEN TRUE ELSE FALSE END AS should_update_status\nFROM public.volunteers\nWHERE zendesk_user_id = {{ $json.id }}",
        "options": {}
      },
      "id": "034d638e-77ff-4e1e-bd8a-c143ff646c95",
      "name": "Checks if we need to update volunteer",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -120,
        760
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "cd3132a5-7821-49ae-a080-957a931cb612",
              "leftValue": "={{ $json.new_city }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "e0a033c3-38d5-4583-943e-43fffb34b624",
              "leftValue": "={{ $json.new_state }}",
              "rightValue": "not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f95c4be6-693b-4809-b28c-a583b7c813ca",
              "leftValue": "={{ $json.new_zipcode }}",
              "rightValue": "=not_found",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "27871010-c6be-442e-8a14-eaee97e155f3",
      "name": "Check city, state and zipcode1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        940,
        300
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"coordinates\": {\n    \"lat\": null,\n    \"lng\": null\n  }\n}\n",
        "options": {}
      },
      "id": "b541e144-ff2e-42d4-90eb-846f40c168c9",
      "name": "Add null lat/lng1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        1480,
        460
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.volunteer_availability\nSET \n  city = '{{ $json.city }}', \n  state = '{{ $json.state }}', \n  lat = {{ $json.coordinates.lat }}, \n  lng = {{ $json.coordinates.lng }}, \n  updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "f64ea556-f355-491d-86c9-1f6a7440ca13",
      "name": "Updates volunteer_availability geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2000,
        720
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "93753f6a-58ca-4ad5-a9ce-0b173efe7565",
              "leftValue": "={{ $json.volunteer_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8e3a1c18-88e1-4bde-b58f-90dc0dcc0684",
      "name": "Volunteer exists in our DB",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        120,
        760
      ]
    },
    {
      "parameters": {
        "errorMessage": "=A voluntária com Zendesk User ID '{{$node[\"Webhook Volunteer\"].json['body']['volunteer_zendesk_user_id']}}' não existe no nosso banco de dados."
      },
      "id": "77eb3cba-e931-4aee-9c3b-ba94ce5f534d",
      "name": "Stop and Error1",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        420,
        1040
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const city = item.json.user_fields?.city || \"\";\n  const new_city = !city || city === 'ZERO_RESULTS'\n      ? 'not_found'\n      : city\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .replace(\"'\", ' ')\n          .replace(/ *\\([^)]*\\) */g, '')\n          .toUpperCase();\n  const onlyNumbersZipcode = item.json.user_fields.cep?.replace(/[^0-9\\\\.]+/g, '').slice(0,8)\n  const zipcode = onlyNumbersZipcode || 'not_found';\n  item.json.user_fields.city = new_city;\n  item.json.user_fields.zipcode = zipcode;\n  item.json.user_fields.state = item.json.user_fields?.state || 'not_found';\n\n  const first_name = item.json.name.split(\" \")[0];\n  item.json.user_fields.first_name = first_name.charAt(0).toUpperCase() + first_name.slice(1);\n  const whatsapp = item.json.user_fields.whatsapp?.replace(/[^0-9\\\\.]+/g, '');\n  const phone = item.json.phone?.replace(/[^0-9\\\\.]+/g, '')\n  item.json.phone = phone || whatsapp;\n  item.json.user_fields.registration_number = item.json.user_fields.registration_number?.replace(/[^0-9\\\\.]+/g, '');\n  item.json.user_fields.availability = Number(item.json.user_fields?.disponibilidade_de_atendimentos || 0)\n}\n\nreturn $input.all();\n"
      },
      "id": "351f13cb-d6c0-45d8-af4b-d4aa26905795",
      "name": "Normalize Zendesk input from volunteer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        760
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  city = '{{ $json.new_city }}', \n  state = '{{ $json.new_state }}', \n  zipcode = '{{ $json.new_zipcode }}',\n  latitude = {{ $json.coordinates.lat }}, \n  longitude = {{ $json.coordinates.lng }}, \n  \n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "669dada0-a176-4fcb-b648-1fc324d04f93",
      "name": "Updates volunteer geolocation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2080,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET \n  first_name = '{{ $json.new_first_name }}',\n  phone = '{{ $json.new_phone }}',\n  register_number = '{{ $json.new_register_number }}',\n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "c0ee0e8c-f2e3-4c54-b262-40b2cc0d1c9e",
      "name": "Updates volunteer personal data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1820,
        900
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "a50d833a-6fc2-4bb6-8e37-5d6c9f89c2b2",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1800,
        520
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "0a5e3ee5-bd93-4abe-9a1e-5089f3182f29",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2280,
        1320
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM volunteers \nWHERE \n  zendesk_user_id IS NOT null AND \n  condition NOT IN ('anti-etica', 'descadastrada')",
        "options": {}
      },
      "id": "6a461f46-39ca-4304-ad6a-92b6a4d8f0fd",
      "name": "Get all volunteers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -1380,
        740
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {
          "reset": false
        }
      },
      "id": "da693c77-d995-48f5-ac38-6919bc5f5c2e",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1160,
        740
      ]
    },
    {
      "parameters": {
        "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const is_available_lookup = {\n      \"disponivel\": 1,\n      \"indisponível_férias\": 0,\n      \"indisponível_maternidade\": 0,\n      \"indisponível_saude\": 0,\n      \"indisponível_trabalho_e_estudo\": 0,\n      \"indisponível_outros_motivos\": 0,\n      \"indisponível_agenda\": 0,\n      \"indisponível_-sem_resposta\": 0,\n      \"dados_incompletos_endereço\": 0,\n      \"dados_incompletos_telefone\": 0,\n      \"dados_incompletos_email\": 0,\n      \"descadastrada\": 0,\n      \"reprovada_estudo_de_caso\": 0,\n      \"reprovada_diretrizes_do_mapa\": 0,\n      \"reprovada_registro_inválido\": 0,\n      \"aprovada\": 1,\n      \"anti-etica\": 0,\n      \"capacitacao\": 0,\n      \"indisponivel_sem_vagas\": 0,\n      \"desabilitada\": 0,\n      \"cadastrada\": 0\n  }\n \n  const volunteer_id = item.json.volunteer_id;\n  const status = item.json.new_volunteer_status;\n  \n  const is_available = is_available_lookup[status]\n    \n  const newItem = {\n    \"volunteer_id\": volunteer_id,\n    \"new_status\": status,\n    \"is_available\": is_available,\n    \"max_matches\": item.json.new_availability\n  }\n  output.push(newItem)\n}\n\nreturn output;"
      },
      "id": "3e2aa8af-109a-4778-be3e-8b0878c38df9",
      "name": "Check if volunteer is available",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        740,
        920
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteers\nSET \n  condition = '{{ $json.new_status }}',\n  availability = {{ $json.max_matches }}, \n  updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, '{{$json[\"new_status\"]}}', NOW());\n\nUPDATE public.volunteer_availability\nSET \n  is_available = {{$json[\"is_available\"]}}::boolean, \n  max_matches = {{ $json.max_matches }},\n  updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}};",
        "options": {}
      },
      "id": "949fa993-e784-4b23-a45b-c33b0f0361e6",
      "name": "Updates volunteer availability",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        960,
        920
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "708e9845-f73e-4644-b3a8-ee9e4d63da2e",
              "leftValue": "={{ $json.active }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a09f1b10-0cd5-4019-b0e0-717f9e8ba8e8",
      "name": "Filter deleted users",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        -660,
        760
      ]
    },
    {
      "parameters": {
        "url": "=https://novoqueroacolher.staging.bonde.org/address",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "city",
              "value": "={{ $json.new_city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.new_state }}"
            },
            {
              "name": "zipcode",
              "value": "={{ $json.new_zipcode === 'not_found' ? '' : $json.new_zipcode  }}"
            }
          ]
        },
        "options": {}
      },
      "id": "938358a6-6e8a-494c-b701-a0e1de6fd845",
      "name": "Busca as coordenadas do endereço2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1320,
        100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.should_update_geolocation }}",
                    "rightValue": "{{ true }}",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "geolocation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "1206305f-a715-4cb0-990a-d942246a7212",
                    "leftValue": "={{ $json.should_update_personal }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "personal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "26fd6c46-a2eb-4299-a425-e7978d0102fd",
                    "leftValue": "={{ $json.should_update_availability || $json.should_update_status  }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "availability"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "43b488d5-2622-4a12-b917-0abd92ccdc49",
                    "leftValue": "={{ $json.should_update_geolocation && $json.should_update_personal && $json.should_update_availability || $json.should_update_status }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "no_update"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "id": "808c5403-5a0d-4090-bffc-c75b1f4e947c",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        420,
        660
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-04-15T00:58:26.000Z",
  "versionId": "b443c824-d7e9-4786-ad2d-12d744c5a2e7"
}