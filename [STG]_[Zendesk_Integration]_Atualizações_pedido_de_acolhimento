{
  "active": false,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extracts zendesk_ticket_id and support_request_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracts zendesk_ticket_id and support_request_status": {
      "main": [
        [
          {
            "node": "Fetch support_request_id and status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch support_request_id and status": {
      "main": [
        [
          {
            "node": "Is it a new status?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is it a new status?": {
      "main": [
        [
          {
            "node": "Update support_request status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch matches that should be expired today",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch matches that should be expired today": {
      "main": [
        [
          {
            "node": "Update MSR Zendesk ticket",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Volunteer Zendesk ticket",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch previous volunteer_availability and volunteer_status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Expire matches in database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch previous volunteer_availability and volunteer_status": {
      "main": [
        [
          {
            "node": "Should update volunteer status?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update volunteer status?": {
      "main": [
        [
          {
            "node": "Update volunteer_availability and volunteer status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update zendesk Status da Mulher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check current_matches": {
      "main": [
        [
          {
            "node": "Should update current_matches?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update current_matches?": {
      "main": [
        [
          {
            "node": "Update current_matches1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expire matches in database": {
      "main": [
        [
          {
            "node": "Check current_matches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch match_id and status": {
      "main": [
        [
          {
            "node": "Is it a new status?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Extracts zendesk_ticket_id and support_request_status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracts zendesk_ticket_id and support_request_status1": {
      "main": [
        [
          {
            "node": "Fetch match_id and status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is it a new status?1": {
      "main": [
        [
          {
            "node": "Update match status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch volunteer current_matches": {
      "main": [
        [
          {
            "node": "Should update current_matches?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should make volunteer unavailable?": {
      "main": [
        [
          {
            "node": "Make volunteer unavailable",
            "type": "main",
            "index": 0
          },
          {
            "node": "Status da Mulher = Indisponivel - Sem Vagas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update match status": {
      "main": [
        [
          {
            "node": "Fetch volunteer current_matches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update current_matches?1": {
      "main": [
        [
          {
            "node": "Update current_matches",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should make volunteer unavailable?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should make volunteer available?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should make volunteer available?": {
      "main": [
        [
          {
            "node": "Make volunteer available",
            "type": "main",
            "index": 0
          },
          {
            "node": "Status da Mulher = Disponível",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtra apenas as infos que importam": {
      "main": [
        [
          {
            "node": "Busca match",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca match": {
      "main": [
        [
          {
            "node": "Encontrou o match?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encontrou o match?": {
      "main": [
        [
          {
            "node": "O status atual é waiting_contact?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtém o transactionaId da Voluntária": {
      "main": [
        [
          {
            "node": "email Voluntária - atendimento iniciado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ticket MSR - encaminhamento interrompido": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "ticket MSR - solicitação recebida",
            "type": "main",
            "index": 0
          },
          {
            "node": "Atualiza support_request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca infos da MSR e da Voluntária": {
      "main": [
        [
          {
            "node": "email MSR - nova voluntária sem prioridade",
            "type": "main",
            "index": 0
          },
          {
            "node": "email Voluntária - encaminhamento interrompido",
            "type": "main",
            "index": 0
          },
          {
            "node": "Status da Mulher = Indisponivel - Agenda",
            "type": "main",
            "index": 0
          },
          {
            "node": "Atualiza status da Voluntária",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca infos da MSR e da Voluntária1": {
      "main": [
        [
          {
            "node": "email MSR - atendimento iniciado",
            "type": "main",
            "index": 0
          },
          {
            "node": "Obtém o transactionaId da Voluntária",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "O status atual é waiting_contact?": {
      "main": [
        [
          {
            "node": "Qual o novo status do acolhimento?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MSR ou Voluntária preencheu o formulário": {
      "main": [
        [
          {
            "node": "Filtra apenas as infos que importam",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qual o novo status do acolhimento?": {
      "main": [
        [
          {
            "node": "ticket MSR - atendimento iniciado2",
            "type": "main",
            "index": 0
          },
          {
            "node": "ticket Voluntária - atendimento iniciado",
            "type": "main",
            "index": 0
          },
          {
            "node": "Busca infos da MSR e da Voluntária1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Atualiza status do match",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "ticket MSR - encaminhamento interrompido",
            "type": "main",
            "index": 0
          },
          {
            "node": "ticket MSR - solicitação recebida",
            "type": "main",
            "index": 0
          },
          {
            "node": "Atualiza support_request",
            "type": "main",
            "index": 0
          },
          {
            "node": "ticket MSR - encaminhamento interrompido1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Busca infos da MSR e da Voluntária",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-04-10T15:28:34.873Z",
  "id": "JFBKQmdlt0XAzjId",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[STG] [Zendesk Integration] Atualizações pedido de acolhimento",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-support-request",
        "authentication": "basicAuth",
        "options": {}
      },
      "id": "fdc59282-a0bb-42b2-9a3c-4999f63f15a5",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        300,
        260
      ],
      "webhookId": "e75a3673-697e-4507-a895-74cf6b7db0b4",
      "credentials": {
        "httpBasicAuth": {
          "id": "cw6WdIc7c9HRGleo",
          "name": "Zendesk auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const zendesk_ticket_id = item.json.body.id;\n  let status;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  const tags = item.json.body.tags\n  \n\n  if(item.json.body.status_acolhimento === \"solicitação_recebida\" && tags.includes(\"nova-voluntaria-com-prioridade\")){\n     \n    status = \"special_case\";\n  \n  }\n  else {\n    const status_lookup = {\n      \"solicitação_recebida\": \"open\",\n      \"encaminhamento__realizado_para_serviço_público\": \"public_service\",\n      \"encaminhamento__realizado\": \"matched\",\n      \"encaminhamento__assistente_social\": \"social_worker\",\n      \"encaminhamento__servico_publico_com_assistente_social\": \"public_service_with_social_worker\"\n    }\n\n    status = status_lookup[status_acolhimento]\n    \n  }\n\n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"status\": status\n  }\n  output.push(newItem)\n}\n\nreturn output;"
      },
      "id": "8d849222-7fb3-4ff3-abd0-3b2db2526786",
      "name": "Extracts zendesk_ticket_id and support_request_status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        520,
        260
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n\tsupport_request_id, \n\tstatus AS current_status,\n    '{{$json[\"status\"]}}' AS new_status\nFROM match.support_requests\nWHERE zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nLIMIT 1",
        "additionalFields": {}
      },
      "id": "5628d0f7-0f0d-4a96-b8a6-562873369249",
      "name": "Fetch support_request_id and status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        760,
        260
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"current_status\"]}}",
              "operation": "notEqual",
              "value2": "={{$json[\"new_status\"]}}"
            }
          ]
        }
      },
      "id": "6b717e19-6e86-4845-8b2e-bb82553478e3",
      "name": "Is it a new status?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        980,
        260
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE match.support_requests\nSET status = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE support_request_id = {{$json[\"support_request_id\"]}};\n\nINSERT INTO match.support_request_status_history (support_request_id, status, created_at)\nVALUES ({{$json[\"support_request_id\"]}}, '{{$json[\"new_status\"]}}', NOW());",
        "additionalFields": {}
      },
      "id": "05e2a4f2-78f8-4615-b5bb-355252c131dc",
      "name": "Update support_request status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1280,
        240
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {},
      "id": "8e2195d7-5e7c-4f8a-80d2-9198c6d5b992",
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1280,
        480
      ]
    },
    {
      "parameters": {
        "content": "updates support_request",
        "height": 80,
        "width": 200.46763117115643
      },
      "id": "dd656853-5659-4264-9f2b-782ecd522a10",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        300,
        160
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 10
            }
          ]
        }
      },
      "id": "afd327c8-e28a-4e25-8035-36401929ff2c",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        280,
        1420
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n   match_id,\n   msr_id,\n   msr_zendesk_ticket_id,\n   volunteer_id,\n   volunteer_zendesk_ticket_id\nFROM match.matches\nWHERE\n   status = 'waiting_contact'\n   AND created_at >= '2024-01-25'\n   AND created_at < CURRENT_DATE - INTERVAL '30 DAY'",
        "additionalFields": {}
      },
      "id": "c8ab4d08-76fd-4a74-a8cf-18222485dbed",
      "name": "Fetch matches that should be expired today",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        640,
        1420
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{$json[\"msr_zendesk_ticket_id\"]}}",
        "updateFields": {
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "id": 360014379412,
                "value": "encaminhamento__expirado"
              }
            ]
          },
          "publicReply": "Olá, {{ticket.requester.first_name}}!\n\nEspero que esteja bem na medida do possível.\n\nEstamos aqui para informá-la que hoje completam 30 dias do seu encaminhamento. Dessa forma, como não recebemos uma devolutiva acerca do início do atendimento entre você e a profissional indicada, sua vaga será liberada para uma outra mulher que necessite de ajuda.\n\nCaso, em algum outro momento, você deseje novamente receber nossa ajuda, é só escrever para o atendimento@mapadoacolhimento.org que te encaminharemos o contato de uma outra profissional disponível ou do serviço público mais próximo.\n\nConte conosco e nos escreva em caso de dúvidas. Estamos aqui para ajudá-la no que for possível <3.\n\nForte abraço,\nEquipe do Mapa do Acolhimento"
        }
      },
      "id": "740ca395-1ed3-407b-bdfe-3db6f5d7d992",
      "name": "Update MSR Zendesk ticket",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        960,
        1680
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{$json[\"volunteer_zendesk_ticket_id\"]}}",
        "updateFields": {
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "id": 360014379412,
                "value": "encaminhamento__expirado"
              }
            ]
          },
          "publicReply": "Olá, {{ticket.requester.first_name}}! Esperamos que você esteja bem! \n\nEstamos aqui para informá-la que hoje completam 30 dias desde o encaminhamento da {{ticket.ticket_field_360016681971}} mulher que precisa de ajuda. Dessa forma, como não recebemos uma devolutiva acerca do início do atendimento entre você e ela, estamos liberando sua vaga para um novo pedido de ajuda.\n\nNo entanto, se a {{ticket.ticket_field_360016681971}} te contactar, mesmo depois do tempo previsto, pedimos por favor que nos avise por e-mail ou por WhatsApp. Assim, poderemos garantir que ela receba o apoio que precisa e atualizar a sua disponibilidade no nosso sistema.\n\nVocê é parte essencial da nossa rede de apoio <3. Qualquer dúvida nos escreva.\n\nAbraços,\nEquipe do Mapa do Acolhimento"
        }
      },
      "id": "cfc9f2d3-5e61-4cc7-8072-8d5e68a19c1e",
      "name": "Update Volunteer Zendesk ticket",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        960,
        1940
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT\n   volunteer_id,\n   zendesk_user_id, \n   current_matches,\n   max_matches,  \n   is_available,\n   condition\nFROM public.volunteer_availability\nLEFT JOIN public.volunteers ON volunteer_id = id\nWHERE volunteer_id = \t{{$json[\"volunteer_id\"]}}",
        "additionalFields": {}
      },
      "id": "24df1812-7f16-4ca4-8072-f20976b1e83e",
      "name": "Fetch previous volunteer_availability and volunteer_status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        980,
        1180
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"condition\"]}}",
              "value2": "indisponivel_sem_vagas"
            }
          ]
        }
      },
      "id": "a23a7ad8-c077-4a77-8314-2e9960fba171",
      "name": "Should update volunteer status?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1420,
        1180
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteers\nSET condition = 'disponivel', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'disponivel', NOW());\n\nUPDATE public.volunteer_availability\nSET  is_available = TRUE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
        "additionalFields": {}
      },
      "id": "4d7551b2-a68b-4e0b-be61-07edcce469c9",
      "name": "Update volunteer_availability and volunteer status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1680,
        1160
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "update",
        "id": "={{$json[\"zendesk_user_id\"]}}",
        "updateFields": {
          "userFieldsUi": {
            "userFieldValues": [
              {
                "field": "condition",
                "value": "Disponível"
              }
            ]
          }
        }
      },
      "id": "3d32900f-25c0-40d9-bb55-8d502e829a2d",
      "name": "Update zendesk Status da Mulher",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        1700,
        940
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH matches_from_volunteer AS (\n    SELECT \n        volunteer_id,\n        match_id\n    FROM match.matches\n    WHERE \n        volunteer_id = {{ $json.volunteer_id }}\n        AND status IN ('waiting_contact', 'in_contact')\n)\nSELECT\n    volunteer_id,\n    current_matches,\n    max_matches,\n    condition,\n    COUNT(DISTINCT match_id) AS calculated_current_matches\nFROM volunteer_availability a\nLEFT JOIN matches_from_volunteer m USING(volunteer_id)\nLEFT JOIN volunteers v ON v.id = a.volunteer_id\nWHERE \n    volunteer_id =  {{ $json.volunteer_id }}\nGROUP BY volunteer_id, current_matches, max_matches, condition",
        "options": {}
      },
      "id": "7456f317-b873-4287-ba7e-be628a77e310",
      "name": "Check current_matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1220,
        1460
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "40361bb8-ee27-4874-8c13-bbaa181aaece",
              "leftValue": "={{ $json.current_matches }}",
              "rightValue": "={{ $json.calculated_current_matches }}",
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "c8295ebf-4615-471f-b32a-124760a4cd16",
      "name": "Should update current_matches?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1420,
        1460
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteer_availability\nSET current_matches = {{ $json.calculated_current_matches }}, updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "6d0c3795-be02-4973-b557-5a0934a41b20",
      "name": "Update current_matches1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1660,
        1440
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE match.matches\nSET status = 'expired', updated_at = NOW()\nWHERE match_id = {{$json[\"match_id\"]}};\n\nINSERT INTO match.match_status_history (match_id, status, created_at)\nVALUES ({{$json[\"match_id\"]}}, 'expired', NOW());\n\nSELECT volunteer_id\nFROM match.matches\nWHERE match_id = {{$json[\"match_id\"]}};",
        "options": {}
      },
      "id": "5e3693b2-b371-4489-b1a2-b7c946f48d27",
      "name": "Expire matches in database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        980,
        1460
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "content": "expires matches",
        "height": 80,
        "width": 233.26349637113265
      },
      "id": "4b5a1eb1-11a2-419b-bcbc-ffd302343f44",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        280,
        1300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n\tmatch_id, \n\tstatus AS current_status,\n    '{{$json[\"status\"]}}' AS new_status,\n    volunteer_id \nFROM match.matches\nWHERE volunteer_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT \nOR msr_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nORDER BY created_at DESC\nLIMIT 1",
        "options": {}
      },
      "id": "831820b8-4221-4abf-b0dc-01db061cb36a",
      "name": "Fetch match_id and status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2580,
        500
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-match",
        "authentication": "basicAuth",
        "options": {}
      },
      "id": "a336946b-0c62-4bf9-8040-8677955ed38c",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        2120,
        500
      ],
      "webhookId": "2b6519a4-e57a-49a2-84bc-0911988dbe40",
      "credentials": {
        "httpBasicAuth": {
          "id": "cw6WdIc7c9HRGleo",
          "name": "Zendesk auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const status_lookup = {\n      \"encaminhamento__realizado\": \"waiting_contact\",\n      \"encaminhamento_interrompido\": \"interrupted_before_support\",\n      \"atendimento__iniciado\": \"in_contact\",\n      \"atendimento__concluído\": \"completed\",\n      \"atendimento__interrompido\": \"interrupted_after_support\" \n  }\n \n  const zendesk_ticket_id = item.json.body.id;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  \n  const status = status_lookup[status_acolhimento]\n    \n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"status\": status\n  }\n  output.push(newItem)\n}\n\nreturn output;"
      },
      "id": "9cabb717-e2c8-4223-8708-9d4e9d7f0abe",
      "name": "Extracts zendesk_ticket_id and support_request_status1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2360,
        500
      ]
    },
    {
      "parameters": {
        "content": "updates match",
        "height": 80,
        "width": 238.13661201650135
      },
      "id": "1df017cf-b41e-49ab-9939-9f968b2e0ba3",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2140,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"current_status\"]}}",
              "operation": "notEqual",
              "value2": "={{$json[\"new_status\"]}}"
            }
          ]
        }
      },
      "id": "20c542fd-444b-4e86-a613-b40d44bc88b8",
      "name": "Is it a new status?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2800,
        500
      ]
    },
    {
      "parameters": {},
      "id": "86b0404e-0465-4238-8019-76fc060f9a22",
      "name": "NoOp1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3060,
        740
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteer_availability\nSET current_matches = {{ $json.calculated_current_matches }}, updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "1542b1b9-551a-4662-8648-a3ead7642749",
      "name": "Update current_matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3880,
        -40
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH matches_from_volunteer AS (\n    SELECT \n        volunteer_id,\n        match_id\n    FROM match.matches\n    WHERE \n        volunteer_id = {{ $json.volunteer_id }}\n        AND status IN ('waiting_contact', 'in_contact')\n)\nSELECT\n    volunteer_id,\n    zendesk_user_id,\n    current_matches,\n    max_matches,\n    condition,\n    COUNT(DISTINCT match_id) AS calculated_current_matches\nFROM volunteer_availability a\nLEFT JOIN matches_from_volunteer m USING(volunteer_id)\nLEFT JOIN volunteers v ON v.id = a.volunteer_id\nWHERE \n    volunteer_id =  {{ $json.volunteer_id }}\nGROUP BY volunteer_id, zendesk_user_id, current_matches, max_matches, condition",
        "options": {}
      },
      "id": "180e8aff-1860-4e1e-a395-2fa1793960e4",
      "name": "Fetch volunteer current_matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3300,
        480
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "53a6dfc0-564c-46c6-ba31-a373e2b718ac",
              "leftValue": "={{ $json.calculated_current_matches }}",
              "rightValue": "={{ $json.max_matches }}",
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "a2bc3ae3-1aab-441f-85c1-1b45156b8492",
              "leftValue": "={{ $json.condition }}",
              "rightValue": "disponivel",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "c8ab0cd4-a286-4865-ac7f-139bd8d9464a",
      "name": "Should make volunteer unavailable?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3880,
        260
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE match.matches\nSET status = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE match_id = {{$json[\"match_id\"]}};\n\nINSERT INTO match.match_status_history (match_id, status, created_at)\nVALUES ({{$json[\"match_id\"]}}, '{{$json[\"new_status\"]}}', NOW());\n\nSELECT volunteer_id\nFROM match.matches\nWHERE match_id = {{$json[\"match_id\"]}};\n\n",
        "options": {}
      },
      "id": "8dbcd17f-d89f-4a3d-ad87-b0e4e3800532",
      "name": "Update match status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3060,
        480
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "40361bb8-ee27-4874-8c13-bbaa181aaece",
              "leftValue": "={{ $json.current_matches }}",
              "rightValue": "={{ $json.calculated_current_matches }}",
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "2bc7f3f8-9ba0-49e2-b4d7-d4530321fdb8",
      "name": "Should update current_matches?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3500,
        480
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteers\nSET condition = 'indisponivel_sem_vagas', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'indisponivel_sem_vagas', NOW());\n\nUPDATE public.volunteer_availability\nSET is_available = FALSE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
        "options": {}
      },
      "id": "fcf26cde-ba2b-456f-94a9-84c455c4af90",
      "name": "Make volunteer unavailable",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        4260,
        40
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "update",
        "id": "={{$json[\"zendesk_user_id\"]}}",
        "updateFields": {
          "userFieldsUi": {
            "userFieldValues": [
              {
                "field": "condition",
                "value": "indisponivel_sem_vagas"
              }
            ]
          }
        }
      },
      "id": "b607eaa2-6811-4db0-aa5b-2b2ad1585ae7",
      "name": "Status da Mulher = Indisponivel - Sem Vagas",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        4260,
        240
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "53a6dfc0-564c-46c6-ba31-a373e2b718ac",
              "leftValue": "={{ $json.calculated_current_matches }}",
              "rightValue": "={{ $json.max_matches }}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            },
            {
              "id": "a2bc3ae3-1aab-441f-85c1-1b45156b8492",
              "leftValue": "={{ $json.condition }}",
              "rightValue": "indisponivel_sem_vagas",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "5aa70f2d-be80-474e-a176-715448ec9d9a",
      "name": "Should make volunteer available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3900,
        600
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteers\nSET condition = 'disponivel', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'disponivel', NOW());\n\nUPDATE public.volunteer_availability\nSET is_available = TRUE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
        "options": {}
      },
      "id": "d021aba6-a378-4422-90b8-be1e5102c44d",
      "name": "Make volunteer available",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        4260,
        580
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "update",
        "id": "={{$json[\"zendesk_user_id\"]}}",
        "updateFields": {
          "userFieldsUi": {
            "userFieldValues": [
              {
                "field": "condition",
                "value": "Disponível"
              }
            ]
          }
        }
      },
      "id": "00821dc9-0f87-4f09-8491-746527805546",
      "name": "Status da Mulher = Disponível",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        4260,
        820
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "content": "updates match based on volunteer form",
        "height": 80,
        "width": 238.13661201650135
      },
      "id": "9a6af1cd-4e2a-4035-9587-1dedaf21102b",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        5060,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\noutput = []\n\nfunction getHiddenFieldValue(item, fieldLabel){\n  return item.json.body.data.fields.find(\n    (element) => element.label === fieldLabel\n  ).value;\n}\n\nfunction getMatchStatus(item){\n  const matchStatusField = item.json.body.data.fields.find(\n    (element) => element.type === 'MULTIPLE_CHOICE' && element.label === 'match_status'\n  );\n\n  if(!matchStatusField.value) return null\n\n  const matchStatusLookUp = {\n    \"Já iniciamos o atendimento\": \"in_contact\",\n    \"A voluntária não me respondeu\": \"waiting_contact\",\n    \"A voluntária me respondeu, mas não está disponível para me atender\": \"interrupted_before_support\",\n    \"Não conseguirei atendê-la\": \"interrupted_before_support\"\n  }\n  \n  const matchStatusText = matchStatusField.options.find(\n    (element) => element.id == matchStatusField.value\n  ).text;\n\n  return matchStatusLookUp[matchStatusText]\n}\n\nfor (const item of $input.all()) {\n  \n  const matchId = getHiddenFieldValue(item, 'match_id');\n  const matchStatus = getMatchStatus(item);\n  \n  output.push(\n    {\n      \"match_id\": matchId,\n      \"match_status\": matchStatus\n    }\n  )\n}\n\nreturn output;"
      },
      "id": "408c365b-4388-4136-a63a-75ee4d9a00d0",
      "name": "Filtra apenas as infos que importam",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5340,
        480
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE match.matches\nSET status = '{{ $json.match_status }}', updated_at = NOW()\nWHERE match_id = {{ $json.match_id }};\n\nINSERT INTO match.matches (match_id, status, created_at)\nVALUES ({{ $json.match_id }}, '{{ $json.match_status }}', NOW());",
        "options": {}
      },
      "id": "3908bf48-2a01-492f-b6fb-c62458a99e96",
      "name": "Atualiza status do match",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        6740,
        -20
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  match_id,\n  support_request_id,\n  support_type,\n  msr_id,\n  volunteer_id,\n  first_name AS volunteer_first_name,\n  zendesk_user_id AS volunteer_zendesk_user_id,\n  email AS volunteer_email,\n  msr_zendesk_ticket_id,\n  volunteer_zendesk_ticket_id,\n  status AS current_status,\n  '{{ $json.match_status }}' AS new_status\nFROM match.matches\nLEFT JOIN volunteers ON id = volunteer_id\nWHERE match_id = {{ $json.match_id }}",
        "options": {}
      },
      "id": "60241b78-1d51-4cca-a3b3-95d9233f9a94",
      "name": "Busca match",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        5540,
        480
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "dd3678ee-3ca4-4887-8696-ed25abe79551",
              "leftValue": "={{ $json.match_id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b770c8d9-eec4-4a6f-b243-1cedb72b7922",
      "name": "Encontrou o match?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        5740,
        480
      ]
    },
    {
      "parameters": {
        "errorMessage": "match não encontrado"
      },
      "id": "aeb42689-d6b6-4b3e-a51f-7b1d8cb5e0b8",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        6020,
        680
      ]
    },
    {
      "parameters": {},
      "id": "c9558a72-d16c-49d9-ab23-6cf07d15e0ab",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        6360,
        680
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $json.volunteer_zendesk_ticket_id }}",
        "updateFields": {
          "assigneeEmail": "marcia@nossas.org",
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "id": 360014379412,
                "value": "atendimento__iniciado"
              }
            ]
          },
          "internalNote": "Fomos informadas pelo formulário que o atendimento foi iniciado.",
          "status": "pending",
          "tags": [
            "atualizar-data-atendimento",
            "instrumental_triagem_1",
            "triagem-1-enviado"
          ]
        }
      },
      "id": "df3c9a3e-2b1b-4843-9221-1761dc59d9ce",
      "name": "ticket Voluntária - atendimento iniciado",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        6760,
        -480
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $json.msr_zendesk_ticket_id }}",
        "updateFields": {
          "assigneeEmail": "marcia@nossas.org",
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "id": 360014379412,
                "value": "atendimento__iniciado"
              }
            ]
          },
          "internalNote": "Fomos informadas pelo formulário que o atendimento foi iniciado.",
          "status": "pending",
          "tags": [
            "atualizar-data-atendimento"
          ]
        }
      },
      "id": "45d2e60e-2736-4611-94c6-e0da37230b05",
      "name": "ticket MSR - atendimento iniciado2",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        6760,
        -680
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.loops.so/api/v1/transactional",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"email\": \"camila@mapa.org.br\",\n \"transactionalId\": \"clve8mcba01ehw7t4j7z3pswx\",\n \"dataVariables\": {\n    \"msr_first_name\": \"{{ $json.msr_first_name }}\",\n    \"volunteer_first_name\": \"{{ $json.volunteer_first_name }}\"\n  }\n}",
        "options": {}
      },
      "id": "e1f52c1e-128f-470a-bce4-38308f30e45c",
      "name": "email MSR - atendimento iniciado",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        7060,
        -480
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "XrvtxHAVgwwJ3r6q",
          "name": "Loops API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.loops.so/api/v1/transactional",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"email\": \"camila@mapa.org.br\",\n \"transactionalId\": \"{{ $json.transactional_id }}\",\n \"dataVariables\": {\n    \"msr_first_name\": \"{{ $json.msr_first_name }}\",\n    \"volunteer_first_name\": \"{{ $json.volunteer_first_name }}\"\n  }\n}",
        "options": {}
      },
      "id": "48fcb03b-6633-4cfe-a27f-44d92c00d4fa",
      "name": "email Voluntária - atendimento iniciado",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        7320,
        -240
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "XrvtxHAVgwwJ3r6q",
          "name": "Loops API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n\n  const supportType = item.json.support_type;\n  const transactionalId = supportType === 'legal' ? 'clve91yrh006zn5kbfmaeabcv' : 'clve9g19d00h2lk7s7uh7510h';\n\n  item.json.transactional_id = transactionalId;\n\n}\n\nreturn $input.all();"
      },
      "id": "eb42f47f-0e97-4c1e-98a5-44248fdb153c",
      "name": "Obtém o transactionaId da Voluntária",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7060,
        -240
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $json.msr_zendesk_ticket_id }}",
        "updateFields": {
          "assigneeEmail": "marcia@nossas.org",
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "id": 360014379412,
                "value": "encaminhamento_interrompido"
              }
            ]
          },
          "internalNote": "Fomos informadas pelo formulário que o encaminhamento foi interrompido",
          "status": "open",
          "tags": [
            "atualizar-data-encaminhamento"
          ]
        }
      },
      "id": "1c1bf24e-77d2-4241-b63e-74a28ce3b9ec",
      "name": "ticket MSR - encaminhamento interrompido",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        6940,
        1200
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.loops.so/api/v1/transactional",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"email\": \"camila@mapa.org.br\",\n \"transactionalId\": \"clvh3x98300621fpkx8is5zyj\",\n \"dataVariables\": {\n    \"msr_first_name\": \"{{ $json.msr_first_name }}\",\n    \"volunteer_first_name\": \"{{ $json.volunteer_first_name }}\",\n    \"volunteer_email\": \"{{ $json.volunteer_email }}\"\n  }\n}",
        "options": {}
      },
      "id": "82a246b1-c399-44c2-922e-5ad17ff8a1da",
      "name": "email Voluntária - encaminhamento interrompido",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        7480,
        1920
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "XrvtxHAVgwwJ3r6q",
          "name": "Loops API"
        }
      }
    },
    {
      "parameters": {},
      "id": "695cd9e9-4129-4767-8011-3eceb0628c4a",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        7200,
        1200
      ],
      "webhookId": "81756717-b55e-4931-8c96-cdb8b400e111"
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $json.msr_zendesk_ticket_id }}",
        "updateFields": {
          "assigneeEmail": "marcia@nossas.org",
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "id": 360014379412,
                "value": "solicitação_recebida"
              }
            ]
          },
          "internalNote": "MSR está aguardando um novo match",
          "status": "open",
          "tags": [
            "nova-voluntaria-sem-prioridade"
          ]
        }
      },
      "id": "650263c8-c1b8-4830-9c57-43b377b0b70d",
      "name": "ticket MSR - solicitação recebida",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        7660,
        1000
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.loops.so/api/v1/transactional",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"email\": \"camila@mapa.org.br\",\n \"transactionalId\": \"clvjzaan500moauwib4clwqah\",\n \"dataVariables\": {\n    \"msr_first_name\": \"{{ $json.msr_first_name }}\",\n    \"volunteer_first_name\": \"{{ $json.volunteer_first_name }}\"\n  }\n}",
        "options": {}
      },
      "id": "b2279646-38cb-4ed2-ba40-604f4b15c44c",
      "name": "email MSR - nova voluntária sem prioridade",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        7480,
        1680
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "XrvtxHAVgwwJ3r6q",
          "name": "Loops API"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    email AS msr_email,\n    (STRING_TO_ARRAY(INITCAP(name), ' '))[1] AS msr_first_name,\n    '{{ $json.volunteer_email }}' AS volunteer_email,  \n    '{{ $json.volunteer_first_name }}' AS volunteer_first_name,\n    {{ $json.volunteer_zendesk_user_id }} AS volunteer_zendesk_user_id,\n    '{{ $json.support_type }}' AS support_type\nFROM solidarity_users\nWHERE user_id = {{ $json.msr_id }}",
        "options": {}
      },
      "id": "a69d3a6b-4810-4db4-bdd2-163da4b4b3b8",
      "name": "Busca infos da MSR e da Voluntária",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        6940,
        1680
      ],
      "credentials": {
        "postgres": {
          "id": "bNRm9reAeAU1uKu5",
          "name": "[STG] Bonde"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    email AS msr_email,\n    (STRING_TO_ARRAY(INITCAP(name), ' '))[1] AS msr_first_name,\n    '{{ $json.volunteer_email }}' AS volunteer_email,  \n    '{{ $json.volunteer_first_name }}' AS volunteer_first_name,\n    '{{ $json.support_type }}' AS support_type\nFROM solidarity_users\nWHERE user_id = {{ $json.msr_id }}",
        "options": {}
      },
      "id": "7be924ce-a6c1-498b-b7dc-26039ccaabce",
      "name": "Busca infos da MSR e da Voluntária1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        6760,
        -240
      ],
      "credentials": {
        "postgres": {
          "id": "bNRm9reAeAU1uKu5",
          "name": "[STG] Bonde"
        }
      }
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "update",
        "id": "={{ $json.volunteer_zendesk_user_id }}",
        "updateFields": {
          "userFieldsUi": {
            "userFieldValues": [
              {
                "field": "condition",
                "value": "indisponível_agenda"
              }
            ]
          }
        }
      },
      "id": "95ab0d9d-d5ef-401f-bf3d-a2df5b6c6398",
      "name": "Status da Mulher = Indisponivel - Agenda",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        7480,
        2220
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteers\nSET condition = 'indisponivel_sem_vagas', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'indisponivel_sem_vagas', NOW());\n\nUPDATE public.volunteer_availability\nSET is_available = FALSE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
        "options": {}
      },
      "id": "4b4a864e-9453-4981-b74e-60f1fdf2463c",
      "name": "Atualiza status da Voluntária",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        7480,
        2420
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE match.support_requests\nSET status = 'open', updated_at = NOW()\nWHERE support_request_id = {{$json[\"support_request_id\"]}};\n\nINSERT INTO match.support_request_status_history (support_request_id, status, created_at)\nVALUES ({{$json[\"support_request_id\"]}}, 'open', NOW());",
        "options": {}
      },
      "id": "1600fe85-502c-474e-af13-026f40ed1381",
      "name": "Atualiza support_request",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        7680,
        1200
      ],
      "credentials": {
        "postgres": {
          "id": "lveNjRL3anzREWd8",
          "name": "[STG] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $json.volunteer_zendesk_ticket_id }}",
        "updateFields": {
          "assigneeEmail": "marcia@nossas.org",
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "id": 360014379412,
                "value": "encaminhamento_interrompido"
              }
            ]
          },
          "internalNote": "Fomos informadas pelo formulário que o encaminhamento foi interrompido",
          "status": "pending",
          "tags": []
        }
      },
      "id": "509d8c37-8794-499f-b402-23f4317d1752",
      "name": "ticket MSR - encaminhamento interrompido1",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        6940,
        1440
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "24c712a9-5da0-47cf-85ab-3b8d6795bb22",
              "leftValue": "={{ $json.current_status }}",
              "rightValue": "=waiting_contact",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5054b3e7-0da4-4cc8-81b8-de1a38f18f60",
      "name": "O status atual é waiting_contact?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        6020,
        460
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "volunteer-update-match-status",
        "authentication": "headerAuth",
        "options": {}
      },
      "id": "08cbadf0-43ae-40de-a63e-8af780ced71f",
      "name": "MSR ou Voluntária preencheu o formulário",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        5120,
        480
      ],
      "webhookId": "2833ff82-a447-4f31-bfc4-1425f4d0f906",
      "credentials": {
        "httpHeaderAuth": {
          "id": "BhcubpnINJanuVaZ",
          "name": "Tally API"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.new_status }}",
                    "rightValue": "in_contact",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "atendimento iniciado"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "75fb8a5f-30df-4495-9a4f-712baef0f960",
                    "leftValue": "={{ $json.new_status }}",
                    "rightValue": "waiting_contact",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "não mudar o status"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "4f3fd665-2742-4831-b7d0-d005e78b34e5",
                    "leftValue": "={{ $json.new_status }}",
                    "rightValue": "interrupted_before_support",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "encaminhamento interrompido"
            }
          ]
        },
        "options": {}
      },
      "id": "e73120e1-42b1-4e38-b449-cf4210a5cb11",
      "name": "Qual o novo status do acolhimento?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        6380,
        440
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "HYstwqyTrzYsvJ2P"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrencyRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2024-01-09T22:32:23.916Z",
      "updatedAt": "2024-01-09T22:32:23.916Z",
      "id": "JnlufCPRnot361zL",
      "name": "zendesk integration"
    }
  ],
  "triggerCount": 3,
  "updatedAt": "2024-04-29T20:34:01.000Z",
  "versionId": "62607008-c5f0-4377-a0f5-b9cb4a661f62"
}