{
  "active": true,
  "connections": {
    "Extracts zendesk_ticket_id and support_request_status": {
      "main": [
        [
          {
            "node": "Fetch match_id and status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is it a new status?": {
      "main": [
        [
          {
            "node": "Is match interrupted, expired or completed?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update match status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Extracts zendesk_ticket_id and support_request_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch previous volunteer_availability and volunteer_status": {
      "main": [
        [
          {
            "node": "Should update volunteer status?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update volunteer status?": {
      "main": [
        [
          {
            "node": "Update volunteer_availability and volunteer status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update zendesk Status da Mulher",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update current_matches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is match interrupted, expired or completed?": {
      "main": [
        [
          {
            "node": "Fetch previous volunteer_availability and volunteer_status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check current_matches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check current_matches": {
      "main": [
        [
          {
            "node": "Should update current_matches?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update current_matches?": {
      "main": [
        [
          {
            "node": "Update current_matches1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should update is_available?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update is_available?": {
      "main": [
        [
          {
            "node": "Update is_available",
            "type": "main",
            "index": 0
          },
          {
            "node": "Should update volunteer condition?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should update volunteer condition?": {
      "main": [
        [
          {
            "node": "Update volunteer condition",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert into volunteer_status_history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update is_available": {
      "main": [
        [
          {
            "node": "Should update volunteer condition?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch match_id and status": {
      "main": [
        [
          {
            "node": "Is it a new status?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-16T21:00:07.996Z",
  "id": "N9erW1W29zBVl6eT",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[Zendesk Integration] update match PROD",
  "nodes": [
    {
      "parameters": {
        "authentication": "basicAuth",
        "httpMethod": "POST",
        "path": "update-match",
        "options": {}
      },
      "id": "52c6a69a-ad31-4fd5-93d5-e8e9b7218b35",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1240,
        840
      ],
      "webhookId": "2e8d877f-e88c-4856-a866-639812e65d01",
      "credentials": {
        "httpBasicAuth": {
          "id": "cw6WdIc7c9HRGleo",
          "name": "Zendesk auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "output = []\n\nfor (const item of $input.all()) {\n  const status_lookup = {\n      \"encaminhamento__realizado\": \"waiting_contact\",\n      \"encaminhamento_interrompido\": \"interrupted_before_support\",\n      \"encaminhamento__expirado\": \"expired\",\n      \"atendimento__iniciado\": \"in_contact\",\n      \"atendimento__concluído\": \"completed\",\n      \"atendimento__interrompido\": \"interrupted_after_support\" \n  }\n \n  const zendesk_ticket_id = item.json.body.id;\n  const status_acolhimento = item.json.body.status_acolhimento;\n  \n  const status = status_lookup[status_acolhimento]\n    \n  const newItem = {\n    \"zendesk_ticket_id\": zendesk_ticket_id,\n    \"status\": status\n  }\n  output.push(newItem)\n}\n\nreturn output;"
      },
      "id": "427e4edd-0a0f-46ba-9f6d-6c06a5a99c79",
      "name": "Extracts zendesk_ticket_id and support_request_status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -1000,
        840
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"current_status\"]}}",
              "operation": "notEqual",
              "value2": "={{$json[\"new_status\"]}}"
            }
          ]
        }
      },
      "id": "619c47c2-57ee-44d7-bada-32593793c716",
      "name": "Is it a new status?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -560,
        840
      ]
    },
    {
      "parameters": {},
      "id": "16249317-3fdd-406d-bdaa-f1a2587bfd95",
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -400,
        1080
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE match.matches\nSET status = '{{$json[\"new_status\"]}}', updated_at = NOW()\nWHERE match_id = {{$json[\"match_id\"]}};\n\nINSERT INTO match.match_status_history (match_id, status, created_at)\nVALUES ({{$json[\"match_id\"]}}, '{{$json[\"new_status\"]}}', NOW());\n\n\n",
        "additionalFields": {}
      },
      "id": "6207944b-45a8-4bcb-a1a6-3bdee61f890a",
      "name": "Update match status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -280,
        240
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"condition\"]}}",
              "value2": "indisponivel_sem_vagas"
            }
          ]
        }
      },
      "id": "2476585f-69ed-406b-bea7-5c376bcbda3d",
      "name": "Should update volunteer status?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        220,
        740
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT\n   volunteer_id,\n   zendesk_user_id, \n   current_matches,\n    max_matches,  \n   is_available,\n   condition\nFROM public.volunteer_availability\nLEFT JOIN public.volunteers ON volunteer_id = id\nWHERE volunteer_id = \t{{$json[\"volunteer_id\"]}}",
        "additionalFields": {}
      },
      "id": "364896f1-63a5-4a6d-8348-dfa728985791",
      "name": "Fetch previous volunteer_availability and volunteer_status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        0,
        740
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteers\nSET condition = 'disponivel', updated_at = NOW()\nWHERE id = {{$json[\"volunteer_id\"]}};\n\nINSERT INTO public.volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{$json[\"volunteer_id\"]}}, 'disponivel', NOW());\n\nUPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), is_available = TRUE, updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
        "additionalFields": {}
      },
      "id": "0e0417fd-f203-471d-bf54-4115124bd418",
      "name": "Update volunteer_availability and volunteer status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        460,
        660
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "resource": "user",
        "operation": "update",
        "id": "={{$json[\"zendesk_user_id\"]}}",
        "updateFields": {
          "userFieldsUi": {
            "userFieldValues": [
              {
                "field": "condition",
                "value": "Disponível"
              }
            ]
          }
        }
      },
      "id": "7840e763-80f1-47aa-bee9-080b2d6c9f08",
      "name": "Update zendesk Status da Mulher",
      "type": "n8n-nodes-base.zendesk",
      "typeVersion": 1,
      "position": [
        460,
        460
      ],
      "credentials": {
        "zendeskApi": {
          "id": "MYAFeR51noxrxEC7",
          "name": "Zendesk account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"new_status\"]}}",
              "value2": "interrupted_before_support"
            },
            {
              "value1": "={{$json[\"new_status\"]}}",
              "value2": "interrupted_after_support"
            },
            {
              "value1": "={{$json[\"new_status\"]}}",
              "value2": "completed"
            },
            {
              "value1": "={{$json[\"new_status\"]}}",
              "value2": "expired"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "5fb70447-71a1-4a85-a300-c81bce946d20",
      "name": "Is match interrupted, expired or completed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -280,
        760
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE public.volunteer_availability\nSET current_matches = GREATEST({{$json[\"current_matches\"]}} - 1, 0), updated_at = NOW()\nWHERE volunteer_id = {{$json[\"volunteer_id\"]}}",
        "additionalFields": {}
      },
      "id": "907ec0ae-cd3b-4d6f-867c-4f0660c15811",
      "name": "Update current_matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        460,
        900
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    volunteer_id,\n    current_matches,\n    max_matches,\n    condition,\n    COUNT(*) AS calculated_current_matches\nFROM match.matches m \nLEFT JOIN volunteer_availability a USING (volunteer_id)\nLEFT JOIN volunteers v ON v.id = a.volunteer_id\nWHERE \n    volunteer_id = {{ $json.volunteer_id }}\n    AND status IN ('waiting_contact', 'in_contact')\nGROUP BY volunteer_id, current_matches, max_matches, condition",
        "options": {}
      },
      "id": "5165fb15-a387-4531-ab23-27ae62bdb113",
      "name": "Check current_matches",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        100,
        1160
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "40361bb8-ee27-4874-8c13-bbaa181aaece",
              "leftValue": "={{ $json.current_matches }}",
              "rightValue": "={{ $json.calculated_current_matches }}",
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "954aad5b-5cde-4550-9357-6b6bc54f6ca5",
      "name": "Should update current_matches?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        340,
        1160
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteer_availability\nSET current_matches = {{ $json.calculated_current_matches }}, updated_at = NOW()\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "dfdcacaf-f783-4908-b650-fe729dc2f4cc",
      "name": "Update current_matches1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        840,
        1000
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "53a6dfc0-564c-46c6-ba31-a373e2b718ac",
              "leftValue": "={{ $json.calculated_current_matches }}",
              "rightValue": "={{ $json.max_matches }}",
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "00c39ed4-dd09-4e2d-81d1-a3d67ad646a4",
      "name": "Should update is_available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        840,
        1220
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteer_availability\nSET is_available = FALSE\nWHERE volunteer_id = {{ $json.volunteer_id }}",
        "options": {}
      },
      "id": "a3c265bd-8c67-4125-b78c-f4daab46c5fa",
      "name": "Update is_available",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1180,
        1200
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "fa143aea-49de-479a-9acd-2a188df0b168",
              "leftValue": "={{ $json.condition }}",
              "rightValue": "disponivel",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "87e506d9-4a2b-42d6-8e03-b0b8adf750f9",
      "name": "Should update volunteer condition?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1460,
        1460
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE volunteers\nSET condition = 'indisponivel_sem_vagas', updated_at = NOW()\nWHERE id = {{ $json.volunteer_id }}\n",
        "options": {}
      },
      "id": "3674b53a-2997-49a4-b451-c4f363a8d9bc",
      "name": "Update volunteer condition",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1960,
        1280
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO volunteer_status_history (volunteer_id, status, created_at)\nVALUES ({{ $json.volunteer_id }}, 'indisponivel_sem_vagas', NOW())",
        "options": {}
      },
      "id": "13e8223c-2df3-4169-bb5b-45ccc566504d",
      "name": "Insert into volunteer_status_history",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1940,
        1480
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n\tmatch_id, \n\tstatus AS current_status,\n    '{{$json[\"status\"]}}' AS new_status,\n    volunteer_id \nFROM match.matches\nWHERE volunteer_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT \nOR msr_zendesk_ticket_id = {{$json[\"zendesk_ticket_id\"]}}::BIGINT\nORDER BY created_at DESC\nLIMIT 1",
        "options": {}
      },
      "id": "36d74f8c-1016-47e9-9a0d-c3d9c08c132b",
      "name": "Fetch match_id and status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        -780,
        840
      ],
      "credentials": {
        "postgres": {
          "id": "c5mNsjWNXx3mw1Fh",
          "name": "[PROD] Mapa"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "mapadoacolhimento.app.n8n.cloud",
            "x-request-id": "e8bf0c55-f984-45b4-a26a-14e1ce367e68",
            "x-real-ip": "216.198.2.158",
            "x-forwarded-for": "216.198.2.158",
            "x-forwarded-host": "mapadoacolhimento.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-scheme": "https",
            "x-scheme": "https",
            "content-length": "67",
            "user-agent": "Zendesk Webhook",
            "authorization": "Basic ZGV2QG1hcGEub3JnLmJyL3Rva2VuOkxWMHJoR2hxYzd1UTB2OGwzbTFtUFhwdmVZVFNMWG93UU4xbEJLZFk=",
            "content-type": "application/json; charset=utf-8",
            "x-zendesk-account-id": "9040899",
            "x-zendesk-webhook-id": "01HJ1X20PK0J3MMT5X9TZQTA5D",
            "x-zendesk-webhook-invocation-id": "01HNJW1GMCYBYS7JZXRZFEVDWN",
            "x-zendesk-webhook-signature": "K0nsRNwqrPWI/z8mGlVwmZQT9Ot7wSofm5vrmcqxyis=",
            "x-zendesk-webhook-signature-timestamp": "2024-02-01T17:39:08Z"
          },
          "params": {},
          "query": {},
          "body": {
            "id": "80365",
            "status_acolhimento": "atendimento__iniciado"
          }
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "HYstwqyTrzYsvJ2P"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-09T22:32:23.916Z",
      "updatedAt": "2024-01-09T22:32:23.916Z",
      "id": "JnlufCPRnot361zL",
      "name": "zendesk integration"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-02-21T13:38:12.000Z",
  "versionId": "7bb7e714-cd04-4218-ab6e-6480a76b37bb"
}